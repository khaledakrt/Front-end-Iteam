{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nexport let SectionsViewComponent = class SectionsViewComponent {\n  constructor(layoutService, router, blogService // Inject the BlogService\n  ) {\n    this.layoutService = layoutService;\n    this.router = router;\n    this.blogService = blogService;\n    this.isNavbarGray = false;\n    this.isResponsiveMenuGray = false;\n    this.blogContent = ''; // Assuming the content is a string\n  }\n\n  ngOnInit() {\n    // Fetch the blog content when the component initializes\n    this.fetchBlogContent();\n  }\n  onScroll() {\n    this.isNavbarGray = window.scrollY > 20; // Adjust the scroll position threshold\n  }\n\n  toggleNavbarColor() {\n    this.isNavbarGray = true;\n  }\n  // Fetch blog content from the service\n  fetchBlogContent() {\n    // Assuming you have a method in your BlogService to get the content\n    this.blogService.getBlogContent().subscribe(content => {\n      this.blogContent = content;\n    }, error => {\n      console.error('Error fetching blog content:', error);\n    });\n  }\n};\n__decorate([HostListener('window:scroll', ['$event'])], SectionsViewComponent.prototype, \"onScroll\", null);\nSectionsViewComponent = __decorate([Component({\n  selector: 'app-sections-view',\n  templateUrl: './sections-view.component.html',\n  styleUrls: ['./sections-view.component.scss']\n})], SectionsViewComponent);","map":{"version":3,"names":["Component","HostListener","SectionsViewComponent","constructor","layoutService","router","blogService","isNavbarGray","isResponsiveMenuGray","blogContent","ngOnInit","fetchBlogContent","onScroll","window","scrollY","toggleNavbarColor","getBlogContent","subscribe","content","error","console","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\systemConfig\\me\\medin2024-tailwind\\src\\app\\demo\\components\\view\\sections-view\\sections-view.component.ts"],"sourcesContent":["import { Component, HostListener, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BlogService } from 'path-to-your-blog-service'; // Adjust the path\nimport { LayoutService } from 'src/app/layout/service/app.layout.service';\n\n@Component({\n  selector: 'app-sections-view',\n  templateUrl: './sections-view.component.html',\n  styleUrls: ['./sections-view.component.scss']\n})\nexport class SectionsViewComponent implements OnInit {\n  isNavbarGray = false;\n  isResponsiveMenuGray: boolean = false;\n  blogContent: string = ''; // Assuming the content is a string\n\n  constructor(\n    public layoutService: LayoutService,\n    public router: Router,\n    private blogService: BlogService // Inject the BlogService\n  ) {}\n\n  ngOnInit() {\n    // Fetch the blog content when the component initializes\n    this.fetchBlogContent();\n  }\n\n  @HostListener('window:scroll', ['$event'])\n  onScroll() {\n    this.isNavbarGray = window.scrollY > 20; // Adjust the scroll position threshold\n  }\n\n  toggleNavbarColor() {\n    this.isNavbarGray = true;\n  }\n\n  // Fetch blog content from the service\n  fetchBlogContent() {\n    // Assuming you have a method in your BlogService to get the content\n    this.blogService.getBlogContent().subscribe(\n      (content: string) => {\n        this.blogContent = content;\n      },\n      (error) => {\n        console.error('Error fetching blog content:', error);\n      }\n    );\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,QAAgB,eAAe;AAUxD,WAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAKhCC,YACSC,aAA4B,EAC5BC,MAAc,EACbC,WAAwB,CAAC;EAAA,E;IAF1B,KAAAF,aAAa,GAAbA,aAAa;IACb,KAAAC,MAAM,GAANA,MAAM;IACL,KAAAC,WAAW,GAAXA,WAAW;IAPrB,KAAAC,YAAY,GAAG,KAAK;IACpB,KAAAC,oBAAoB,GAAY,KAAK;IACrC,KAAAC,WAAW,GAAW,EAAE,CAAC,CAAC;EAMvB;;EAEHC,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,gBAAgB,EAAE;EACzB;EAGAC,QAAQA,CAAA;IACN,IAAI,CAACL,YAAY,GAAGM,MAAM,CAACC,OAAO,GAAG,EAAE,CAAC,CAAC;EAC3C;;EAEAC,iBAAiBA,CAAA;IACf,IAAI,CAACR,YAAY,GAAG,IAAI;EAC1B;EAEA;EACAI,gBAAgBA,CAAA;IACd;IACA,IAAI,CAACL,WAAW,CAACU,cAAc,EAAE,CAACC,SAAS,CACxCC,OAAe,IAAI;MAClB,IAAI,CAACT,WAAW,GAAGS,OAAO;IAC5B,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD,CAAC,CACF;EACH;CACD;AApBCE,UAAA,EADCpB,YAAY,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC,CAAC,C,oDAGzC;AAnBUC,qBAAqB,GAAAmB,UAAA,EALjCrB,SAAS,CAAC;EACTsB,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,C,EACWtB,qBAAqB,CAqCjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}