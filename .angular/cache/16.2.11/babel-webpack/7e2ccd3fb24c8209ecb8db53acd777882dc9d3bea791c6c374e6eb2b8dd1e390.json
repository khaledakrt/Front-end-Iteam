{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FormationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/formation'; // Update the URL accordingly\n  }\n\n  getFormations() {\n    return this.http.get(this.apiUrl);\n  }\n  getFormationById(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get(url);\n  }\n  deleteFormation(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete(url);\n  }\n  addFormation(formData) {\n    return this.http.post(this.apiUrl, formData);\n  }\n  updateFormationWithImage(id, formData) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.put(url, formData);\n  }\n  addFormationWithImage(formData) {\n    return this.http.post(this.apiUrl, formData);\n  }\n  deleteFormations(ids) {\n    const url = `${this.apiUrl}/multi`; // Adjust the URL if needed\n    const requestBody = {\n      formationIds: ids // Ensure that you are passing an array of valid ObjectId strings\n    };\n\n    return this.http.post(url, requestBody);\n  }\n  static #_ = this.ɵfac = function FormationService_Factory(t) {\n    return new (t || FormationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormationService,\n    factory: FormationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["FormationService","constructor","http","apiUrl","getFormations","get","getFormationById","id","url","deleteFormation","delete","addFormation","formData","post","updateFormationWithImage","put","addFormationWithImage","deleteFormations","ids","requestBody","formationIds","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\systemConfig\\me\\medin2024-tailwind\\src\\app\\demo\\service\\formation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Formation } from '../api/formation'; // Import the Formation interface\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormationService {\n  private apiUrl = 'http://localhost:3000/formation'; // Update the URL accordingly\n\n  constructor(private http: HttpClient) {}\n\n  getFormations(): Observable<Formation[]> {\n    return this.http.get<Formation[]>(this.apiUrl);\n  }\n\n  getFormationById(id: string): Observable<Formation> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get<Formation>(url);\n  }\n\n  deleteFormation(id: string): Observable<void> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete<void>(url);\n  }\n\n  addFormation(formData: FormData): Observable<Formation> {\n    return this.http.post<Formation>(this.apiUrl, formData);\n  }\n\n  updateFormationWithImage(id: string, formData: FormData): Observable<Formation> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.put<Formation>(url, formData);\n  }\n\n  addFormationWithImage(formData: FormData): Observable<Formation> {\n    return this.http.post<Formation>(this.apiUrl, formData);\n  }\n\n  deleteFormations(ids: string[]): Observable<void> {\n    const url = `${this.apiUrl}/multi`; // Adjust the URL if needed\n    const requestBody = {\n      formationIds: ids, // Ensure that you are passing an array of valid ObjectId strings\n    };\n  \n    return this.http.post<void>(url, requestBody);\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,gBAAgB;EAG3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,iCAAiC,CAAC,CAAC;EAEb;;EAEvCC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAc,IAAI,CAACF,MAAM,CAAC;EAChD;EAEAG,gBAAgBA,CAACC,EAAU;IACzB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,IAAII,EAAE,EAAE;IAClC,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAYG,GAAG,CAAC;EACtC;EAEAC,eAAeA,CAACF,EAAU;IACxB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,IAAII,EAAE,EAAE;IAClC,OAAO,IAAI,CAACL,IAAI,CAACQ,MAAM,CAAOF,GAAG,CAAC;EACpC;EAEAG,YAAYA,CAACC,QAAkB;IAC7B,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAY,IAAI,CAACV,MAAM,EAAES,QAAQ,CAAC;EACzD;EAEAE,wBAAwBA,CAACP,EAAU,EAAEK,QAAkB;IACrD,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,IAAII,EAAE,EAAE;IAClC,OAAO,IAAI,CAACL,IAAI,CAACa,GAAG,CAAYP,GAAG,EAAEI,QAAQ,CAAC;EAChD;EAEAI,qBAAqBA,CAACJ,QAAkB;IACtC,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAY,IAAI,CAACV,MAAM,EAAES,QAAQ,CAAC;EACzD;EAEAK,gBAAgBA,CAACC,GAAa;IAC5B,MAAMV,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,QAAQ,CAAC,CAAC;IACpC,MAAMgB,WAAW,GAAG;MAClBC,YAAY,EAAEF,GAAG,CAAE;KACpB;;IAED,OAAO,IAAI,CAAChB,IAAI,CAACW,IAAI,CAAOL,GAAG,EAAEW,WAAW,CAAC;EAC/C;EAAC,QAAAE,CAAA,G;qBAvCUrB,gBAAgB,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhB1B,gBAAgB;IAAA2B,OAAA,EAAhB3B,gBAAgB,CAAA4B,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}