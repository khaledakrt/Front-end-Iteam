{"ast":null,"code":"import * as i2 from '@angular/common';\nimport { DOCUMENT, isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ViewEncapsulation, Inject, Input, Output, ViewChild, ContentChildren, PLATFORM_ID, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport * as i3 from 'primeng/paginator';\nimport { PaginatorModule } from 'primeng/paginator';\nimport * as i5 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i4 from 'primeng/scroller';\nimport { ScrollerModule } from 'primeng/scroller';\nimport { ObjectUtils } from 'primeng/utils';\nimport { Subject } from 'rxjs';\nimport { SortAmountDownIcon } from 'primeng/icons/sortamountdown';\nimport { ChevronRightIcon } from 'primeng/icons/chevronright';\nimport { ArrowDownIcon } from 'primeng/icons/arrowdown';\nimport { ArrowUpIcon } from 'primeng/icons/arrowup';\nimport { CheckIcon } from 'primeng/icons/check';\nimport { ChevronDownIcon } from 'primeng/icons/chevrondown';\nimport { MinusIcon } from 'primeng/icons/minus';\nimport { SortAltIcon } from 'primeng/icons/sortalt';\nimport { SortAmountUpAltIcon } from 'primeng/icons/sortamountupalt';\nimport { SpinnerIcon } from 'primeng/icons/spinner';\nconst _c0 = [\"container\"];\nconst _c1 = [\"resizeHelper\"];\nconst _c2 = [\"reorderIndicatorUp\"];\nconst _c3 = [\"reorderIndicatorDown\"];\nconst _c4 = [\"table\"];\nconst _c5 = [\"scrollableView\"];\nconst _c6 = [\"scrollableFrozenView\"];\nfunction TreeTable_div_2_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(\"p-treetable-loading-icon pi-spin \" + ctx_r11.loadingIcon);\n  }\n}\nfunction TreeTable_div_2_ng_container_3_SpinnerIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SpinnerIcon\", 18);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"spin\", true)(\"styleClass\", \"p-treetable-loading-icon\");\n  }\n}\nfunction TreeTable_div_2_ng_container_3_span_2_1_ng_template_0_Template(rf, ctx) {}\nfunction TreeTable_div_2_ng_container_3_span_2_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_div_2_ng_container_3_span_2_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction TreeTable_div_2_ng_container_3_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtemplate(1, TreeTable_div_2_ng_container_3_span_2_1_Template, 1, 0, null, 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r14.loadingIconTemplate);\n  }\n}\nfunction TreeTable_div_2_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTable_div_2_ng_container_3_SpinnerIcon_1_Template, 1, 2, \"SpinnerIcon\", 16);\n    i0.ɵɵtemplate(2, TreeTable_div_2_ng_container_3_span_2_Template, 2, 1, \"span\", 17);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r12.loadingIconTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r12.loadingIconTemplate);\n  }\n}\nfunction TreeTable_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 13);\n    i0.ɵɵtemplate(2, TreeTable_div_2_i_2_Template, 1, 2, \"i\", 14);\n    i0.ɵɵtemplate(3, TreeTable_div_2_ng_container_3_Template, 3, 2, \"ng-container\", 15);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loadingIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.loadingIcon);\n  }\n}\nfunction TreeTable_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtemplate(1, TreeTable_div_3_ng_container_1_Template, 1, 0, \"ng-container\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.captionTemplate);\n  }\n}\nfunction TreeTable_p_paginator_4_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_4_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_4_ng_template_1_ng_container_0_Template, 1, 0, \"ng-container\", 20);\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r18.paginatorFirstPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_4_ng_template_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_4_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_4_ng_template_2_ng_container_0_Template, 1, 0, \"ng-container\", 20);\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r19.paginatorPreviousPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_4_ng_template_3_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_4_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_4_ng_template_3_ng_container_0_Template, 1, 0, \"ng-container\", 20);\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r20.paginatorLastPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_4_ng_template_4_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_4_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_4_ng_template_4_ng_container_0_Template, 1, 0, \"ng-container\", 20);\n  }\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r21.paginatorNextPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-paginator\", 22);\n    i0.ɵɵlistener(\"onPageChange\", function TreeTable_p_paginator_4_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.onPageChange($event));\n    });\n    i0.ɵɵtemplate(1, TreeTable_p_paginator_4_ng_template_1_Template, 1, 1, \"ng-template\", 23);\n    i0.ɵɵtemplate(2, TreeTable_p_paginator_4_ng_template_2_Template, 1, 1, \"ng-template\", 24);\n    i0.ɵɵtemplate(3, TreeTable_p_paginator_4_ng_template_3_Template, 1, 1, \"ng-template\", 25);\n    i0.ɵɵtemplate(4, TreeTable_p_paginator_4_ng_template_4_Template, 1, 1, \"ng-template\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r3.rows)(\"first\", ctx_r3.first)(\"totalRecords\", ctx_r3.totalRecords)(\"pageLinkSize\", ctx_r3.pageLinks)(\"alwaysShow\", ctx_r3.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r3.rowsPerPageOptions)(\"templateLeft\", ctx_r3.paginatorLeftTemplate)(\"templateRight\", ctx_r3.paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r3.paginatorDropdownAppendTo)(\"currentPageReportTemplate\", ctx_r3.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r3.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r3.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r3.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r3.showJumpToPageDropdown)(\"showPageLinks\", ctx_r3.showPageLinks);\n  }\n}\nfunction TreeTable_div_5_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_div_5_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_div_5_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c7 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\nfunction TreeTable_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27)(1, \"table\", 28, 29);\n    i0.ɵɵtemplate(3, TreeTable_div_5_ng_container_3_Template, 1, 0, \"ng-container\", 30);\n    i0.ɵɵelementStart(4, \"thead\", 31);\n    i0.ɵɵtemplate(5, TreeTable_div_5_ng_container_5_Template, 1, 0, \"ng-container\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"tbody\", 32);\n    i0.ɵɵelementStart(7, \"tfoot\", 33);\n    i0.ɵɵtemplate(8, TreeTable_div_5_ng_container_8_Template, 1, 0, \"ng-container\", 30);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.tableStyleClass)(\"ngStyle\", ctx_r4.tableStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(10, _c7, ctx_r4.columns));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.headerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(12, _c7, ctx_r4.columns));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"pTreeTableBody\", ctx_r4.columns)(\"pTreeTableBodyTemplate\", ctx_r4.bodyTemplate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.footerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(14, _c7, ctx_r4.columns));\n  }\n}\nconst _c8 = function (a0) {\n  return {\n    width: a0\n  };\n};\nfunction TreeTable_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 38, 39);\n  }\n  if (rf & 2) {\n    const ctx_r32 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ttScrollableView\", ctx_r32.frozenColumns)(\"frozen\", true)(\"ngStyle\", i0.ɵɵpureFunction1(4, _c8, ctx_r32.frozenWidth))(\"scrollHeight\", ctx_r32.scrollHeight);\n  }\n}\nconst _c9 = function (a0, a1) {\n  return {\n    left: a0,\n    width: a1\n  };\n};\nfunction TreeTable_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34);\n    i0.ɵɵtemplate(1, TreeTable_div_6_div_1_Template, 2, 6, \"div\", 35);\n    i0.ɵɵelement(2, \"div\", 36, 37);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.frozenColumns || ctx_r5.frozenBodyTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ttScrollableView\", ctx_r5.columns)(\"frozen\", false)(\"scrollHeight\", ctx_r5.scrollHeight)(\"ngStyle\", i0.ɵɵpureFunction2(5, _c9, ctx_r5.frozenWidth, \"calc(100% - \" + ctx_r5.frozenWidth + \")\"));\n  }\n}\nfunction TreeTable_p_paginator_7_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_7_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_7_ng_template_1_ng_container_0_Template, 1, 0, \"ng-container\", 20);\n  }\n  if (rf & 2) {\n    const ctx_r35 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r35.paginatorFirstPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_7_ng_template_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_7_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_7_ng_template_2_ng_container_0_Template, 1, 0, \"ng-container\", 20);\n  }\n  if (rf & 2) {\n    const ctx_r36 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r36.paginatorPreviousPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_7_ng_template_3_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_7_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_7_ng_template_3_ng_container_0_Template, 1, 0, \"ng-container\", 20);\n  }\n  if (rf & 2) {\n    const ctx_r37 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r37.paginatorLastPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_7_ng_template_4_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_p_paginator_7_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_p_paginator_7_ng_template_4_ng_container_0_Template, 1, 0, \"ng-container\", 20);\n  }\n  if (rf & 2) {\n    const ctx_r38 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r38.paginatorNextPageLinkIconTemplate);\n  }\n}\nfunction TreeTable_p_paginator_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r44 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-paginator\", 40);\n    i0.ɵɵlistener(\"onPageChange\", function TreeTable_p_paginator_7_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r44);\n      const ctx_r43 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r43.onPageChange($event));\n    });\n    i0.ɵɵtemplate(1, TreeTable_p_paginator_7_ng_template_1_Template, 1, 1, \"ng-template\", 23);\n    i0.ɵɵtemplate(2, TreeTable_p_paginator_7_ng_template_2_Template, 1, 1, \"ng-template\", 24);\n    i0.ɵɵtemplate(3, TreeTable_p_paginator_7_ng_template_3_Template, 1, 1, \"ng-template\", 25);\n    i0.ɵɵtemplate(4, TreeTable_p_paginator_7_ng_template_4_Template, 1, 1, \"ng-template\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r6.rows)(\"first\", ctx_r6.first)(\"totalRecords\", ctx_r6.totalRecords)(\"pageLinkSize\", ctx_r6.pageLinks)(\"alwaysShow\", ctx_r6.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r6.rowsPerPageOptions)(\"templateLeft\", ctx_r6.paginatorLeftTemplate)(\"templateRight\", ctx_r6.paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r6.paginatorDropdownAppendTo)(\"currentPageReportTemplate\", ctx_r6.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r6.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r6.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r6.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r6.showJumpToPageDropdown)(\"showPageLinks\", ctx_r6.showPageLinks);\n  }\n}\nfunction TreeTable_div_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTable_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 41);\n    i0.ɵɵtemplate(1, TreeTable_div_8_ng_container_1_Template, 1, 0, \"ng-container\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.summaryTemplate);\n  }\n}\nfunction TreeTable_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 42, 43);\n  }\n}\nfunction TreeTable_span_10_ArrowDownIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ArrowDownIcon\");\n  }\n}\nfunction TreeTable_span_10_3_ng_template_0_Template(rf, ctx) {}\nfunction TreeTable_span_10_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_span_10_3_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction TreeTable_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 44, 45);\n    i0.ɵɵtemplate(2, TreeTable_span_10_ArrowDownIcon_2_Template, 1, 0, \"ArrowDownIcon\", 15);\n    i0.ɵɵtemplate(3, TreeTable_span_10_3_Template, 1, 0, null, 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r9.reorderIndicatorUpIconTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r9.reorderIndicatorUpIconTemplate);\n  }\n}\nfunction TreeTable_span_11_ArrowUpIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ArrowUpIcon\");\n  }\n}\nfunction TreeTable_span_11_3_ng_template_0_Template(rf, ctx) {}\nfunction TreeTable_span_11_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTable_span_11_3_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction TreeTable_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 46, 47);\n    i0.ɵɵtemplate(2, TreeTable_span_11_ArrowUpIcon_2_Template, 1, 0, \"ArrowUpIcon\", 15);\n    i0.ɵɵtemplate(3, TreeTable_span_11_3_Template, 1, 0, null, 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r10.reorderIndicatorDownIconTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r10.reorderIndicatorDownIconTemplate);\n  }\n}\nconst _c10 = function (a1, a2, a3, a4, a5) {\n  return {\n    \"p-treetable p-component\": true,\n    \"p-treetable-hoverable-rows\": a1,\n    \"p-treetable-auto-layout\": a2,\n    \"p-treetable-resizable\": a3,\n    \"p-treetable-resizable-fit\": a4,\n    \"p-treetable-flex-scrollable\": a5\n  };\n};\nconst _c11 = [\"pTreeTableBody\", \"\"];\nfunction TTBody_ng_template_0_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c12 = function (a0, a1, a2, a3) {\n  return {\n    $implicit: a0,\n    node: a1,\n    rowData: a2,\n    columns: a3\n  };\n};\nfunction TTBody_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_template_0_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const serializedNode_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(2, _c12, serializedNode_r2, serializedNode_r2.node, serializedNode_r2.node.data, ctx_r4.columns));\n  }\n}\nfunction TTBody_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTBody_ng_template_0_ng_container_0_Template, 2, 7, \"ng-container\", 1);\n  }\n  if (rf & 2) {\n    const serializedNode_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngIf\", serializedNode_r2.visible);\n  }\n}\nfunction TTBody_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c13 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    frozen: a1\n  };\n};\nfunction TTBody_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.tt.emptyMessageTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c13, ctx_r1.columns, ctx_r1.frozen));\n  }\n}\nconst _c14 = [\"scrollHeader\"];\nconst _c15 = [\"scrollHeaderBox\"];\nconst _c16 = [\"scrollBody\"];\nconst _c17 = [\"scrollTable\"];\nconst _c18 = [\"loadingTable\"];\nconst _c19 = [\"scrollFooter\"];\nconst _c20 = [\"scrollFooterBox\"];\nconst _c21 = [\"scrollableAligner\"];\nconst _c22 = [\"scroller\"];\nconst _c23 = [\"ttScrollableView\", \"\"];\nfunction TTScrollableView_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_p_scroller_8_ng_template_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c24 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    options: a1\n  };\n};\nfunction TTScrollableView_p_scroller_8_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTScrollableView_p_scroller_8_ng_template_2_ng_container_0_Template, 1, 0, \"ng-container\", 5);\n  }\n  if (rf & 2) {\n    const items_r12 = ctx.$implicit;\n    const scrollerOptions_r13 = ctx.options;\n    i0.ɵɵnextContext(2);\n    const _r6 = i0.ɵɵreference(11);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r6)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c24, items_r12, scrollerOptions_r13));\n  }\n}\nfunction TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c25 = function (a0) {\n  return {\n    options: a0\n  };\n};\nfunction TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_ng_container_0_Template, 1, 0, \"ng-container\", 5);\n  }\n  if (rf & 2) {\n    const scrollerOptions_r16 = ctx.options;\n    const ctx_r15 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r15.loaderTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c25, scrollerOptions_r16));\n  }\n}\nfunction TTScrollableView_p_scroller_8_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_Template, 1, 4, \"ng-template\", 14);\n    i0.ɵɵelementContainerEnd();\n  }\n}\nconst _c26 = function (a0) {\n  return {\n    height: a0\n  };\n};\nfunction TTScrollableView_p_scroller_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-scroller\", 11, 12);\n    i0.ɵɵlistener(\"onLazyLoad\", function TTScrollableView_p_scroller_8_Template_p_scroller_onLazyLoad_0_listener($event) {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.tt.onLazyItemLoad($event));\n    });\n    i0.ɵɵtemplate(2, TTScrollableView_p_scroller_8_ng_template_2_Template, 1, 5, \"ng-template\", 13);\n    i0.ɵɵtemplate(3, TTScrollableView_p_scroller_8_ng_container_3_Template, 2, 0, \"ng-container\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction1(8, _c26, ctx_r4.tt.scrollHeight !== \"flex\" ? ctx_r4.tt.scrollHeight : undefined));\n    i0.ɵɵproperty(\"items\", ctx_r4.tt.serializedValue)(\"scrollHeight\", ctx_r4.scrollHeight !== \"flex\" ? undefined : \"100%\")(\"itemSize\", ctx_r4.tt.virtualScrollItemSize || ctx_r4.tt._virtualRowHeight)(\"lazy\", ctx_r4.tt.lazy)(\"options\", ctx_r4.tt.virtualScrollOptions);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.loaderTemplate);\n  }\n}\nfunction TTScrollableView_ng_container_9_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c27 = function (a0, a1) {\n  return {\n    \"max-height\": a0,\n    \"overflow-y\": a1\n  };\n};\nconst _c28 = function () {\n  return {};\n};\nfunction TTScrollableView_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 15, 16);\n    i0.ɵɵtemplate(3, TTScrollableView_ng_container_9_ng_container_3_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    const _r6 = i0.ɵɵreference(11);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(3, _c27, ctx_r5.tt.scrollHeight !== \"flex\" ? ctx_r5.scrollHeight : undefined, !ctx_r5.frozen && ctx_r5.tt.scrollHeight ? \"scroll\" : undefined));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r6)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(7, _c24, ctx_r5.serializedValue, i0.ɵɵpureFunction0(6, _c28)));\n  }\n}\nfunction TTScrollableView_ng_template_10_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_ng_template_10_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 21, 22);\n  }\n}\nfunction TTScrollableView_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 17, 18);\n    i0.ɵɵtemplate(2, TTScrollableView_ng_template_10_ng_container_2_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelement(3, \"tbody\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, TTScrollableView_ng_template_10_div_4_Template, 2, 0, \"div\", 20);\n  }\n  if (rf & 2) {\n    const items_r22 = ctx.$implicit;\n    const scrollerOptions_r23 = ctx.options;\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(scrollerOptions_r23.contentStyle);\n    i0.ɵɵclassMap(ctx_r7.tt.tableStyleClass);\n    i0.ɵɵproperty(\"ngClass\", scrollerOptions_r23.contentStyleClass)(\"ngStyle\", ctx_r7.tt.tableStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.frozen ? ctx_r7.tt.frozenColGroupTemplate || ctx_r7.tt.colGroupTemplate : ctx_r7.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(13, _c7, ctx_r7.columns));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"pTreeTableBody\", ctx_r7.columns)(\"pTreeTableBodyTemplate\", ctx_r7.frozen ? ctx_r7.tt.frozenBodyTemplate || ctx_r7.tt.bodyTemplate : ctx_r7.tt.bodyTemplate)(\"serializedNodes\", items_r22)(\"frozen\", ctx_r7.frozen);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.frozen);\n  }\n}\nfunction TTScrollableView_div_12_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_div_12_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TTScrollableView_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23, 24)(2, \"div\", 25, 26)(4, \"table\", 27);\n    i0.ɵɵtemplate(5, TTScrollableView_div_12_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementStart(6, \"tfoot\", 28);\n    i0.ɵɵtemplate(7, TTScrollableView_div_12_ng_container_7_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", ctx_r8.tt.tableStyleClass)(\"ngStyle\", ctx_r8.tt.tableStyle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r8.frozen ? ctx_r8.tt.frozenColGroupTemplate || ctx_r8.tt.colGroupTemplate : ctx_r8.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(6, _c7, ctx_r8.columns));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r8.frozen ? ctx_r8.tt.frozenFooterTemplate || ctx_r8.tt.footerTemplate : ctx_r8.tt.footerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(8, _c7, ctx_r8.columns));\n  }\n}\nfunction TTSortIcon_ng_container_0_SortAltIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SortAltIcon\", 3);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-sortable-column-icon\");\n  }\n}\nfunction TTSortIcon_ng_container_0_SortAmountUpAltIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SortAmountUpAltIcon\", 3);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-sortable-column-icon\");\n  }\n}\nfunction TTSortIcon_ng_container_0_SortAmountDownIcon_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SortAmountDownIcon\", 3);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-sortable-column-icon\");\n  }\n}\nfunction TTSortIcon_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTSortIcon_ng_container_0_SortAltIcon_1_Template, 1, 1, \"SortAltIcon\", 2);\n    i0.ɵɵtemplate(2, TTSortIcon_ng_container_0_SortAmountUpAltIcon_2_Template, 1, 1, \"SortAmountUpAltIcon\", 2);\n    i0.ɵɵtemplate(3, TTSortIcon_ng_container_0_SortAmountDownIcon_3_Template, 1, 1, \"SortAmountDownIcon\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.sortOrder === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.sortOrder === 1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.sortOrder === -1);\n  }\n}\nfunction TTSortIcon_span_1_1_ng_template_0_Template(rf, ctx) {}\nfunction TTSortIcon_span_1_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTSortIcon_span_1_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction TTSortIcon_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 4);\n    i0.ɵɵtemplate(1, TTSortIcon_span_1_1_Template, 1, 0, null, 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.tt.sortIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c7, ctx_r1.sortOrder));\n  }\n}\nfunction TTCheckbox_ng_container_5_CheckIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"CheckIcon\", 7);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-checkbox-icon\");\n  }\n}\nfunction TTCheckbox_ng_container_5_MinusIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"MinusIcon\", 7);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-checkbox-icon\");\n  }\n}\nfunction TTCheckbox_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTCheckbox_ng_container_5_CheckIcon_1_Template, 1, 1, \"CheckIcon\", 6);\n    i0.ɵɵtemplate(2, TTCheckbox_ng_container_5_MinusIcon_2_Template, 1, 1, \"MinusIcon\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.checked);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.rowNode.node.partialSelected);\n  }\n}\nfunction TTCheckbox_span_6_1_ng_template_0_Template(rf, ctx) {}\nfunction TTCheckbox_span_6_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTCheckbox_span_6_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nconst _c29 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    partialSelected: a1\n  };\n};\nfunction TTCheckbox_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, TTCheckbox_span_6_1_Template, 1, 0, null, 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.tt.checkboxIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c29, ctx_r2.checked, ctx_r2.rowNode.node.partialSelected));\n  }\n}\nconst _c30 = function (a0) {\n  return {\n    \"p-checkbox-focused\": a0\n  };\n};\nconst _c31 = function (a1, a2, a3, a4) {\n  return {\n    \"p-checkbox-box\": true,\n    \"p-highlight\": a1,\n    \"p-focus\": a2,\n    \"p-indeterminate\": a3,\n    \"p-disabled\": a4\n  };\n};\nconst _c32 = [\"box\"];\nfunction TTHeaderCheckbox_ng_container_6_CheckIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"CheckIcon\", 9);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-checkbox-icon\");\n  }\n}\nfunction TTHeaderCheckbox_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTHeaderCheckbox_ng_container_6_CheckIcon_1_Template, 1, 1, \"CheckIcon\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.checked);\n  }\n}\nfunction TTHeaderCheckbox_span_7_1_ng_template_0_Template(rf, ctx) {}\nfunction TTHeaderCheckbox_span_7_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTHeaderCheckbox_span_7_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction TTHeaderCheckbox_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtemplate(1, TTHeaderCheckbox_span_7_1_Template, 1, 0, null, 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.tt.headerCheckboxIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c7, ctx_r3.checked));\n  }\n}\nconst _c33 = function (a1, a2, a3) {\n  return {\n    \"p-checkbox-box\": true,\n    \"p-highlight\": a1,\n    \"p-focus\": a2,\n    \"p-disabled\": a3\n  };\n};\nfunction TreeTableCellEditor_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTableCellEditor_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.inputTemplate);\n  }\n}\nfunction TreeTableCellEditor_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TreeTableCellEditor_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.outputTemplate);\n  }\n}\nfunction TreeTableToggler_ng_container_1_ChevronDownIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ChevronDownIcon\");\n  }\n}\nfunction TreeTableToggler_ng_container_1_ChevronRightIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ChevronRightIcon\");\n  }\n}\nfunction TreeTableToggler_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTableToggler_ng_container_1_ChevronDownIcon_1_Template, 1, 0, \"ChevronDownIcon\", 1);\n    i0.ɵɵtemplate(2, TreeTableToggler_ng_container_1_ChevronRightIcon_2_Template, 1, 0, \"ChevronRightIcon\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.rowNode.node.expanded);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.rowNode.node.expanded);\n  }\n}\nfunction TreeTableToggler_2_ng_template_0_Template(rf, ctx) {}\nfunction TreeTableToggler_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeTableToggler_2_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nclass TreeTableService {\n  sortSource = new Subject();\n  selectionSource = new Subject();\n  contextMenuSource = new Subject();\n  uiUpdateSource = new Subject();\n  totalRecordsSource = new Subject();\n  sortSource$ = this.sortSource.asObservable();\n  selectionSource$ = this.selectionSource.asObservable();\n  contextMenuSource$ = this.contextMenuSource.asObservable();\n  uiUpdateSource$ = this.uiUpdateSource.asObservable();\n  totalRecordsSource$ = this.totalRecordsSource.asObservable();\n  onSort(sortMeta) {\n    this.sortSource.next(sortMeta);\n  }\n  onSelectionChange() {\n    this.selectionSource.next(null);\n  }\n  onContextMenu(node) {\n    this.contextMenuSource.next(node);\n  }\n  onUIUpdate(value) {\n    this.uiUpdateSource.next(value);\n  }\n  onTotalRecordsChange(value) {\n    this.totalRecordsSource.next(value);\n  }\n  static ɵfac = function TreeTableService_Factory(t) {\n    return new (t || TreeTableService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TreeTableService,\n    factory: TreeTableService.ɵfac\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableService, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * TreeTable is used to display hierarchical data in tabular format.\n * @group Components\n */\nclass TreeTable {\n  document;\n  renderer;\n  el;\n  cd;\n  zone;\n  tableService;\n  filterService;\n  /**\n   * An array of objects to represent dynamic columns.\n   * @group Props\n   */\n  columns;\n  /**\n   * Inline style of the component.\n   * @group Props\n   */\n  style;\n  /**\n   * Style class of the component.\n   * @group Props\n   */\n  styleClass;\n  /**\n   * Inline style of the table.\n   * @group Props\n   */\n  tableStyle;\n  /**\n   * Style class of the table.\n   * @group Props\n   */\n  tableStyleClass;\n  /**\n   * Whether the cell widths scale according to their content or not.\n   * @group Props\n   */\n  autoLayout;\n  /**\n   * Defines if data is loaded and interacted with in lazy manner.\n   * @group Props\n   */\n  lazy = false;\n  /**\n   * Whether to call lazy loading on initialization.\n   * @group Props\n   */\n  lazyLoadOnInit = true;\n  /**\n   * When specified as true, enables the pagination.\n   * @group Props\n   */\n  paginator;\n  /**\n   * Number of rows to display per page.\n   * @group Props\n   */\n  rows;\n  /**\n   * Index of the first row to be displayed.\n   * @group Props\n   */\n  first = 0;\n  /**\n   * Number of page links to display in paginator.\n   * @group Props\n   */\n  pageLinks = 5;\n  /**\n   * Array of integer/object values to display inside rows per page dropdown of paginator\n   * @group Props\n   */\n  rowsPerPageOptions;\n  /**\n   * Whether to show it even there is only one page.\n   * @group Props\n   */\n  alwaysShowPaginator = true;\n  /**\n   * Position of the paginator.\n   * @group Props\n   */\n  paginatorPosition = 'bottom';\n  /**\n   * Target element to attach the paginator dropdown overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name).\n   * @group Props\n   */\n  paginatorDropdownAppendTo;\n  /**\n   * Template of the current page report element. Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}\n   * @group Props\n   */\n  currentPageReportTemplate = '{currentPage} of {totalPages}';\n  /**\n   * Whether to display current page report.\n   * @group Props\n   */\n  showCurrentPageReport;\n  /**\n   * Whether to display a dropdown to navigate to any page.\n   * @group Props\n   */\n  showJumpToPageDropdown;\n  /**\n   * When enabled, icons are displayed on paginator to go first and last page.\n   * @group Props\n   */\n  showFirstLastIcon = true;\n  /**\n   * Whether to show page links.\n   * @group Props\n   */\n  showPageLinks = true;\n  /**\n   * Sort order to use when an unsorted column gets sorted by user interaction.\n   * @group Props\n   */\n  defaultSortOrder = 1;\n  /**\n   * Defines whether sorting works on single column or on multiple columns.\n   * @group Props\n   */\n  sortMode = 'single';\n  /**\n   * When true, resets paginator to first page after sorting.\n   * @group Props\n   */\n  resetPageOnSort = true;\n  /**\n   * Whether to use the default sorting or a custom one using sortFunction.\n   * @group Props\n   */\n  customSort;\n  /**\n   * Specifies the selection mode, valid values are \"single\" and \"multiple\".\n   * @group Props\n   */\n  selectionMode;\n  /**\n   * Selected row with a context menu.\n   * @group Props\n   */\n  contextMenuSelection;\n  /**\n   * Mode of the contet menu selection.\n   * @group Props\n   */\n  contextMenuSelectionMode = 'separate';\n  /**\n   * A property to uniquely identify a record in data.\n   * @group Props\n   */\n  dataKey;\n  /**\n   * Defines whether metaKey is should be considered for the selection. On touch enabled devices, metaKeySelection is turned off automatically.\n   * @group Props\n   */\n  metaKeySelection;\n  /**\n   * Algorithm to define if a row is selected, valid values are \"equals\" that compares by reference and \"deepEquals\" that compares all fields.\n   * @group Props\n   */\n  compareSelectionBy = 'deepEquals';\n  /**\n   * Adds hover effect to rows without the need for selectionMode.\n   * @group Props\n   */\n  rowHover;\n  /**\n   * Displays a loader to indicate data load is in progress.\n   * @group Props\n   */\n  loading;\n  /**\n   * The icon to show while indicating data load is in progress.\n   * @group Props\n   */\n  loadingIcon;\n  /**\n   * Whether to show the loading mask when loading property is true.\n   * @group Props\n   */\n  showLoader = true;\n  /**\n   * When specifies, enables horizontal and/or vertical scrolling.\n   * @group Props\n   */\n  scrollable;\n  /**\n   * Height of the scroll viewport in fixed pixels or the \"flex\" keyword for a dynamic size.\n   * @group Props\n   */\n  scrollHeight;\n  /**\n   * Whether the data should be loaded on demand during scroll.\n   * @group Props\n   */\n  virtualScroll;\n  /**\n   * Height of a row to use in calculations of virtual scrolling.\n   * @group Props\n   */\n  virtualScrollItemSize;\n  /**\n   * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.\n   * @group Props\n   */\n  virtualScrollOptions;\n  /**\n   * The delay (in milliseconds) before triggering the virtual scroll. This determines the time gap between the user's scroll action and the actual rendering of the next set of items in the virtual scroll.\n   * @group Props\n   */\n  virtualScrollDelay = 150;\n  /**\n   * Width of the frozen columns container.\n   * @group Props\n   */\n  frozenWidth;\n  /**\n   * An array of objects to represent dynamic columns that are frozen.\n   * @group Props\n   */\n  frozenColumns;\n  /**\n   * When enabled, columns can be resized using drag and drop.\n   * @group Props\n   */\n  resizableColumns;\n  /**\n   * Defines whether the overall table width should change on column resize, valid values are \"fit\" and \"expand\".\n   * @group Props\n   */\n  columnResizeMode = 'fit';\n  /**\n   * When enabled, columns can be reordered using drag and drop.\n   * @group Props\n   */\n  reorderableColumns;\n  /**\n   * Local ng-template varilable of a ContextMenu.\n   * @group Props\n   */\n  contextMenu;\n  /**\n   * Function to optimize the dom operations by delegating to ngForTrackBy, default algorithm checks for object identity.\n   * @group Props\n   */\n  rowTrackBy = (index, item) => item;\n  /**\n   * An array of FilterMetadata objects to provide external filters.\n   * @group Props\n   */\n  filters = {};\n  /**\n   * An array of fields as string to use in global filtering.\n   * @group Props\n   */\n  globalFilterFields;\n  /**\n   * Delay in milliseconds before filtering the data.\n   * @group Props\n   */\n  filterDelay = 300;\n  /**\n   * Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient.\n   * @group Props\n   */\n  filterMode = 'lenient';\n  /**\n   * Locale to use in filtering. The default locale is the host environment's current locale.\n   * @group Props\n   */\n  filterLocale;\n  /**\n   * Number of total records, defaults to length of value when not defined.\n   * @group Props\n   */\n  get totalRecords() {\n    return this._totalRecords;\n  }\n  set totalRecords(val) {\n    this._totalRecords = val;\n    this.tableService.onTotalRecordsChange(this._totalRecords);\n  }\n  /**\n   * Name of the field to sort data by default.\n   * @group Props\n   */\n  get sortField() {\n    return this._sortField;\n  }\n  set sortField(val) {\n    this._sortField = val;\n  }\n  /**\n   * Order to sort when default sorting is enabled.\n   * @defaultValue 1\n   * @group Props\n   */\n  get sortOrder() {\n    return this._sortOrder;\n  }\n  set sortOrder(val) {\n    this._sortOrder = val;\n  }\n  /**\n   * An array of SortMeta objects to sort the data by default in multiple sort mode.\n   * @defaultValue null\n   * @group Props\n   */\n  get multiSortMeta() {\n    return this._multiSortMeta;\n  }\n  set multiSortMeta(val) {\n    this._multiSortMeta = val;\n  }\n  /**\n   * Selected row in single mode or an array of values in multiple mode.\n   * @defaultValue null\n   * @group Props\n   */\n  get selection() {\n    return this._selection;\n  }\n  set selection(val) {\n    this._selection = val;\n  }\n  /**\n   * An array of objects to display.\n   * @defaultValue null\n   * @group Props\n   */\n  get value() {\n    return this._value;\n  }\n  set value(val) {\n    this._value = val;\n  }\n  /**\n   * Indicates the height of rows to be scrolled.\n   * @defaultValue 28\n   * @group Props\n   * @deprecated use virtualScrollItemSize property instead.\n   */\n  get virtualRowHeight() {\n    return this._virtualRowHeight;\n  }\n  set virtualRowHeight(val) {\n    this._virtualRowHeight = val;\n    console.warn('The virtualRowHeight property is deprecated, use virtualScrollItemSize property instead.');\n  }\n  _virtualRowHeight = 28;\n  /**\n   * Callback to invoke on selected node change.\n   * @param {TreeTableNode} object - Node instance.\n   * @group Emits\n   */\n  selectionChange = new EventEmitter();\n  /**\n   * Callback to invoke on context menu selection change.\n   * @param {TreeTableNode} object - Node instance.\n   * @group Emits\n   */\n  contextMenuSelectionChange = new EventEmitter();\n  /**\n   * Callback to invoke when data is filtered.\n   * @param {TreeTableFilterEvent} event - Custom filter event.\n   * @group Emits\n   */\n  onFilter = new EventEmitter();\n  /**\n   * Callback to invoke when a node is expanded.\n   * @param {TreeTableNode} object - Node instance.\n   * @group Emits\n   */\n  onNodeExpand = new EventEmitter();\n  /**\n   * Callback to invoke when a node is collapsed.\n   * @param {TreeTableNodeCollapseEvent} event - Node collapse event.\n   * @group Emits\n   */\n  onNodeCollapse = new EventEmitter();\n  /**\n   * Callback to invoke when pagination occurs.\n   * @param {TreeTablePaginatorState} object - Paginator state.\n   * @group Emits\n   */\n  onPage = new EventEmitter();\n  /**\n   * Callback to invoke when a column gets sorted.\n   * @param {Object} Object - Sort data.\n   * @group Emits\n   */\n  onSort = new EventEmitter();\n  /**\n   * Callback to invoke when paging, sorting or filtering happens in lazy mode.\n   * @param {TreeTableLazyLoadEvent} event - Custom lazy load event.\n   * @group Emits\n   */\n  onLazyLoad = new EventEmitter();\n  /**\n   * An event emitter to invoke on custom sorting, refer to sorting section for details.\n   * @param {TreeTableSortEvent} event - Custom sort event.\n   * @group Emits\n   */\n  sortFunction = new EventEmitter();\n  /**\n   * Callback to invoke when a column is resized.\n   * @param {TreeTableColResizeEvent} event - Custom column resize event.\n   * @group Emits\n   */\n  onColResize = new EventEmitter();\n  /**\n   * Callback to invoke when a column is reordered.\n   * @param {TreeTableColumnReorderEvent} event - Custom column reorder.\n   * @group Emits\n   */\n  onColReorder = new EventEmitter();\n  /**\n   * Callback to invoke when a node is selected.\n   * @param {TreeTableNode} object - Node instance.\n   * @group Emits\n   */\n  onNodeSelect = new EventEmitter();\n  /**\n   * Callback to invoke when a node is unselected.\n   * @param {TreeTableNodeUnSelectEvent} event - Custom node unselect event.\n   * @group Emits\n   */\n  onNodeUnselect = new EventEmitter();\n  /**\n   * Callback to invoke when a node is selected with right click.\n   * @param {TreeTableContextMenuSelectEvent} event - Custom context menu select event.\n   * @group Emits\n   */\n  onContextMenuSelect = new EventEmitter();\n  /**\n   * Callback to invoke when state of header checkbox changes.\n   * @param {TreeTableHeaderCheckboxToggleEvent} event - Custom checkbox toggle event.\n   * @group Emits\n   */\n  onHeaderCheckboxToggle = new EventEmitter();\n  /**\n   * Callback to invoke when a cell switches to edit mode.\n   * @param {TreeTableEditEvent} event - Custom edit event.\n   * @group Emits\n   */\n  onEditInit = new EventEmitter();\n  /**\n   * Callback to invoke when cell edit is completed.\n   * @param {TreeTableEditEvent} event - Custom edit event.\n   * @group Emits\n   */\n  onEditComplete = new EventEmitter();\n  /**\n   * Callback to invoke when cell edit is cancelled with escape key.\n   * @param {TreeTableEditEvent} event - Custom edit event.\n   * @group Emits\n   */\n  onEditCancel = new EventEmitter();\n  containerViewChild;\n  resizeHelperViewChild;\n  reorderIndicatorUpViewChild;\n  reorderIndicatorDownViewChild;\n  tableViewChild;\n  scrollableViewChild;\n  scrollableFrozenViewChild;\n  templates;\n  _value = [];\n  serializedValue;\n  _totalRecords = 0;\n  _multiSortMeta;\n  _sortField;\n  _sortOrder = 1;\n  filteredNodes;\n  filterTimeout;\n  colGroupTemplate;\n  captionTemplate;\n  headerTemplate;\n  bodyTemplate;\n  footerTemplate;\n  summaryTemplate;\n  emptyMessageTemplate;\n  paginatorLeftTemplate;\n  paginatorRightTemplate;\n  paginatorDropdownItemTemplate;\n  frozenHeaderTemplate;\n  frozenBodyTemplate;\n  frozenFooterTemplate;\n  frozenColGroupTemplate;\n  loadingIconTemplate;\n  reorderIndicatorUpIconTemplate;\n  reorderIndicatorDownIconTemplate;\n  sortIconTemplate;\n  checkboxIconTemplate;\n  headerCheckboxIconTemplate;\n  togglerIconTemplate;\n  paginatorFirstPageLinkIconTemplate;\n  paginatorLastPageLinkIconTemplate;\n  paginatorPreviousPageLinkIconTemplate;\n  paginatorNextPageLinkIconTemplate;\n  lastResizerHelperX;\n  reorderIconWidth;\n  reorderIconHeight;\n  draggedColumn;\n  dropPosition;\n  preventSelectionSetterPropagation;\n  _selection;\n  selectionKeys = {};\n  rowTouched;\n  editingCell;\n  editingCellData;\n  editingCellField;\n  editingCellClick;\n  documentEditListener;\n  initialized;\n  toggleRowIndex;\n  ngOnInit() {\n    if (this.lazy && this.lazyLoadOnInit && !this.virtualScroll) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    }\n    this.initialized = true;\n  }\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'caption':\n          this.captionTemplate = item.template;\n          break;\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n        case 'body':\n          this.bodyTemplate = item.template;\n          break;\n        case 'footer':\n          this.footerTemplate = item.template;\n          break;\n        case 'summary':\n          this.summaryTemplate = item.template;\n          break;\n        case 'colgroup':\n          this.colGroupTemplate = item.template;\n          break;\n        case 'emptymessage':\n          this.emptyMessageTemplate = item.template;\n          break;\n        case 'paginatorleft':\n          this.paginatorLeftTemplate = item.template;\n          break;\n        case 'paginatorright':\n          this.paginatorRightTemplate = item.template;\n          break;\n        case 'paginatordropdownitem':\n          this.paginatorDropdownItemTemplate = item.template;\n          break;\n        case 'frozenheader':\n          this.frozenHeaderTemplate = item.template;\n          break;\n        case 'frozenbody':\n          this.frozenBodyTemplate = item.template;\n          break;\n        case 'frozenfooter':\n          this.frozenFooterTemplate = item.template;\n          break;\n        case 'frozencolgroup':\n          this.frozenColGroupTemplate = item.template;\n          break;\n        case 'loadingicon':\n          this.loadingIconTemplate = item.template;\n          break;\n        case 'reorderindicatorupicon':\n          this.reorderIndicatorUpIconTemplate = item.template;\n          break;\n        case 'reorderindicatordownicon':\n          this.reorderIndicatorDownIconTemplate = item.template;\n          break;\n        case 'sorticon':\n          this.sortIconTemplate = item.template;\n          break;\n        case 'checkboxicon':\n          this.checkboxIconTemplate = item.template;\n          break;\n        case 'headercheckboxicon':\n          this.headerCheckboxIconTemplate = item.template;\n          break;\n        case 'togglericon':\n          this.togglerIconTemplate = item.template;\n          break;\n        case 'paginatorfirstpagelinkicon':\n          this.paginatorFirstPageLinkIconTemplate = item.template;\n          break;\n        case 'paginatorlastpagelinkicon':\n          this.paginatorLastPageLinkIconTemplate = item.template;\n          break;\n        case 'paginatorpreviouspagelinkicon':\n          this.paginatorPreviousPageLinkIconTemplate = item.template;\n          break;\n        case 'paginatornextpagelinkicon':\n          this.paginatorNextPageLinkIconTemplate = item.template;\n          break;\n      }\n    });\n  }\n  constructor(document, renderer, el, cd, zone, tableService, filterService) {\n    this.document = document;\n    this.renderer = renderer;\n    this.el = el;\n    this.cd = cd;\n    this.zone = zone;\n    this.tableService = tableService;\n    this.filterService = filterService;\n  }\n  ngOnChanges(simpleChange) {\n    if (simpleChange.value) {\n      this._value = simpleChange.value.currentValue;\n      if (!this.lazy) {\n        this.totalRecords = this._value ? this._value.length : 0;\n        if (this.sortMode == 'single' && this.sortField) this.sortSingle();else if (this.sortMode == 'multiple' && this.multiSortMeta) this.sortMultiple();else if (this.hasFilter())\n          //sort already filters\n          this._filter();\n      }\n      this.updateSerializedValue();\n      this.tableService.onUIUpdate(this.value);\n    }\n    if (simpleChange.sortField) {\n      this._sortField = simpleChange.sortField.currentValue;\n      //avoid triggering lazy load prior to lazy initialization at onInit\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n    if (simpleChange.sortOrder) {\n      this._sortOrder = simpleChange.sortOrder.currentValue;\n      //avoid triggering lazy load prior to lazy initialization at onInit\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n    if (simpleChange.multiSortMeta) {\n      this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n      if (this.sortMode === 'multiple') {\n        this.sortMultiple();\n      }\n    }\n    if (simpleChange.selection) {\n      this._selection = simpleChange.selection.currentValue;\n      if (!this.preventSelectionSetterPropagation) {\n        this.updateSelectionKeys();\n        this.tableService.onSelectionChange();\n      }\n      this.preventSelectionSetterPropagation = false;\n    }\n  }\n  updateSerializedValue() {\n    this.serializedValue = [];\n    if (this.paginator) this.serializePageNodes();else this.serializeNodes(null, this.filteredNodes || this.value, 0, true);\n  }\n  serializeNodes(parent, nodes, level, visible) {\n    if (nodes && nodes.length) {\n      for (let node of nodes) {\n        node.parent = parent;\n        const rowNode = {\n          node: node,\n          parent: parent,\n          level: level,\n          visible: visible && (parent ? parent.expanded : true)\n        };\n        this.serializedValue.push(rowNode);\n        if (rowNode.visible && node.expanded) {\n          this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n        }\n      }\n    }\n  }\n  serializePageNodes() {\n    let data = this.filteredNodes || this.value;\n    this.serializedValue = [];\n    if (data && data.length) {\n      const first = this.lazy ? 0 : this.first;\n      for (let i = first; i < first + this.rows; i++) {\n        let node = data[i];\n        if (node) {\n          this.serializedValue.push({\n            node: node,\n            parent: null,\n            level: 0,\n            visible: true\n          });\n          this.serializeNodes(node, node.children, 1, true);\n        }\n      }\n    }\n  }\n  updateSelectionKeys() {\n    if (this.dataKey && this._selection) {\n      this.selectionKeys = {};\n      if (Array.isArray(this._selection)) {\n        for (let node of this._selection) {\n          this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n        }\n      } else {\n        this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n      }\n    }\n  }\n  onPageChange(event) {\n    this.first = event.first;\n    this.rows = event.rows;\n    if (this.lazy) this.onLazyLoad.emit(this.createLazyLoadMetadata());else this.serializePageNodes();\n    this.onPage.emit({\n      first: this.first,\n      rows: this.rows\n    });\n    this.tableService.onUIUpdate(this.value);\n    if (this.scrollable) {\n      this.resetScrollTop();\n    }\n  }\n  sort(event) {\n    let originalEvent = event.originalEvent;\n    if (this.sortMode === 'single') {\n      this._sortOrder = this.sortField === event.field ? this.sortOrder * -1 : this.defaultSortOrder;\n      this._sortField = event.field;\n      this.sortSingle();\n      if (this.resetPageOnSort && this.scrollable) {\n        this.resetScrollTop();\n      }\n    }\n    if (this.sortMode === 'multiple') {\n      let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n      let sortMeta = this.getSortMeta(event.field);\n      if (sortMeta) {\n        if (!metaKey) {\n          this._multiSortMeta = [{\n            field: event.field,\n            order: sortMeta.order * -1\n          }];\n          if (this.resetPageOnSort && this.scrollable) {\n            this.resetScrollTop();\n          }\n        } else {\n          sortMeta.order = sortMeta.order * -1;\n        }\n      } else {\n        if (!metaKey || !this.multiSortMeta) {\n          this._multiSortMeta = [];\n          if (this.resetPageOnSort && this.scrollable) {\n            this.resetScrollTop();\n          }\n        }\n        this.multiSortMeta.push({\n          field: event.field,\n          order: this.defaultSortOrder\n        });\n      }\n      this.sortMultiple();\n    }\n  }\n  sortSingle() {\n    if (this.sortField && this.sortOrder) {\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else if (this.value) {\n        this.sortNodes(this.value);\n        if (this.hasFilter()) {\n          this._filter();\n        }\n      }\n      let sortMeta = {\n        field: this.sortField,\n        order: this.sortOrder\n      };\n      this.onSort.emit(sortMeta);\n      this.tableService.onSort(sortMeta);\n      this.updateSerializedValue();\n    }\n  }\n  sortNodes(nodes) {\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n    if (this.customSort) {\n      this.sortFunction.emit({\n        data: nodes,\n        mode: this.sortMode,\n        field: this.sortField,\n        order: this.sortOrder\n      });\n    } else {\n      nodes.sort((node1, node2) => {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n        let result = null;\n        if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;else if (typeof value1 === 'string' && typeof value2 === 'string') result = value1.localeCompare(value2, undefined, {\n          numeric: true\n        });else result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n        return this.sortOrder * result;\n      });\n    }\n    for (let node of nodes) {\n      this.sortNodes(node.children);\n    }\n  }\n  sortMultiple() {\n    if (this.multiSortMeta) {\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else if (this.value) {\n        this.sortMultipleNodes(this.value);\n        if (this.hasFilter()) {\n          this._filter();\n        }\n      }\n      this.onSort.emit({\n        multisortmeta: this.multiSortMeta\n      });\n      this.updateSerializedValue();\n      this.tableService.onSort(this.multiSortMeta);\n    }\n  }\n  sortMultipleNodes(nodes) {\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n    if (this.customSort) {\n      this.sortFunction.emit({\n        data: this.value,\n        mode: this.sortMode,\n        multiSortMeta: this.multiSortMeta\n      });\n    } else {\n      nodes.sort((node1, node2) => {\n        return this.multisortField(node1, node2, this.multiSortMeta, 0);\n      });\n    }\n    for (let node of nodes) {\n      this.sortMultipleNodes(node.children);\n    }\n  }\n  multisortField(node1, node2, multiSortMeta, index) {\n    if (ObjectUtils.isEmpty(this.multiSortMeta) || ObjectUtils.isEmpty(multiSortMeta[index])) {\n      return 0;\n    }\n    let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n    let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n    let result = null;\n    if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;\n    if (typeof value1 == 'string' || value1 instanceof String) {\n      if (value1.localeCompare && value1 != value2) {\n        return multiSortMeta[index].order * value1.localeCompare(value2, undefined, {\n          numeric: true\n        });\n      }\n    } else {\n      result = value1 < value2 ? -1 : 1;\n    }\n    if (value1 == value2) {\n      return multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, multiSortMeta, index + 1) : 0;\n    }\n    return multiSortMeta[index].order * result;\n  }\n  getSortMeta(field) {\n    if (this.multiSortMeta && this.multiSortMeta.length) {\n      for (let i = 0; i < this.multiSortMeta.length; i++) {\n        if (this.multiSortMeta[i].field === field) {\n          return this.multiSortMeta[i];\n        }\n      }\n    }\n    return null;\n  }\n  isSorted(field) {\n    if (this.sortMode === 'single') {\n      return this.sortField && this.sortField === field;\n    } else if (this.sortMode === 'multiple') {\n      let sorted = false;\n      if (this.multiSortMeta) {\n        for (let i = 0; i < this.multiSortMeta.length; i++) {\n          if (this.multiSortMeta[i].field == field) {\n            sorted = true;\n            break;\n          }\n        }\n      }\n      return sorted;\n    }\n  }\n  createLazyLoadMetadata() {\n    return {\n      first: this.first,\n      rows: this.rows,\n      sortField: this.sortField,\n      sortOrder: this.sortOrder,\n      filters: this.filters,\n      globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n      multiSortMeta: this.multiSortMeta,\n      forceUpdate: () => this.cd.detectChanges()\n    };\n  }\n  onLazyItemLoad(event) {\n    this.onLazyLoad.emit({\n      ...this.createLazyLoadMetadata(),\n      ...event,\n      rows: event.last - event.first\n    });\n  }\n  /**\n   * Resets scroll to top.\n   * @group Method\n   */\n  resetScrollTop() {\n    if (this.virtualScroll) this.scrollToVirtualIndex(0);else this.scrollTo({\n      top: 0\n    });\n  }\n  /**\n   * Scrolls to given index when using virtual scroll.\n   * @param {number} index - index of the element.\n   * @group Method\n   */\n  scrollToVirtualIndex(index) {\n    if (this.scrollableViewChild) {\n      this.scrollableViewChild.scrollToVirtualIndex(index);\n    }\n    if (this.scrollableFrozenViewChild) {\n      this.scrollableViewChild.scrollToVirtualIndex(index);\n    }\n  }\n  /**\n   * Scrolls to given index.\n   * @param {ScrollToOptions} options - Scroll options.\n   * @group Method\n   */\n  scrollTo(options) {\n    if (this.scrollableViewChild) {\n      this.scrollableViewChild.scrollTo(options);\n    }\n    if (this.scrollableFrozenViewChild) {\n      this.scrollableViewChild.scrollTo(options);\n    }\n  }\n  isEmpty() {\n    let data = this.filteredNodes || this.value;\n    return data == null || data.length == 0;\n  }\n  getBlockableElement() {\n    return this.el.nativeElement.children[0];\n  }\n  onColumnResizeBegin(event) {\n    let containerLeft = DomHandler.getOffset(this.containerViewChild?.nativeElement).left;\n    this.lastResizerHelperX = event.pageX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft;\n    event.preventDefault();\n  }\n  onColumnResize(event) {\n    let containerLeft = DomHandler.getOffset(this.containerViewChild?.nativeElement).left;\n    DomHandler.addClass(this.containerViewChild?.nativeElement, 'p-unselectable-text');\n    this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild?.nativeElement.offsetHeight + 'px';\n    this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n    this.resizeHelperViewChild.nativeElement.style.left = event.pageX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft + 'px';\n    this.resizeHelperViewChild.nativeElement.style.display = 'block';\n  }\n  onColumnResizeEnd(event, column) {\n    let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n    let columnWidth = column.offsetWidth;\n    let newColumnWidth = columnWidth + delta;\n    let minWidth = column.style.minWidth || 15;\n    if (columnWidth + delta > parseInt(minWidth)) {\n      if (this.columnResizeMode === 'fit') {\n        let nextColumn = column.nextElementSibling;\n        while (!nextColumn.offsetParent) {\n          nextColumn = nextColumn.nextElementSibling;\n        }\n        if (nextColumn) {\n          let nextColumnWidth = nextColumn.offsetWidth - delta;\n          let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n          if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n            if (this.scrollable) {\n              let scrollableView = this.findParentScrollableView(column);\n              let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport table');\n              let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n              let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n              let resizeColumnIndex = DomHandler.index(column);\n              this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n              this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n              this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n            } else {\n              column.style.width = newColumnWidth + 'px';\n              if (nextColumn) {\n                nextColumn.style.width = nextColumnWidth + 'px';\n              }\n            }\n          }\n        }\n      } else if (this.columnResizeMode === 'expand') {\n        if (this.scrollable) {\n          let scrollableView = this.findParentScrollableView(column);\n          let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport');\n          let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\n          let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\n          let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport table');\n          let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n          let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n          scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n          scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n          if (scrollableFooterTable) {\n            scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n          }\n          let resizeColumnIndex = DomHandler.index(column);\n          const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n          const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n          const isContainerInViewport = this.containerViewChild?.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n          let setWidth = (container, table, width, isContainerInViewport) => {\n            if (container && table) {\n              container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n              table.style.width = width + 'px';\n            }\n          };\n          setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n          setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n          setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n          this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n          this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n          this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n        } else {\n          this.tableViewChild.nativeElement.style.width = this.tableViewChild?.nativeElement.offsetWidth + delta + 'px';\n          column.style.width = newColumnWidth + 'px';\n          let containerWidth = this.tableViewChild?.nativeElement.style.width;\n          this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n        }\n      }\n      this.onColResize.emit({\n        element: column,\n        delta: delta\n      });\n    }\n    this.resizeHelperViewChild.nativeElement.style.display = 'none';\n    DomHandler.removeClass(this.containerViewChild?.nativeElement, 'p-unselectable-text');\n  }\n  findParentScrollableView(column) {\n    if (column) {\n      let parent = column.parentElement;\n      while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n        parent = parent.parentElement;\n      }\n      return parent;\n    } else {\n      return null;\n    }\n  }\n  resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n    if (table) {\n      let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n      if (colGroup) {\n        let col = colGroup.children[resizeColumnIndex];\n        let nextCol = col.nextElementSibling;\n        col.style.width = newColumnWidth + 'px';\n        if (nextCol && nextColumnWidth) {\n          nextCol.style.width = nextColumnWidth + 'px';\n        }\n      } else {\n        throw 'Scrollable tables require a colgroup to support resizable columns';\n      }\n    }\n  }\n  onColumnDragStart(event, columnElement) {\n    this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild?.nativeElement);\n    this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild?.nativeElement);\n    this.draggedColumn = columnElement;\n    event.dataTransfer.setData('text', 'b'); // For firefox\n  }\n\n  onColumnDragEnter(event, dropHeader) {\n    if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n      event.preventDefault();\n      let containerOffset = DomHandler.getOffset(this.containerViewChild?.nativeElement);\n      let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n      if (this.draggedColumn != dropHeader) {\n        let targetLeft = dropHeaderOffset.left - containerOffset.left;\n        let targetTop = containerOffset.top - dropHeaderOffset.top;\n        let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n        this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n        this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n        if (event.pageX > columnCenter) {\n          this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.dropPosition = 1;\n        } else {\n          this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.dropPosition = -1;\n        }\n        this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n        this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n      } else {\n        event.dataTransfer.dropEffect = 'none';\n      }\n    }\n  }\n  onColumnDragLeave(event) {\n    if (this.reorderableColumns && this.draggedColumn) {\n      event.preventDefault();\n      this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n      this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n    }\n  }\n  onColumnDrop(event, dropColumn) {\n    event.preventDefault();\n    if (this.draggedColumn) {\n      let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n      let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n      let allowDrop = dragIndex != dropIndex;\n      if (allowDrop && (dropIndex - dragIndex == 1 && this.dropPosition === -1 || dragIndex - dropIndex == 1 && this.dropPosition === 1)) {\n        allowDrop = false;\n      }\n      if (allowDrop && dropIndex < dragIndex && this.dropPosition === 1) {\n        dropIndex = dropIndex + 1;\n      }\n      if (allowDrop && dropIndex > dragIndex && this.dropPosition === -1) {\n        dropIndex = dropIndex - 1;\n      }\n      if (allowDrop) {\n        ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n        this.onColReorder.emit({\n          dragIndex: dragIndex,\n          dropIndex: dropIndex,\n          columns: this.columns\n        });\n      }\n      this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n      this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n      this.draggedColumn.draggable = false;\n      this.draggedColumn = null;\n      this.dropPosition = null;\n    }\n  }\n  handleRowClick(event) {\n    let targetNode = event.originalEvent.target.nodeName;\n    if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || DomHandler.hasClass(event.originalEvent.target, 'p-clickable')) {\n      return;\n    }\n    if (this.selectionMode) {\n      this.preventSelectionSetterPropagation = true;\n      let rowNode = event.rowNode;\n      let selected = this.isSelected(rowNode.node);\n      let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n      let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n      if (metaSelection) {\n        let keyboardEvent = event.originalEvent;\n        let metaKey = keyboardEvent.metaKey || keyboardEvent.ctrlKey;\n        if (selected && metaKey) {\n          if (this.isSingleSelectionMode()) {\n            this._selection = null;\n            this.selectionKeys = {};\n            this.selectionChange.emit(null);\n          } else {\n            let selectionIndex = this.findIndexInSelection(rowNode.node);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            if (dataKeyValue) {\n              delete this.selectionKeys[dataKeyValue];\n            }\n          }\n          this.onNodeUnselect.emit({\n            originalEvent: event.originalEvent,\n            node: rowNode.node,\n            type: 'row'\n          });\n        } else {\n          if (this.isSingleSelectionMode()) {\n            this._selection = rowNode.node;\n            this.selectionChange.emit(rowNode.node);\n            if (dataKeyValue) {\n              this.selectionKeys = {};\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          } else if (this.isMultipleSelectionMode()) {\n            if (metaKey) {\n              this._selection = this.selection || [];\n            } else {\n              this._selection = [];\n              this.selectionKeys = {};\n            }\n            this._selection = [...this.selection, rowNode.node];\n            this.selectionChange.emit(this.selection);\n            if (dataKeyValue) {\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n          this.onNodeSelect.emit({\n            originalEvent: event.originalEvent,\n            node: rowNode.node,\n            type: 'row',\n            index: event.rowIndex\n          });\n        }\n      } else {\n        if (this.selectionMode === 'single') {\n          if (selected) {\n            this._selection = null;\n            this.selectionKeys = {};\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row'\n            });\n          } else {\n            this._selection = rowNode.node;\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row',\n              index: event.rowIndex\n            });\n            if (dataKeyValue) {\n              this.selectionKeys = {};\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n        } else if (this.selectionMode === 'multiple') {\n          if (selected) {\n            let selectionIndex = this.findIndexInSelection(rowNode.node);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row'\n            });\n            if (dataKeyValue) {\n              delete this.selectionKeys[dataKeyValue];\n            }\n          } else {\n            this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row',\n              index: event.rowIndex\n            });\n            if (dataKeyValue) {\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n        }\n      }\n      this.tableService.onSelectionChange();\n    }\n    this.rowTouched = false;\n  }\n  handleRowTouchEnd(event) {\n    this.rowTouched = true;\n  }\n  handleRowRightClick(event) {\n    if (this.contextMenu) {\n      const node = event.rowNode.node;\n      if (this.contextMenuSelectionMode === 'separate') {\n        this.contextMenuSelection = node;\n        this.contextMenuSelectionChange.emit(node);\n        this.onContextMenuSelect.emit({\n          originalEvent: event.originalEvent,\n          node: node\n        });\n        this.contextMenu.show(event.originalEvent);\n        this.tableService.onContextMenu(node);\n      } else if (this.contextMenuSelectionMode === 'joint') {\n        this.preventSelectionSetterPropagation = true;\n        let selected = this.isSelected(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n        if (!selected) {\n          if (this.isSingleSelectionMode()) {\n            this.selection = node;\n            this.selectionChange.emit(node);\n          } else if (this.isMultipleSelectionMode()) {\n            this.selection = [node];\n            this.selectionChange.emit(this.selection);\n          }\n          if (dataKeyValue) {\n            this.selectionKeys[dataKeyValue] = 1;\n          }\n        }\n        this.contextMenu.show(event.originalEvent);\n        this.onContextMenuSelect.emit({\n          originalEvent: event.originalEvent,\n          node: node\n        });\n      }\n    }\n  }\n  toggleNodeWithCheckbox(event) {\n    this.selection = this.selection || [];\n    this.preventSelectionSetterPropagation = true;\n    let node = event.rowNode.node;\n    let selected = this.isSelected(node);\n    if (selected) {\n      this.propagateSelectionDown(node, false);\n      if (event.rowNode.parent) {\n        this.propagateSelectionUp(node.parent, false);\n      }\n      this.selectionChange.emit(this.selection);\n      this.onNodeUnselect.emit({\n        originalEvent: event,\n        node: node\n      });\n    } else {\n      this.propagateSelectionDown(node, true);\n      if (event.rowNode.parent) {\n        this.propagateSelectionUp(node.parent, true);\n      }\n      this.selectionChange.emit(this.selection);\n      this.onNodeSelect.emit({\n        originalEvent: event,\n        node: node\n      });\n    }\n    this.tableService.onSelectionChange();\n  }\n  toggleNodesWithCheckbox(event, check) {\n    let data = this.filteredNodes || this.value;\n    this._selection = check && data ? data.slice() : [];\n    if (check) {\n      if (data && data.length) {\n        for (let node of data) {\n          this.propagateSelectionDown(node, true);\n        }\n      }\n    } else {\n      this._selection = [];\n      this.selectionKeys = {};\n    }\n    this.preventSelectionSetterPropagation = true;\n    this.selectionChange.emit(this._selection);\n    this.tableService.onSelectionChange();\n    this.onHeaderCheckboxToggle.emit({\n      originalEvent: event,\n      checked: check\n    });\n  }\n  propagateSelectionUp(node, select) {\n    if (node.children && node.children.length) {\n      let selectedChildCount = 0;\n      let childPartialSelected = false;\n      let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n      for (let child of node.children) {\n        if (this.isSelected(child)) selectedChildCount++;else if (child.partialSelected) childPartialSelected = true;\n      }\n      if (select && selectedChildCount == node.children.length) {\n        this._selection = [...(this.selection || []), node];\n        node.partialSelected = false;\n        if (dataKeyValue) {\n          this.selectionKeys[dataKeyValue] = 1;\n        }\n      } else {\n        if (!select) {\n          let index = this.findIndexInSelection(node);\n          if (index >= 0) {\n            this._selection = this.selection.filter((val, i) => i != index);\n            if (dataKeyValue) {\n              delete this.selectionKeys[dataKeyValue];\n            }\n          }\n        }\n        if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length) node.partialSelected = true;else node.partialSelected = false;\n      }\n    }\n    let parent = node.parent;\n    if (parent) {\n      this.propagateSelectionUp(parent, select);\n    }\n  }\n  propagateSelectionDown(node, select) {\n    let index = this.findIndexInSelection(node);\n    let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n    if (select && index == -1) {\n      this._selection = [...(this.selection || []), node];\n      if (dataKeyValue) {\n        this.selectionKeys[dataKeyValue] = 1;\n      }\n    } else if (!select && index > -1) {\n      this._selection = this.selection.filter((val, i) => i != index);\n      if (dataKeyValue) {\n        delete this.selectionKeys[dataKeyValue];\n      }\n    }\n    node.partialSelected = false;\n    if (node.children && node.children.length) {\n      for (let child of node.children) {\n        this.propagateSelectionDown(child, select);\n      }\n    }\n  }\n  isSelected(node) {\n    if (node && this.selection) {\n      if (this.dataKey) {\n        return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n      } else {\n        if (Array.isArray(this.selection)) return this.findIndexInSelection(node) > -1;else return this.equals(node, this.selection);\n      }\n    }\n    return false;\n  }\n  findIndexInSelection(node) {\n    let index = -1;\n    if (this.selection && this.selection.length) {\n      for (let i = 0; i < this.selection.length; i++) {\n        if (this.equals(node, this.selection[i])) {\n          index = i;\n          break;\n        }\n      }\n    }\n    return index;\n  }\n  isSingleSelectionMode() {\n    return this.selectionMode === 'single';\n  }\n  isMultipleSelectionMode() {\n    return this.selectionMode === 'multiple';\n  }\n  equals(node1, node2) {\n    return this.compareSelectionBy === 'equals' ? node1 === node2 : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n  }\n  filter(value, field, matchMode) {\n    if (this.filterTimeout) {\n      clearTimeout(this.filterTimeout);\n    }\n    if (!this.isFilterBlank(value)) {\n      this.filters[field] = {\n        value: value,\n        matchMode: matchMode\n      };\n    } else if (this.filters[field]) {\n      delete this.filters[field];\n    }\n    this.filterTimeout = setTimeout(() => {\n      this._filter();\n      this.filterTimeout = null;\n    }, this.filterDelay);\n  }\n  filterGlobal(value, matchMode) {\n    this.filter(value, 'global', matchMode);\n  }\n  isFilterBlank(filter) {\n    if (filter !== null && filter !== undefined) {\n      if (typeof filter === 'string' && filter.trim().length == 0 || Array.isArray(filter) && filter.length == 0) return true;else return false;\n    }\n    return true;\n  }\n  _filter() {\n    if (this.lazy) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    } else {\n      if (!this.value) {\n        return;\n      }\n      if (!this.hasFilter()) {\n        this.filteredNodes = null;\n        if (this.paginator) {\n          this.totalRecords = this.value ? this.value.length : 0;\n        }\n      } else {\n        let globalFilterFieldsArray;\n        if (this.filters['global']) {\n          if (!this.columns && !this.globalFilterFields) throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');else globalFilterFieldsArray = this.globalFilterFields || this.columns;\n        }\n        this.filteredNodes = [];\n        const isStrictMode = this.filterMode === 'strict';\n        let isValueChanged = false;\n        for (let node of this.value) {\n          let copyNode = {\n            ...node\n          };\n          let localMatch = true;\n          let globalMatch = false;\n          let paramsWithoutNode;\n          for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n              let filterMeta = this.filters[prop];\n              let filterField = prop;\n              let filterValue = filterMeta.value;\n              let filterMatchMode = filterMeta.matchMode || 'startsWith';\n              let filterConstraint = this.filterService.filters[filterMatchMode];\n              paramsWithoutNode = {\n                filterField,\n                filterValue,\n                filterConstraint,\n                isStrictMode\n              };\n              if (isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode)) || !isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode))) {\n                localMatch = false;\n              }\n              if (!localMatch) {\n                break;\n              }\n            }\n          }\n          if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n            for (let j = 0; j < globalFilterFieldsArray.length; j++) {\n              let copyNodeForGlobal = {\n                ...copyNode\n              };\n              let filterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];\n              let filterValue = this.filters['global'].value;\n              let filterConstraint = this.filterService.filters[this.filters['global'].matchMode];\n              paramsWithoutNode = {\n                filterField,\n                filterValue,\n                filterConstraint,\n                isStrictMode\n              };\n              if (isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode)) || !isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode))) {\n                globalMatch = true;\n                copyNode = copyNodeForGlobal;\n              }\n            }\n          }\n          let matches = localMatch;\n          if (this.filters['global']) {\n            matches = localMatch && globalMatch;\n          }\n          if (matches) {\n            this.filteredNodes.push(copyNode);\n          }\n          isValueChanged = isValueChanged || !localMatch || globalMatch || localMatch && this.filteredNodes.length > 0 || !globalMatch && this.filteredNodes.length === 0;\n        }\n        if (!isValueChanged) {\n          this.filteredNodes = null;\n        }\n        if (this.paginator) {\n          this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n        }\n      }\n    }\n    this.first = 0;\n    const filteredValue = this.filteredNodes || this.value;\n    this.onFilter.emit({\n      filters: this.filters,\n      filteredValue: filteredValue\n    });\n    this.tableService.onUIUpdate(filteredValue);\n    this.updateSerializedValue();\n    if (this.scrollable) {\n      this.resetScrollTop();\n    }\n  }\n  findFilteredNodes(node, paramsWithoutNode) {\n    if (node) {\n      let matched = false;\n      if (node.children) {\n        let childNodes = [...node.children];\n        node.children = [];\n        for (let childNode of childNodes) {\n          let copyChildNode = {\n            ...childNode\n          };\n          if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n            matched = true;\n            node.children.push(copyChildNode);\n          }\n        }\n      }\n      if (matched) {\n        return true;\n      }\n    }\n  }\n  isFilterMatched(node, filterOptions) {\n    let {\n      filterField,\n      filterValue,\n      filterConstraint,\n      isStrictMode\n    } = filterOptions;\n    let matched = false;\n    let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n    if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n      matched = true;\n    }\n    if (!matched || isStrictMode && !this.isNodeLeaf(node)) {\n      matched = this.findFilteredNodes(node, {\n        filterField,\n        filterValue,\n        filterConstraint,\n        isStrictMode\n      }) || matched;\n    }\n    return matched;\n  }\n  isNodeLeaf(node) {\n    return node.leaf === false ? false : !(node.children && node.children.length);\n  }\n  hasFilter() {\n    let empty = true;\n    for (let prop in this.filters) {\n      if (this.filters.hasOwnProperty(prop)) {\n        empty = false;\n        break;\n      }\n    }\n    return !empty;\n  }\n  /**\n   * Clears the sort and paginator state.\n   * @group Method\n   */\n  reset() {\n    this._sortField = null;\n    this._sortOrder = 1;\n    this._multiSortMeta = null;\n    this.tableService.onSort(null);\n    this.filteredNodes = null;\n    this.filters = {};\n    this.first = 0;\n    if (this.lazy) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    } else {\n      this.totalRecords = this._value ? this._value.length : 0;\n    }\n  }\n  updateEditingCell(cell, data, field) {\n    this.editingCell = cell;\n    this.editingCellData = data;\n    this.editingCellField = field;\n    this.bindDocumentEditListener();\n  }\n  isEditingCellValid() {\n    return this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0;\n  }\n  bindDocumentEditListener() {\n    if (!this.documentEditListener) {\n      this.documentEditListener = this.renderer.listen(this.document, 'click', event => {\n        if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n          DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n          this.editingCell = null;\n          this.onEditComplete.emit({\n            field: this.editingCellField,\n            data: this.editingCellData\n          });\n          this.editingCellField = null;\n          this.editingCellData = null;\n          this.unbindDocumentEditListener();\n        }\n        this.editingCellClick = false;\n      });\n    }\n  }\n  unbindDocumentEditListener() {\n    if (this.documentEditListener) {\n      this.documentEditListener();\n      this.documentEditListener = null;\n    }\n  }\n  ngOnDestroy() {\n    this.unbindDocumentEditListener();\n    this.editingCell = null;\n    this.editingCellField = null;\n    this.editingCellData = null;\n    this.initialized = null;\n  }\n  static ɵfac = function TreeTable_Factory(t) {\n    return new (t || TreeTable)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i1.FilterService));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TreeTable,\n    selectors: [[\"p-treeTable\"]],\n    contentQueries: function TreeTable_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function TreeTable_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n        i0.ɵɵviewQuery(_c4, 5);\n        i0.ɵɵviewQuery(_c5, 5);\n        i0.ɵɵviewQuery(_c6, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.resizeHelperViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reorderIndicatorUpViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reorderIndicatorDownViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableFrozenViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      columns: \"columns\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      tableStyle: \"tableStyle\",\n      tableStyleClass: \"tableStyleClass\",\n      autoLayout: \"autoLayout\",\n      lazy: \"lazy\",\n      lazyLoadOnInit: \"lazyLoadOnInit\",\n      paginator: \"paginator\",\n      rows: \"rows\",\n      first: \"first\",\n      pageLinks: \"pageLinks\",\n      rowsPerPageOptions: \"rowsPerPageOptions\",\n      alwaysShowPaginator: \"alwaysShowPaginator\",\n      paginatorPosition: \"paginatorPosition\",\n      paginatorDropdownAppendTo: \"paginatorDropdownAppendTo\",\n      currentPageReportTemplate: \"currentPageReportTemplate\",\n      showCurrentPageReport: \"showCurrentPageReport\",\n      showJumpToPageDropdown: \"showJumpToPageDropdown\",\n      showFirstLastIcon: \"showFirstLastIcon\",\n      showPageLinks: \"showPageLinks\",\n      defaultSortOrder: \"defaultSortOrder\",\n      sortMode: \"sortMode\",\n      resetPageOnSort: \"resetPageOnSort\",\n      customSort: \"customSort\",\n      selectionMode: \"selectionMode\",\n      contextMenuSelection: \"contextMenuSelection\",\n      contextMenuSelectionMode: \"contextMenuSelectionMode\",\n      dataKey: \"dataKey\",\n      metaKeySelection: \"metaKeySelection\",\n      compareSelectionBy: \"compareSelectionBy\",\n      rowHover: \"rowHover\",\n      loading: \"loading\",\n      loadingIcon: \"loadingIcon\",\n      showLoader: \"showLoader\",\n      scrollable: \"scrollable\",\n      scrollHeight: \"scrollHeight\",\n      virtualScroll: \"virtualScroll\",\n      virtualScrollItemSize: \"virtualScrollItemSize\",\n      virtualScrollOptions: \"virtualScrollOptions\",\n      virtualScrollDelay: \"virtualScrollDelay\",\n      frozenWidth: \"frozenWidth\",\n      frozenColumns: \"frozenColumns\",\n      resizableColumns: \"resizableColumns\",\n      columnResizeMode: \"columnResizeMode\",\n      reorderableColumns: \"reorderableColumns\",\n      contextMenu: \"contextMenu\",\n      rowTrackBy: \"rowTrackBy\",\n      filters: \"filters\",\n      globalFilterFields: \"globalFilterFields\",\n      filterDelay: \"filterDelay\",\n      filterMode: \"filterMode\",\n      filterLocale: \"filterLocale\",\n      totalRecords: \"totalRecords\",\n      sortField: \"sortField\",\n      sortOrder: \"sortOrder\",\n      multiSortMeta: \"multiSortMeta\",\n      selection: \"selection\",\n      value: \"value\",\n      virtualRowHeight: \"virtualRowHeight\"\n    },\n    outputs: {\n      selectionChange: \"selectionChange\",\n      contextMenuSelectionChange: \"contextMenuSelectionChange\",\n      onFilter: \"onFilter\",\n      onNodeExpand: \"onNodeExpand\",\n      onNodeCollapse: \"onNodeCollapse\",\n      onPage: \"onPage\",\n      onSort: \"onSort\",\n      onLazyLoad: \"onLazyLoad\",\n      sortFunction: \"sortFunction\",\n      onColResize: \"onColResize\",\n      onColReorder: \"onColReorder\",\n      onNodeSelect: \"onNodeSelect\",\n      onNodeUnselect: \"onNodeUnselect\",\n      onContextMenuSelect: \"onContextMenuSelect\",\n      onHeaderCheckboxToggle: \"onHeaderCheckboxToggle\",\n      onEditInit: \"onEditInit\",\n      onEditComplete: \"onEditComplete\",\n      onEditCancel: \"onEditCancel\"\n    },\n    features: [i0.ɵɵProvidersFeature([TreeTableService]), i0.ɵɵNgOnChangesFeature],\n    decls: 12,\n    vars: 20,\n    consts: [[\"data-scrollselectors\", \".p-treetable-scrollable-body\", 3, \"ngStyle\", \"ngClass\"], [\"container\", \"\"], [\"class\", \"p-treetable-loading\", 4, \"ngIf\"], [\"class\", \"p-treetable-header\", 4, \"ngIf\"], [\"styleClass\", \"p-paginator-top\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\", 4, \"ngIf\"], [\"class\", \"p-treetable-wrapper\", 4, \"ngIf\"], [\"class\", \"p-treetable-scrollable-wrapper\", 4, \"ngIf\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\", 4, \"ngIf\"], [\"class\", \"p-treetable-footer\", 4, \"ngIf\"], [\"class\", \"p-column-resizer-helper\", \"style\", \"display:none\", 4, \"ngIf\"], [\"class\", \"p-treetable-reorder-indicator-up\", \"style\", \"display: none;\", 4, \"ngIf\"], [\"class\", \"p-treetable-reorder-indicator-down\", \"style\", \"display: none;\", 4, \"ngIf\"], [1, \"p-treetable-loading\"], [1, \"p-treetable-loading-overlay\", \"p-component-overlay\"], [3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"spin\", \"styleClass\", 4, \"ngIf\"], [\"class\", \"p-treetable-loading-icon\", 4, \"ngIf\"], [3, \"spin\", \"styleClass\"], [1, \"p-treetable-loading-icon\"], [4, \"ngTemplateOutlet\"], [1, \"p-treetable-header\"], [\"styleClass\", \"p-paginator-top\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\"], [\"pTemplate\", \"firstpagelinkicon\"], [\"pTemplate\", \"previouspagelinkicon\"], [\"pTemplate\", \"lastpagelinkicon\"], [\"pTemplate\", \"nextpagelinkicon\"], [1, \"p-treetable-wrapper\"], [3, \"ngClass\", \"ngStyle\"], [\"table\", \"\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-treetable-thead\"], [1, \"p-treetable-tbody\", 3, \"pTreeTableBody\", \"pTreeTableBodyTemplate\"], [1, \"p-treetable-tfoot\"], [1, \"p-treetable-scrollable-wrapper\"], [\"class\", \"p-treetable-scrollable-view p-treetable-frozen-view\", 3, \"ttScrollableView\", \"frozen\", \"ngStyle\", \"scrollHeight\", 4, \"ngIf\"], [1, \"p-treetable-scrollable-view\", 3, \"ttScrollableView\", \"frozen\", \"scrollHeight\", \"ngStyle\"], [\"scrollableView\", \"\"], [1, \"p-treetable-scrollable-view\", \"p-treetable-frozen-view\", 3, \"ttScrollableView\", \"frozen\", \"ngStyle\", \"scrollHeight\"], [\"scrollableFrozenView\", \"\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\"], [1, \"p-treetable-footer\"], [1, \"p-column-resizer-helper\", 2, \"display\", \"none\"], [\"resizeHelper\", \"\"], [1, \"p-treetable-reorder-indicator-up\", 2, \"display\", \"none\"], [\"reorderIndicatorUp\", \"\"], [1, \"p-treetable-reorder-indicator-down\", 2, \"display\", \"none\"], [\"reorderIndicatorDown\", \"\"]],\n    template: function TreeTable_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(2, TreeTable_div_2_Template, 4, 2, \"div\", 2);\n        i0.ɵɵtemplate(3, TreeTable_div_3_Template, 2, 1, \"div\", 3);\n        i0.ɵɵtemplate(4, TreeTable_p_paginator_4_Template, 5, 15, \"p-paginator\", 4);\n        i0.ɵɵtemplate(5, TreeTable_div_5_Template, 9, 16, \"div\", 5);\n        i0.ɵɵtemplate(6, TreeTable_div_6_Template, 4, 8, \"div\", 6);\n        i0.ɵɵtemplate(7, TreeTable_p_paginator_7_Template, 5, 15, \"p-paginator\", 7);\n        i0.ɵɵtemplate(8, TreeTable_div_8_Template, 2, 1, \"div\", 8);\n        i0.ɵɵtemplate(9, TreeTable_div_9_Template, 2, 0, \"div\", 9);\n        i0.ɵɵtemplate(10, TreeTable_span_10_Template, 4, 2, \"span\", 10);\n        i0.ɵɵtemplate(11, TreeTable_span_11_Template, 4, 2, \"span\", 11);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", i0.ɵɵpureFunction5(14, _c10, ctx.rowHover || ctx.selectionMode === \"single\" || ctx.selectionMode === \"multiple\", ctx.autoLayout, ctx.resizableColumns, ctx.resizableColumns && ctx.columnResizeMode === \"fit\", ctx.scrollable && ctx.scrollHeight === \"flex\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading && ctx.showLoader);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.captionTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"top\" || ctx.paginatorPosition == \"both\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.scrollable);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.scrollable);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"bottom\" || ctx.paginatorPosition == \"both\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.summaryTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.resizableColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n      }\n    },\n    dependencies: function () {\n      return [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle, i3.Paginator, i1.PrimeTemplate, SpinnerIcon, ArrowDownIcon, ArrowUpIcon, TTScrollableView, TTBody];\n    },\n    styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-treetable .p-scroller-loading{transform:none!important;min-height:0;position:sticky;top:0;left:0}\\n\"],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTable, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTable',\n      template: `\n        <div\n            #container\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            data-scrollselectors=\".p-treetable-scrollable-body\"\n            [ngClass]=\"{\n                'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': rowHover || selectionMode === 'single' || selectionMode === 'multiple',\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': resizableColumns && columnResizeMode === 'fit',\n                'p-treetable-flex-scrollable': scrollable && scrollHeight === 'flex'\n            }\"\n        >\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i *ngIf=\"loadingIcon\" [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                    <ng-container *ngIf=\"!loadingIcon\">\n                        <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-treetable-loading-icon'\" />\n                        <span *ngIf=\"loadingIconTemplate\" class=\"p-treetable-loading-icon\">\n                            <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\n                        </span>\n                    </ng-container>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-top\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n            >\n                <ng-template pTemplate=\"firstpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n                <div\n                    class=\"p-treetable-scrollable-view p-treetable-frozen-view\"\n                    *ngIf=\"frozenColumns || frozenBodyTemplate\"\n                    #scrollableFrozenView\n                    [ttScrollableView]=\"frozenColumns\"\n                    [frozen]=\"true\"\n                    [ngStyle]=\"{ width: frozenWidth }\"\n                    [scrollHeight]=\"scrollHeight\"\n                ></div>\n                <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{ left: frozenWidth, width: 'calc(100% - ' + frozenWidth + ')' }\"></div>\n            </div>\n\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-bottom\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n            >\n                <ng-template pTemplate=\"firstpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n            <span #reorderIndicatorUp class=\"p-treetable-reorder-indicator-up\" style=\"display: none;\" *ngIf=\"reorderableColumns\">\n                <ArrowDownIcon *ngIf=\"!reorderIndicatorUpIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorUpIconTemplate\"></ng-template>\n            </span>\n            <span #reorderIndicatorDown class=\"p-treetable-reorder-indicator-down\" style=\"display: none;\" *ngIf=\"reorderableColumns\">\n                <ArrowUpIcon *ngIf=\"!reorderIndicatorDownIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorDownIconTemplate\"></ng-template>\n            </span>\n        </div>\n    `,\n      providers: [TreeTableService],\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      },\n      styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-treetable .p-scroller-loading{transform:none!important;min-height:0;position:sticky;top:0;left:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: TreeTableService\n    }, {\n      type: i1.FilterService\n    }];\n  }, {\n    columns: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    tableStyle: [{\n      type: Input\n    }],\n    tableStyleClass: [{\n      type: Input\n    }],\n    autoLayout: [{\n      type: Input\n    }],\n    lazy: [{\n      type: Input\n    }],\n    lazyLoadOnInit: [{\n      type: Input\n    }],\n    paginator: [{\n      type: Input\n    }],\n    rows: [{\n      type: Input\n    }],\n    first: [{\n      type: Input\n    }],\n    pageLinks: [{\n      type: Input\n    }],\n    rowsPerPageOptions: [{\n      type: Input\n    }],\n    alwaysShowPaginator: [{\n      type: Input\n    }],\n    paginatorPosition: [{\n      type: Input\n    }],\n    paginatorDropdownAppendTo: [{\n      type: Input\n    }],\n    currentPageReportTemplate: [{\n      type: Input\n    }],\n    showCurrentPageReport: [{\n      type: Input\n    }],\n    showJumpToPageDropdown: [{\n      type: Input\n    }],\n    showFirstLastIcon: [{\n      type: Input\n    }],\n    showPageLinks: [{\n      type: Input\n    }],\n    defaultSortOrder: [{\n      type: Input\n    }],\n    sortMode: [{\n      type: Input\n    }],\n    resetPageOnSort: [{\n      type: Input\n    }],\n    customSort: [{\n      type: Input\n    }],\n    selectionMode: [{\n      type: Input\n    }],\n    contextMenuSelection: [{\n      type: Input\n    }],\n    contextMenuSelectionMode: [{\n      type: Input\n    }],\n    dataKey: [{\n      type: Input\n    }],\n    metaKeySelection: [{\n      type: Input\n    }],\n    compareSelectionBy: [{\n      type: Input\n    }],\n    rowHover: [{\n      type: Input\n    }],\n    loading: [{\n      type: Input\n    }],\n    loadingIcon: [{\n      type: Input\n    }],\n    showLoader: [{\n      type: Input\n    }],\n    scrollable: [{\n      type: Input\n    }],\n    scrollHeight: [{\n      type: Input\n    }],\n    virtualScroll: [{\n      type: Input\n    }],\n    virtualScrollItemSize: [{\n      type: Input\n    }],\n    virtualScrollOptions: [{\n      type: Input\n    }],\n    virtualScrollDelay: [{\n      type: Input\n    }],\n    frozenWidth: [{\n      type: Input\n    }],\n    frozenColumns: [{\n      type: Input\n    }],\n    resizableColumns: [{\n      type: Input\n    }],\n    columnResizeMode: [{\n      type: Input\n    }],\n    reorderableColumns: [{\n      type: Input\n    }],\n    contextMenu: [{\n      type: Input\n    }],\n    rowTrackBy: [{\n      type: Input\n    }],\n    filters: [{\n      type: Input\n    }],\n    globalFilterFields: [{\n      type: Input\n    }],\n    filterDelay: [{\n      type: Input\n    }],\n    filterMode: [{\n      type: Input\n    }],\n    filterLocale: [{\n      type: Input\n    }],\n    totalRecords: [{\n      type: Input\n    }],\n    sortField: [{\n      type: Input\n    }],\n    sortOrder: [{\n      type: Input\n    }],\n    multiSortMeta: [{\n      type: Input\n    }],\n    selection: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    virtualRowHeight: [{\n      type: Input\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    contextMenuSelectionChange: [{\n      type: Output\n    }],\n    onFilter: [{\n      type: Output\n    }],\n    onNodeExpand: [{\n      type: Output\n    }],\n    onNodeCollapse: [{\n      type: Output\n    }],\n    onPage: [{\n      type: Output\n    }],\n    onSort: [{\n      type: Output\n    }],\n    onLazyLoad: [{\n      type: Output\n    }],\n    sortFunction: [{\n      type: Output\n    }],\n    onColResize: [{\n      type: Output\n    }],\n    onColReorder: [{\n      type: Output\n    }],\n    onNodeSelect: [{\n      type: Output\n    }],\n    onNodeUnselect: [{\n      type: Output\n    }],\n    onContextMenuSelect: [{\n      type: Output\n    }],\n    onHeaderCheckboxToggle: [{\n      type: Output\n    }],\n    onEditInit: [{\n      type: Output\n    }],\n    onEditComplete: [{\n      type: Output\n    }],\n    onEditCancel: [{\n      type: Output\n    }],\n    containerViewChild: [{\n      type: ViewChild,\n      args: ['container']\n    }],\n    resizeHelperViewChild: [{\n      type: ViewChild,\n      args: ['resizeHelper']\n    }],\n    reorderIndicatorUpViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorUp']\n    }],\n    reorderIndicatorDownViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorDown']\n    }],\n    tableViewChild: [{\n      type: ViewChild,\n      args: ['table']\n    }],\n    scrollableViewChild: [{\n      type: ViewChild,\n      args: ['scrollableView']\n    }],\n    scrollableFrozenViewChild: [{\n      type: ViewChild,\n      args: ['scrollableFrozenView']\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\nclass TTBody {\n  tt;\n  treeTableService;\n  cd;\n  columns;\n  template;\n  frozen;\n  serializedNodes;\n  scrollerOptions;\n  subscription;\n  constructor(tt, treeTableService, cd) {\n    this.tt = tt;\n    this.treeTableService = treeTableService;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n      if (this.tt.virtualScroll) {\n        this.cd.detectChanges();\n      }\n    });\n  }\n  getScrollerOption(option, options) {\n    if (this.tt.virtualScroll) {\n      options = options || this.scrollerOptions;\n      return options ? options[option] : null;\n    }\n    return null;\n  }\n  getRowIndex(rowIndex) {\n    const getItemOptions = this.getScrollerOption('getItemOptions');\n    return getItemOptions ? getItemOptions(rowIndex).index : rowIndex;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTBody_Factory(t) {\n    return new (t || TTBody)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TTBody,\n    selectors: [[\"\", \"pTreeTableBody\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      columns: [\"pTreeTableBody\", \"columns\"],\n      template: [\"pTreeTableBodyTemplate\", \"template\"],\n      frozen: \"frozen\",\n      serializedNodes: \"serializedNodes\",\n      scrollerOptions: \"scrollerOptions\"\n    },\n    attrs: _c11,\n    decls: 2,\n    vars: 3,\n    consts: [[\"ngFor\", \"\", 3, \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TTBody_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TTBody_ng_template_0_Template, 1, 1, \"ng-template\", 0);\n        i0.ɵɵtemplate(1, TTBody_ng_container_1_Template, 2, 5, \"ng-container\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.serializedNodes || ctx.tt.serializedValue)(\"ngForTrackBy\", ctx.tt.rowTrackBy);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.isEmpty());\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i2.NgTemplateOutlet],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTBody, [{\n    type: Component,\n    args: [{\n      selector: '[pTreeTableBody]',\n      template: `\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"serializedNodes || tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n            <ng-container *ngIf=\"serializedNode.visible\">\n                <ng-container *ngTemplateOutlet=\"template; context: { $implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns }\"></ng-container>\n            </ng-container>\n        </ng-template>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: { $implicit: columns, frozen: frozen }\"></ng-container>\n        </ng-container>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    columns: [{\n      type: Input,\n      args: ['pTreeTableBody']\n    }],\n    template: [{\n      type: Input,\n      args: ['pTreeTableBodyTemplate']\n    }],\n    frozen: [{\n      type: Input\n    }],\n    serializedNodes: [{\n      type: Input\n    }],\n    scrollerOptions: [{\n      type: Input\n    }]\n  });\n})();\nclass TTScrollableView {\n  platformId;\n  renderer;\n  tt;\n  el;\n  zone;\n  columns;\n  frozen;\n  scrollHeaderViewChild;\n  scrollHeaderBoxViewChild;\n  scrollBodyViewChild;\n  scrollTableViewChild;\n  scrollLoadingTableViewChild;\n  scrollFooterViewChild;\n  scrollFooterBoxViewChild;\n  scrollableAlignerViewChild;\n  scroller;\n  headerScrollListener;\n  bodyScrollListener;\n  footerScrollListener;\n  frozenSiblingBody;\n  totalRecordsSubscription;\n  _scrollHeight;\n  preventBodyScrollPropagation;\n  get scrollHeight() {\n    return this._scrollHeight;\n  }\n  set scrollHeight(val) {\n    this._scrollHeight = val;\n    if (val != null && (val.includes('%') || val.includes('calc'))) {\n      console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.');\n    }\n  }\n  constructor(platformId, renderer, tt, el, zone) {\n    this.platformId = platformId;\n    this.renderer = renderer;\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (!this.frozen) {\n      if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n        DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n      }\n      let frozenView = this.el.nativeElement.previousElementSibling;\n      if (frozenView) {\n        if (this.tt.virtualScroll) this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-scroller-viewport');else this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n      }\n      let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n      this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n      if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n        this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n      }\n    } else {\n      if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n        this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n      }\n    }\n    this.bindEvents();\n  }\n  bindEvents() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.zone.runOutsideAngular(() => {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n          this.headerScrollListener = this.renderer.listen(this.scrollHeaderBoxViewChild?.nativeElement, 'scroll', this.onHeaderScroll.bind(this));\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n          this.footerScrollListener = this.renderer.listen(this.scrollFooterViewChild.nativeElement, 'scroll', this.onFooterScroll.bind(this));\n        }\n        if (!this.frozen) {\n          if (this.tt.virtualScroll) {\n            this.bodyScrollListener = this.renderer.listen((this.scroller?.getElementRef()).nativeElement, 'scroll', this.onBodyScroll.bind(this));\n          } else {\n            this.bodyScrollListener = this.renderer.listen(this.scrollBodyViewChild?.nativeElement, 'scroll', this.onBodyScroll.bind(this));\n          }\n        }\n      });\n    }\n  }\n  unbindEvents() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n        if (this.headerScrollListener) {\n          this.headerScrollListener();\n          this.headerScrollListener = null;\n        }\n      }\n      if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n        if (this.footerScrollListener) {\n          this.footerScrollListener();\n          this.footerScrollListener = null;\n        }\n      }\n      if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n        if (this.bodyScrollListener) {\n          this.bodyScrollListener();\n          this.bodyScrollListener = null;\n        }\n      }\n      if (this.scroller && this.scroller.getElementRef()) {\n        if (this.bodyScrollListener) {\n          this.bodyScrollListener();\n          this.bodyScrollListener = null;\n        }\n      }\n    }\n  }\n  onHeaderScroll() {\n    const scrollLeft = this.scrollHeaderViewChild?.nativeElement.scrollLeft;\n    this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n    if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n      this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n    }\n    this.preventBodyScrollPropagation = true;\n  }\n  onFooterScroll() {\n    const scrollLeft = this.scrollFooterViewChild?.nativeElement.scrollLeft;\n    this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n    if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n      this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n    }\n    this.preventBodyScrollPropagation = true;\n  }\n  onBodyScroll(event) {\n    if (this.preventBodyScrollPropagation) {\n      this.preventBodyScrollPropagation = false;\n      return;\n    }\n    if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n      this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n    }\n    if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n      this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n    }\n    if (this.frozenSiblingBody) {\n      this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n    }\n  }\n  scrollToVirtualIndex(index) {\n    if (this.scroller) {\n      this.scroller.scrollToIndex(index);\n    }\n  }\n  scrollTo(options) {\n    if (this.scroller) {\n      this.scroller.scrollTo(options);\n    } else {\n      if (this.scrollBodyViewChild?.nativeElement.scrollTo) {\n        this.scrollBodyViewChild.nativeElement.scrollTo(options);\n      } else {\n        this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n        this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n      }\n    }\n  }\n  ngOnDestroy() {\n    this.unbindEvents();\n    this.frozenSiblingBody = null;\n  }\n  static ɵfac = function TTScrollableView_Factory(t) {\n    return new (t || TTScrollableView)(i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TTScrollableView,\n    selectors: [[\"\", \"ttScrollableView\", \"\"]],\n    viewQuery: function TTScrollableView_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c14, 5);\n        i0.ɵɵviewQuery(_c15, 5);\n        i0.ɵɵviewQuery(_c16, 5);\n        i0.ɵɵviewQuery(_c17, 5);\n        i0.ɵɵviewQuery(_c18, 5);\n        i0.ɵɵviewQuery(_c19, 5);\n        i0.ɵɵviewQuery(_c20, 5);\n        i0.ɵɵviewQuery(_c21, 5);\n        i0.ɵɵviewQuery(_c22, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollHeaderViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollHeaderBoxViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollBodyViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollTableViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollLoadingTableViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollFooterViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollFooterBoxViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableAlignerViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scroller = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      columns: [\"ttScrollableView\", \"columns\"],\n      frozen: \"frozen\",\n      scrollHeight: \"scrollHeight\"\n    },\n    attrs: _c23,\n    decls: 13,\n    vars: 13,\n    consts: [[1, \"p-treetable-scrollable-header\"], [\"scrollHeader\", \"\"], [1, \"p-treetable-scrollable-header-box\"], [\"scrollHeaderBox\", \"\"], [1, \"p-treetable-scrollable-header-table\", 3, \"ngClass\", \"ngStyle\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-treetable-thead\"], [\"styleClass\", \"p-treetable-scrollable-body\", 3, \"items\", \"style\", \"scrollHeight\", \"itemSize\", \"lazy\", \"options\", \"onLazyLoad\", 4, \"ngIf\"], [4, \"ngIf\"], [\"buildInItems\", \"\"], [\"class\", \"p-treetable-scrollable-footer\", 4, \"ngIf\"], [\"styleClass\", \"p-treetable-scrollable-body\", 3, \"items\", \"scrollHeight\", \"itemSize\", \"lazy\", \"options\", \"onLazyLoad\"], [\"scroller\", \"\"], [\"pTemplate\", \"content\"], [\"pTemplate\", \"loader\"], [1, \"p-treetable-scrollable-body\", 3, \"ngStyle\"], [\"scrollBody\", \"\"], [3, \"ngClass\", \"ngStyle\"], [\"scrollTable\", \"\"], [1, \"p-treetable-tbody\", 3, \"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"serializedNodes\", \"frozen\"], [\"style\", \"background-color:transparent\", 4, \"ngIf\"], [2, \"background-color\", \"transparent\"], [\"scrollableAligner\", \"\"], [1, \"p-treetable-scrollable-footer\"], [\"scrollFooter\", \"\"], [1, \"p-treetable-scrollable-footer-box\"], [\"scrollFooterBox\", \"\"], [1, \"p-treetable-scrollable-footer-table\", 3, \"ngClass\", \"ngStyle\"], [1, \"p-treetable-tfoot\"]],\n    template: function TTScrollableView_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2, 3)(4, \"table\", 4);\n        i0.ɵɵtemplate(5, TTScrollableView_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n        i0.ɵɵelementStart(6, \"thead\", 6);\n        i0.ɵɵtemplate(7, TTScrollableView_ng_container_7_Template, 1, 0, \"ng-container\", 5);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵtemplate(8, TTScrollableView_p_scroller_8_Template, 4, 10, \"p-scroller\", 7);\n        i0.ɵɵtemplate(9, TTScrollableView_ng_container_9_Template, 4, 10, \"ng-container\", 8);\n        i0.ɵɵtemplate(10, TTScrollableView_ng_template_10_Template, 5, 15, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(12, TTScrollableView_div_12_Template, 8, 10, \"div\", 10);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", ctx.tt.tableStyleClass)(\"ngStyle\", ctx.tt.tableStyle);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.frozen ? ctx.tt.frozenColGroupTemplate || ctx.tt.colGroupTemplate : ctx.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(9, _c7, ctx.columns));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.frozen ? ctx.tt.frozenHeaderTemplate || ctx.tt.headerTemplate : ctx.tt.headerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(11, _c7, ctx.columns));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.virtualScroll);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.tt.virtualScroll);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.footerTemplate);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle, i1.PrimeTemplate, i4.Scroller, TTBody],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTScrollableView, [{\n    type: Component,\n    args: [{\n      selector: '[ttScrollableView]',\n      template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate || tt.headerTemplate : tt.headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n\n        <p-scroller\n            *ngIf=\"tt.virtualScroll\"\n            #scroller\n            [items]=\"tt.serializedValue\"\n            styleClass=\"p-treetable-scrollable-body\"\n            [style]=\"{ height: tt.scrollHeight !== 'flex' ? tt.scrollHeight : undefined }\"\n            [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n            [itemSize]=\"tt.virtualScrollItemSize || tt._virtualRowHeight\"\n            [lazy]=\"tt.lazy\"\n            (onLazyLoad)=\"tt.onLazyItemLoad($event)\"\n            [options]=\"tt.virtualScrollOptions\"\n        >\n            <ng-template pTemplate=\"content\" let-items let-scrollerOptions=\"options\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: items, options: scrollerOptions }\"></ng-container>\n            </ng-template>\n            <ng-container *ngIf=\"loaderTemplate\">\n                <ng-template pTemplate=\"loader\" let-scrollerOptions=\"options\">\n                    <ng-container *ngTemplateOutlet=\"loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </p-scroller>\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{ 'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined }\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: serializedValue, options: {} }\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-template #buildInItems let-items let-scrollerOptions=\"options\">\n            <table #scrollTable [class]=\"tt.tableStyleClass\" [ngClass]=\"scrollerOptions.contentStyleClass\" [ngStyle]=\"tt.tableStyle\" [style]=\"scrollerOptions.contentStyle\">\n                <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate || tt.bodyTemplate : tt.bodyTemplate\" [serializedNodes]=\"items\" [frozen]=\"frozen\"></tbody>\n            </table>\n            <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n        </ng-template>\n\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate || tt.footerTemplate : tt.footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    columns: [{\n      type: Input,\n      args: ['ttScrollableView']\n    }],\n    frozen: [{\n      type: Input\n    }],\n    scrollHeaderViewChild: [{\n      type: ViewChild,\n      args: ['scrollHeader']\n    }],\n    scrollHeaderBoxViewChild: [{\n      type: ViewChild,\n      args: ['scrollHeaderBox']\n    }],\n    scrollBodyViewChild: [{\n      type: ViewChild,\n      args: ['scrollBody']\n    }],\n    scrollTableViewChild: [{\n      type: ViewChild,\n      args: ['scrollTable']\n    }],\n    scrollLoadingTableViewChild: [{\n      type: ViewChild,\n      args: ['loadingTable']\n    }],\n    scrollFooterViewChild: [{\n      type: ViewChild,\n      args: ['scrollFooter']\n    }],\n    scrollFooterBoxViewChild: [{\n      type: ViewChild,\n      args: ['scrollFooterBox']\n    }],\n    scrollableAlignerViewChild: [{\n      type: ViewChild,\n      args: ['scrollableAligner']\n    }],\n    scroller: [{\n      type: ViewChild,\n      args: ['scroller']\n    }],\n    scrollHeight: [{\n      type: Input\n    }]\n  });\n})();\nclass TTSortableColumn {\n  tt;\n  field;\n  ttSortableColumnDisabled;\n  sorted;\n  subscription;\n  constructor(tt) {\n    this.tt = tt;\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n        this.updateSortState();\n      });\n    }\n  }\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.updateSortState();\n    }\n  }\n  updateSortState() {\n    this.sorted = this.tt.isSorted(this.field);\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.updateSortState();\n      this.tt.sort({\n        originalEvent: event,\n        field: this.field\n      });\n      DomHandler.clearSelection();\n    }\n  }\n  onEnterKey(event) {\n    this.onClick(event);\n  }\n  isEnabled() {\n    return this.ttSortableColumnDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTSortableColumn_Factory(t) {\n    return new (t || TTSortableColumn)(i0.ɵɵdirectiveInject(TreeTable));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTSortableColumn,\n    selectors: [[\"\", \"ttSortableColumn\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostVars: 6,\n    hostBindings: function TTSortableColumn_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TTSortableColumn_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        })(\"keydown.enter\", function TTSortableColumn_keydown_enter_HostBindingHandler($event) {\n          return ctx.onEnterKey($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? \"0\" : null)(\"role\", \"columnheader\");\n        i0.ɵɵclassProp(\"p-sortable-column\", ctx.isEnabled())(\"p-highlight\", ctx.sorted);\n      }\n    },\n    inputs: {\n      field: [\"ttSortableColumn\", \"field\"],\n      ttSortableColumnDisabled: \"ttSortableColumnDisabled\"\n    }\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSortableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSortableColumn]',\n      host: {\n        class: 'p-element',\n        '[class.p-sortable-column]': 'isEnabled()',\n        '[class.p-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }];\n  }, {\n    field: [{\n      type: Input,\n      args: ['ttSortableColumn']\n    }],\n    ttSortableColumnDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onEnterKey: [{\n      type: HostListener,\n      args: ['keydown.enter', ['$event']]\n    }]\n  });\n})();\nclass TTSortIcon {\n  tt;\n  cd;\n  field;\n  ariaLabelDesc;\n  ariaLabelAsc;\n  subscription;\n  sortOrder;\n  constructor(tt, cd) {\n    this.tt = tt;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n      this.updateSortState();\n      this.cd.markForCheck();\n    });\n  }\n  ngOnInit() {\n    this.updateSortState();\n  }\n  onClick(event) {\n    event.preventDefault();\n  }\n  updateSortState() {\n    if (this.tt.sortMode === 'single') {\n      this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n    } else if (this.tt.sortMode === 'multiple') {\n      let sortMeta = this.tt.getSortMeta(this.field);\n      this.sortOrder = sortMeta ? sortMeta.order : 0;\n    }\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTSortIcon_Factory(t) {\n    return new (t || TTSortIcon)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TTSortIcon,\n    selectors: [[\"p-treeTableSortIcon\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      field: \"field\",\n      ariaLabelDesc: \"ariaLabelDesc\",\n      ariaLabelAsc: \"ariaLabelAsc\"\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [\"class\", \"p-sortable-column-icon\", 4, \"ngIf\"], [3, \"styleClass\", 4, \"ngIf\"], [3, \"styleClass\"], [1, \"p-sortable-column-icon\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TTSortIcon_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TTSortIcon_ng_container_0_Template, 4, 3, \"ng-container\", 0);\n        i0.ɵɵtemplate(1, TTSortIcon_span_1_Template, 2, 4, \"span\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.tt.sortIconTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.sortIconTemplate);\n      }\n    },\n    dependencies: function () {\n      return [i2.NgIf, i2.NgTemplateOutlet, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon];\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSortIcon, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableSortIcon',\n      template: ` <ng-container *ngIf=\"!tt.sortIconTemplate\">\n            <SortAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 0\" />\n            <SortAmountUpAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 1\" />\n            <SortAmountDownIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === -1\" />\n        </ng-container>\n        <span *ngIf=\"tt.sortIconTemplate\" class=\"p-sortable-column-icon\">\n            <ng-template *ngTemplateOutlet=\"tt.sortIconTemplate; context: { $implicit: sortOrder }\"></ng-template>\n        </span>`,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    field: [{\n      type: Input\n    }],\n    ariaLabelDesc: [{\n      type: Input\n    }],\n    ariaLabelAsc: [{\n      type: Input\n    }]\n  });\n})();\nclass TTResizableColumn {\n  document;\n  platformId;\n  renderer;\n  tt;\n  el;\n  zone;\n  ttResizableColumnDisabled;\n  resizer;\n  resizerMouseDownListener;\n  documentMouseMoveListener;\n  documentMouseUpListener;\n  constructor(document, platformId, renderer, tt, el, zone) {\n    this.document = document;\n    this.platformId = platformId;\n    this.renderer = renderer;\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (this.isEnabled()) {\n        DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n        this.resizer = this.renderer.createElement('span');\n        this.renderer.addClass(this.resizer, 'p-column-resizer');\n        this.renderer.appendChild(this.el.nativeElement, this.resizer);\n        this.zone.runOutsideAngular(() => {\n          this.resizerMouseDownListener = this.renderer.listen(this.resizer, 'mousedown', this.onMouseDown.bind(this));\n        });\n      }\n    }\n  }\n  bindDocumentEvents() {\n    this.zone.runOutsideAngular(() => {\n      this.documentMouseMoveListener = this.renderer.listen(this.document, 'mousemove', this.onDocumentMouseMove.bind(this));\n      this.documentMouseUpListener = this.renderer.listen(this.document, 'mouseup', this.onDocumentMouseUp.bind(this));\n    });\n  }\n  unbindDocumentEvents() {\n    if (this.documentMouseMoveListener) {\n      this.documentMouseMoveListener();\n      this.documentMouseMoveListener = null;\n    }\n    if (this.documentMouseUpListener) {\n      this.documentMouseUpListener();\n      this.documentMouseUpListener = null;\n    }\n  }\n  onMouseDown(event) {\n    this.tt.onColumnResizeBegin(event);\n    this.bindDocumentEvents();\n  }\n  onDocumentMouseMove(event) {\n    this.tt.onColumnResize(event);\n  }\n  onDocumentMouseUp(event) {\n    this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n    this.unbindDocumentEvents();\n  }\n  isEnabled() {\n    return this.ttResizableColumnDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.resizerMouseDownListener) {\n      this.resizerMouseDownListener();\n      this.resizerMouseDownListener = null;\n    }\n    this.unbindDocumentEvents();\n  }\n  static ɵfac = function TTResizableColumn_Factory(t) {\n    return new (t || TTResizableColumn)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTResizableColumn,\n    selectors: [[\"\", \"ttResizableColumn\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      ttResizableColumnDisabled: \"ttResizableColumnDisabled\"\n    }\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTResizableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttResizableColumn]',\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    ttResizableColumnDisabled: [{\n      type: Input\n    }]\n  });\n})();\nclass TTReorderableColumn {\n  document;\n  platformId;\n  renderer;\n  tt;\n  el;\n  zone;\n  ttReorderableColumnDisabled;\n  dragStartListener;\n  dragOverListener;\n  dragEnterListener;\n  dragLeaveListener;\n  mouseDownListener;\n  constructor(document, platformId, renderer, tt, el, zone) {\n    this.document = document;\n    this.platformId = platformId;\n    this.renderer = renderer;\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      this.bindEvents();\n    }\n  }\n  bindEvents() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.zone.runOutsideAngular(() => {\n        this.mouseDownListener = this.renderer.listen(this.el.nativeElement, 'mousedown', this.onMouseDown.bind(this));\n        this.dragStartListener = this.renderer.listen(this.el.nativeElement, 'dragstart', this.onDragStart.bind(this));\n        this.dragOverListener = this.renderer.listen(this.el.nativeElement, 'dragover', this.onDragEnter.bind(this));\n        this.dragEnterListener = this.renderer.listen(this.el.nativeElement, 'dragenter', this.onDragEnter.bind(this));\n        this.dragLeaveListener = this.renderer.listen(this.el.nativeElement, 'dragleave', this.onDragLeave.bind(this));\n      });\n    }\n  }\n  unbindEvents() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (this.mouseDownListener) {\n        this.mouseDownListener();\n        this.mouseDownListener = null;\n      }\n      if (this.dragOverListener) {\n        this.dragOverListener();\n        this.dragOverListener = null;\n      }\n      if (this.dragEnterListener) {\n        this.dragEnterListener();\n        this.dragEnterListener = null;\n      }\n      if (this.dragLeaveListener) {\n        this.dragLeaveListener();\n        this.dragLeaveListener = null;\n      }\n    }\n  }\n  onMouseDown(event) {\n    if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer')) this.el.nativeElement.draggable = false;else this.el.nativeElement.draggable = true;\n  }\n  onDragStart(event) {\n    this.tt.onColumnDragStart(event, this.el.nativeElement);\n  }\n  onDragOver(event) {\n    event.preventDefault();\n  }\n  onDragEnter(event) {\n    this.tt.onColumnDragEnter(event, this.el.nativeElement);\n  }\n  onDragLeave(event) {\n    this.tt.onColumnDragLeave(event);\n  }\n  onDrop(event) {\n    if (this.isEnabled()) {\n      this.tt.onColumnDrop(event, this.el.nativeElement);\n    }\n  }\n  isEnabled() {\n    return this.ttReorderableColumnDisabled !== true;\n  }\n  ngOnDestroy() {\n    this.unbindEvents();\n  }\n  static ɵfac = function TTReorderableColumn_Factory(t) {\n    return new (t || TTReorderableColumn)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTReorderableColumn,\n    selectors: [[\"\", \"ttReorderableColumn\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostBindings: function TTReorderableColumn_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"drop\", function TTReorderableColumn_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        });\n      }\n    },\n    inputs: {\n      ttReorderableColumnDisabled: \"ttReorderableColumnDisabled\"\n    }\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTReorderableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttReorderableColumn]',\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    ttReorderableColumnDisabled: [{\n      type: Input\n    }],\n    onDrop: [{\n      type: HostListener,\n      args: ['drop', ['$event']]\n    }]\n  });\n})();\nclass TTSelectableRow {\n  tt;\n  tableService;\n  rowNode;\n  ttSelectableRowDisabled;\n  selected;\n  subscription;\n  constructor(tt, tableService) {\n    this.tt = tt;\n    this.tableService = tableService;\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n        this.selected = this.tt.isSelected(this.rowNode.node);\n      });\n    }\n  }\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.selected = this.tt.isSelected(this.rowNode.node);\n    }\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n  }\n  onEnterKey(event) {\n    if (event.which === 13) {\n      this.onClick(event);\n    }\n  }\n  onTouchEnd(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowTouchEnd(event);\n    }\n  }\n  isEnabled() {\n    return this.ttSelectableRowDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTSelectableRow_Factory(t) {\n    return new (t || TTSelectableRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTSelectableRow,\n    selectors: [[\"\", \"ttSelectableRow\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostVars: 2,\n    hostBindings: function TTSelectableRow_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TTSelectableRow_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        })(\"keydown\", function TTSelectableRow_keydown_HostBindingHandler($event) {\n          return ctx.onEnterKey($event);\n        })(\"touchend\", function TTSelectableRow_touchend_HostBindingHandler($event) {\n          return ctx.onTouchEnd($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"p-highlight\", ctx.selected);\n      }\n    },\n    inputs: {\n      rowNode: [\"ttSelectableRow\", \"rowNode\"],\n      ttSelectableRowDisabled: \"ttSelectableRowDisabled\"\n    }\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSelectableRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSelectableRow]',\n      host: {\n        class: 'p-element',\n        '[class.p-highlight]': 'selected'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: ['ttSelectableRow']\n    }],\n    ttSelectableRowDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onEnterKey: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }],\n    onTouchEnd: [{\n      type: HostListener,\n      args: ['touchend', ['$event']]\n    }]\n  });\n})();\nclass TTSelectableRowDblClick {\n  tt;\n  tableService;\n  rowNode;\n  ttSelectableRowDisabled;\n  selected;\n  subscription;\n  constructor(tt, tableService) {\n    this.tt = tt;\n    this.tableService = tableService;\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n        this.selected = this.tt.isSelected(this.rowNode.node);\n      });\n    }\n  }\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.selected = this.tt.isSelected(this.rowNode.node);\n    }\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n  }\n  isEnabled() {\n    return this.ttSelectableRowDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTSelectableRowDblClick_Factory(t) {\n    return new (t || TTSelectableRowDblClick)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTSelectableRowDblClick,\n    selectors: [[\"\", \"ttSelectableRowDblClick\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostVars: 2,\n    hostBindings: function TTSelectableRowDblClick_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"dblclick\", function TTSelectableRowDblClick_dblclick_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"p-highlight\", ctx.selected);\n      }\n    },\n    inputs: {\n      rowNode: [\"ttSelectableRowDblClick\", \"rowNode\"],\n      ttSelectableRowDisabled: \"ttSelectableRowDisabled\"\n    }\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSelectableRowDblClick, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSelectableRowDblClick]',\n      host: {\n        class: 'p-element',\n        '[class.p-highlight]': 'selected'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: ['ttSelectableRowDblClick']\n    }],\n    ttSelectableRowDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['dblclick', ['$event']]\n    }]\n  });\n})();\nclass TTContextMenuRow {\n  tt;\n  tableService;\n  el;\n  rowNode;\n  ttContextMenuRowDisabled;\n  selected;\n  subscription;\n  constructor(tt, tableService, el) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.el = el;\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.contextMenuSource$.subscribe(node => {\n        this.selected = this.tt.equals(this.rowNode.node, node);\n      });\n    }\n  }\n  onContextMenu(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowRightClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n      this.el.nativeElement.focus();\n      event.preventDefault();\n    }\n  }\n  isEnabled() {\n    return this.ttContextMenuRowDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTContextMenuRow_Factory(t) {\n    return new (t || TTContextMenuRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTContextMenuRow,\n    selectors: [[\"\", \"ttContextMenuRow\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostVars: 3,\n    hostBindings: function TTContextMenuRow_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"contextmenu\", function TTContextMenuRow_contextmenu_HostBindingHandler($event) {\n          return ctx.onContextMenu($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? 0 : undefined);\n        i0.ɵɵclassProp(\"p-highlight-contextmenu\", ctx.selected);\n      }\n    },\n    inputs: {\n      rowNode: [\"ttContextMenuRow\", \"rowNode\"],\n      ttContextMenuRowDisabled: \"ttContextMenuRowDisabled\"\n    }\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTContextMenuRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttContextMenuRow]',\n      host: {\n        class: 'p-element',\n        '[class.p-highlight-contextmenu]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: ['ttContextMenuRow']\n    }],\n    ttContextMenuRowDisabled: [{\n      type: Input\n    }],\n    onContextMenu: [{\n      type: HostListener,\n      args: ['contextmenu', ['$event']]\n    }]\n  });\n})();\nclass TTCheckbox {\n  tt;\n  tableService;\n  cd;\n  disabled;\n  rowNode;\n  checked;\n  focused;\n  subscription;\n  constructor(tt, tableService, cd) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n      this.checked = this.tt.isSelected(this.rowNode.node);\n      this.cd.markForCheck();\n    });\n  }\n  ngOnInit() {\n    this.checked = this.tt.isSelected(this.rowNode.node);\n  }\n  onClick(event) {\n    if (!this.disabled) {\n      this.tt.toggleNodeWithCheckbox({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n    DomHandler.clearSelection();\n  }\n  onFocus() {\n    this.focused = true;\n  }\n  onBlur() {\n    this.focused = false;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TTCheckbox_Factory(t) {\n    return new (t || TTCheckbox)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TTCheckbox,\n    selectors: [[\"p-treeTableCheckbox\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      disabled: \"disabled\",\n      rowNode: [\"value\", \"rowNode\"]\n    },\n    decls: 7,\n    vars: 13,\n    consts: [[1, \"p-checkbox\", \"p-component\", 3, \"ngClass\", \"click\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", 3, \"checked\", \"focus\", \"blur\"], [\"role\", \"checkbox\", 3, \"ngClass\"], [\"box\", \"\"], [4, \"ngIf\"], [3, \"styleClass\", 4, \"ngIf\"], [3, \"styleClass\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TTCheckbox_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"click\", function TTCheckbox_Template_div_click_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"input\", 2);\n        i0.ɵɵlistener(\"focus\", function TTCheckbox_Template_input_focus_2_listener() {\n          return ctx.onFocus();\n        })(\"blur\", function TTCheckbox_Template_input_blur_2_listener() {\n          return ctx.onBlur();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(3, \"div\", 3, 4);\n        i0.ɵɵtemplate(5, TTCheckbox_ng_container_5_Template, 3, 2, \"ng-container\", 5);\n        i0.ɵɵtemplate(6, TTCheckbox_span_6_Template, 2, 5, \"span\", 5);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c30, ctx.focused));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"checked\", ctx.checked);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(8, _c31, ctx.checked, ctx.focused, ctx.rowNode.node.partialSelected, ctx.disabled));\n        i0.ɵɵattribute(\"aria-checked\", ctx.checked);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.tt.checkboxIconTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.checkboxIconTemplate);\n      }\n    },\n    dependencies: function () {\n      return [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, CheckIcon, MinusIcon];\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableCheckbox',\n      template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-indeterminate': rowNode.node.partialSelected, 'p-disabled': disabled }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <ng-container *ngIf=\"!tt.checkboxIconTemplate\">\n                    <CheckIcon [styleClass]=\"'p-checkbox-icon'\" *ngIf=\"checked\" />\n                    <MinusIcon [styleClass]=\"'p-checkbox-icon'\" *ngIf=\"rowNode.node.partialSelected\" />\n                </ng-container>\n                <span *ngIf=\"tt.checkboxIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"tt.checkboxIconTemplate; context: { $implicit: checked, partialSelected: rowNode.node.partialSelected }\"></ng-template>\n                </span>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    disabled: [{\n      type: Input\n    }],\n    rowNode: [{\n      type: Input,\n      args: ['value']\n    }]\n  });\n})();\nclass TTHeaderCheckbox {\n  tt;\n  tableService;\n  cd;\n  boxViewChild;\n  checked;\n  focused;\n  disabled;\n  selectionChangeSubscription;\n  valueChangeSubscription;\n  constructor(tt, tableService, cd) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n      this.checked = this.updateCheckedState();\n    });\n    this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n      this.checked = this.updateCheckedState();\n    });\n  }\n  ngOnInit() {\n    this.checked = this.updateCheckedState();\n  }\n  onClick(event, checked) {\n    if (this.tt.value && this.tt.value.length > 0) {\n      this.tt.toggleNodesWithCheckbox(event, !checked);\n    }\n    DomHandler.clearSelection();\n  }\n  onFocus() {\n    this.focused = true;\n  }\n  onBlur() {\n    this.focused = false;\n  }\n  ngOnDestroy() {\n    if (this.selectionChangeSubscription) {\n      this.selectionChangeSubscription.unsubscribe();\n    }\n    if (this.valueChangeSubscription) {\n      this.valueChangeSubscription.unsubscribe();\n    }\n  }\n  updateCheckedState() {\n    this.cd.markForCheck();\n    let checked;\n    const data = this.tt.filteredNodes || this.tt.value;\n    if (data) {\n      for (let node of data) {\n        if (this.tt.isSelected(node)) {\n          checked = true;\n        } else {\n          checked = false;\n          break;\n        }\n      }\n    } else {\n      checked = false;\n    }\n    return checked;\n  }\n  static ɵfac = function TTHeaderCheckbox_Factory(t) {\n    return new (t || TTHeaderCheckbox)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TTHeaderCheckbox,\n    selectors: [[\"p-treeTableHeaderCheckbox\"]],\n    viewQuery: function TTHeaderCheckbox_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c32, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.boxViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    decls: 8,\n    vars: 13,\n    consts: [[1, \"p-checkbox\", \"p-component\", 3, \"ngClass\", \"click\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", 3, \"checked\", \"disabled\", \"focus\", \"blur\"], [\"cb\", \"\"], [\"role\", \"checkbox\", 3, \"ngClass\"], [\"box\", \"\"], [4, \"ngIf\"], [\"class\", \"p-checkbox-icon\", 4, \"ngIf\"], [3, \"styleClass\", 4, \"ngIf\"], [3, \"styleClass\"], [1, \"p-checkbox-icon\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TTHeaderCheckbox_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r7 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"click\", function TTHeaderCheckbox_Template_div_click_0_listener($event) {\n          i0.ɵɵrestoreView(_r7);\n          const _r0 = i0.ɵɵreference(3);\n          return i0.ɵɵresetView(ctx.onClick($event, _r0.checked));\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"input\", 2, 3);\n        i0.ɵɵlistener(\"focus\", function TTHeaderCheckbox_Template_input_focus_2_listener() {\n          return ctx.onFocus();\n        })(\"blur\", function TTHeaderCheckbox_Template_input_blur_2_listener() {\n          return ctx.onBlur();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 4, 5);\n        i0.ɵɵtemplate(6, TTHeaderCheckbox_ng_container_6_Template, 2, 1, \"ng-container\", 6);\n        i0.ɵɵtemplate(7, TTHeaderCheckbox_span_7_Template, 2, 4, \"span\", 7);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c30, ctx.focused));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"checked\", ctx.checked)(\"disabled\", !ctx.tt.value || ctx.tt.value.length === 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(9, _c33, ctx.checked, ctx.focused, !ctx.tt.value || ctx.tt.value.length === 0));\n        i0.ɵɵattribute(\"aria-checked\", ctx.checked);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.tt.headerCheckboxIconTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.headerCheckboxIconTemplate);\n      }\n    },\n    dependencies: function () {\n      return [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, CheckIcon];\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTHeaderCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableHeaderCheckbox',\n      template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value || tt.value.length === 0\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-disabled': !tt.value || tt.value.length === 0 }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <ng-container *ngIf=\"!tt.headerCheckboxIconTemplate\">\n                    <CheckIcon *ngIf=\"checked\" [styleClass]=\"'p-checkbox-icon'\" />\n                </ng-container>\n                <span class=\"p-checkbox-icon\" *ngIf=\"tt.headerCheckboxIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"tt.headerCheckboxIconTemplate; context: { $implicit: checked }\"></ng-template>\n                </span>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    boxViewChild: [{\n      type: ViewChild,\n      args: ['box']\n    }]\n  });\n})();\nclass TTEditableColumn {\n  tt;\n  el;\n  zone;\n  data;\n  field;\n  ttEditableColumnDisabled;\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n    }\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.editingCellClick = true;\n      if (this.tt.editingCell) {\n        if (this.tt.editingCell !== this.el.nativeElement) {\n          if (!this.tt.isEditingCellValid()) {\n            return;\n          }\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.openCell();\n        }\n      } else {\n        this.openCell();\n      }\n    }\n  }\n  openCell() {\n    this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n    DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n    this.tt.onEditInit.emit({\n      field: this.field,\n      data: this.data\n    });\n    this.tt.editingCellClick = true;\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n        if (focusable) {\n          focusable.focus();\n        }\n      }, 50);\n    });\n  }\n  closeEditingCell() {\n    DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n    this.tt.editingCell = null;\n    this.tt.unbindDocumentEditListener();\n  }\n  onKeyDown(event) {\n    if (this.isEnabled()) {\n      //enter\n      if (event.keyCode == 13) {\n        if (this.tt.isEditingCellValid()) {\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.closeEditingCell();\n          this.tt.onEditComplete.emit({\n            field: this.field,\n            data: this.data\n          });\n        }\n        event.preventDefault();\n      }\n      //escape\n      else if (event.keyCode == 27) {\n        if (this.tt.isEditingCellValid()) {\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.closeEditingCell();\n          this.tt.onEditCancel.emit({\n            field: this.field,\n            data: this.data\n          });\n        }\n        event.preventDefault();\n      }\n      //tab\n      else if (event.keyCode == 9) {\n        this.tt.onEditComplete.emit({\n          field: this.field,\n          data: this.data\n        });\n        if (event.shiftKey) this.moveToPreviousCell(event);else this.moveToNextCell(event);\n      }\n    }\n  }\n  findCell(element) {\n    if (element) {\n      let cell = element;\n      while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n        cell = cell.parentElement;\n      }\n      return cell;\n    } else {\n      return null;\n    }\n  }\n  moveToPreviousCell(event) {\n    let currentCell = this.findCell(event.target);\n    let row = currentCell.parentElement;\n    let targetCell = this.findPreviousEditableColumn(currentCell);\n    if (targetCell) {\n      DomHandler.invokeElementMethod(targetCell, 'click');\n      event.preventDefault();\n    }\n  }\n  moveToNextCell(event) {\n    let currentCell = this.findCell(event.target);\n    let row = currentCell.parentElement;\n    let targetCell = this.findNextEditableColumn(currentCell);\n    if (targetCell) {\n      DomHandler.invokeElementMethod(targetCell, 'click');\n      event.preventDefault();\n    }\n  }\n  findPreviousEditableColumn(cell) {\n    let prevCell = cell.previousElementSibling;\n    if (!prevCell) {\n      let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n      if (previousRow) {\n        prevCell = previousRow.lastElementChild;\n      }\n    }\n    if (prevCell) {\n      if (DomHandler.hasClass(prevCell, 'p-editable-column')) return prevCell;else return this.findPreviousEditableColumn(prevCell);\n    } else {\n      return null;\n    }\n  }\n  findNextEditableColumn(cell) {\n    let nextCell = cell.nextElementSibling;\n    if (!nextCell) {\n      let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n      if (nextRow) {\n        nextCell = nextRow.firstElementChild;\n      }\n    }\n    if (nextCell) {\n      if (DomHandler.hasClass(nextCell, 'p-editable-column')) return nextCell;else return this.findNextEditableColumn(nextCell);\n    } else {\n      return null;\n    }\n  }\n  isEnabled() {\n    return this.ttEditableColumnDisabled !== true;\n  }\n  static ɵfac = function TTEditableColumn_Factory(t) {\n    return new (t || TTEditableColumn)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTEditableColumn,\n    selectors: [[\"\", \"ttEditableColumn\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostBindings: function TTEditableColumn_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TTEditableColumn_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        })(\"keydown\", function TTEditableColumn_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n    },\n    inputs: {\n      data: [\"ttEditableColumn\", \"data\"],\n      field: [\"ttEditableColumnField\", \"field\"],\n      ttEditableColumnDisabled: \"ttEditableColumnDisabled\"\n    }\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTEditableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttEditableColumn]',\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    data: [{\n      type: Input,\n      args: ['ttEditableColumn']\n    }],\n    field: [{\n      type: Input,\n      args: ['ttEditableColumnField']\n    }],\n    ttEditableColumnDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\nclass TreeTableCellEditor {\n  tt;\n  editableColumn;\n  templates;\n  inputTemplate;\n  outputTemplate;\n  constructor(tt, editableColumn) {\n    this.tt = tt;\n    this.editableColumn = editableColumn;\n  }\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'input':\n          this.inputTemplate = item.template;\n          break;\n        case 'output':\n          this.outputTemplate = item.template;\n          break;\n      }\n    });\n  }\n  static ɵfac = function TreeTableCellEditor_Factory(t) {\n    return new (t || TreeTableCellEditor)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TTEditableColumn));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TreeTableCellEditor,\n    selectors: [[\"p-treeTableCellEditor\"]],\n    contentQueries: function TreeTableCellEditor_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\"]],\n    template: function TreeTableCellEditor_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TreeTableCellEditor_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n        i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_1_Template, 2, 1, \"ng-container\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.tt.editingCell === ctx.editableColumn.el.nativeElement);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.tt.editingCell || ctx.tt.editingCell !== ctx.editableColumn.el.nativeElement);\n      }\n    },\n    dependencies: [i2.NgIf, i2.NgTemplateOutlet],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableCellEditor, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableCellEditor',\n      template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TTEditableColumn\n    }];\n  }, {\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\nclass TTRow {\n  tt;\n  el;\n  zone;\n  rowNode;\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n  onKeyDown(event) {\n    switch (event.which) {\n      //down arrow\n      case 40:\n        let nextRow = this.el.nativeElement.nextElementSibling;\n        if (nextRow) {\n          nextRow.focus();\n        }\n        event.preventDefault();\n        break;\n      //down arrow\n      case 38:\n        let prevRow = this.el.nativeElement.previousElementSibling;\n        if (prevRow) {\n          prevRow.focus();\n        }\n        event.preventDefault();\n        break;\n      //left arrow\n      case 37:\n        if (this.rowNode.node.expanded) {\n          this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n          this.rowNode.node.expanded = false;\n          this.tt.onNodeCollapse.emit({\n            originalEvent: event,\n            node: this.rowNode.node\n          });\n          this.tt.updateSerializedValue();\n          this.tt.tableService.onUIUpdate(this.tt.value);\n          this.restoreFocus();\n        }\n        break;\n      //right arrow\n      case 39:\n        if (!this.rowNode.node.expanded) {\n          this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n          this.rowNode.node.expanded = true;\n          this.tt.onNodeExpand.emit({\n            originalEvent: event,\n            node: this.rowNode.node\n          });\n          this.tt.updateSerializedValue();\n          this.tt.tableService.onUIUpdate(this.tt.value);\n          this.restoreFocus();\n        }\n        break;\n    }\n  }\n  restoreFocus() {\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        let row = DomHandler.findSingle(this.tt.containerViewChild?.nativeElement, '.p-treetable-tbody').children[this.tt.toggleRowIndex];\n        if (row) {\n          row.focus();\n        }\n      }, 25);\n    });\n  }\n  static ɵfac = function TTRow_Factory(t) {\n    return new (t || TTRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TTRow,\n    selectors: [[\"\", \"ttRow\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    hostVars: 1,\n    hostBindings: function TTRow_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function TTRow_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", \"0\");\n      }\n    },\n    inputs: {\n      rowNode: [\"ttRow\", \"rowNode\"]\n    }\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttRow]',\n      host: {\n        class: 'p-element',\n        '[attr.tabindex]': '\"0\"'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: ['ttRow']\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\nclass TreeTableToggler {\n  tt;\n  rowNode;\n  constructor(tt) {\n    this.tt = tt;\n  }\n  onClick(event) {\n    this.rowNode.node.expanded = !this.rowNode.node.expanded;\n    if (this.rowNode.node.expanded) {\n      this.tt.onNodeExpand.emit({\n        originalEvent: event,\n        node: this.rowNode.node\n      });\n    } else {\n      this.tt.onNodeCollapse.emit({\n        originalEvent: event,\n        node: this.rowNode.node\n      });\n    }\n    this.tt.updateSerializedValue();\n    this.tt.tableService.onUIUpdate(this.tt.value);\n    event.preventDefault();\n  }\n  static ɵfac = function TreeTableToggler_Factory(t) {\n    return new (t || TreeTableToggler)(i0.ɵɵdirectiveInject(TreeTable));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TreeTableToggler,\n    selectors: [[\"p-treeTableToggler\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      rowNode: \"rowNode\"\n    },\n    decls: 3,\n    vars: 9,\n    consts: [[\"type\", \"button\", \"tabindex\", \"-1\", \"pRipple\", \"\", 1, \"p-treetable-toggler\", \"p-link\", 3, \"click\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TreeTableToggler_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function TreeTableToggler_Template_button_click_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        i0.ɵɵtemplate(1, TreeTableToggler_ng_container_1_Template, 3, 2, \"ng-container\", 1);\n        i0.ɵɵtemplate(2, TreeTableToggler_2_Template, 1, 0, null, 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"visibility\", ctx.rowNode.node.leaf === false || ctx.rowNode.node.children && ctx.rowNode.node.children.length ? \"visible\" : \"hidden\")(\"margin-left\", ctx.rowNode.level * 16 + \"px\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.tt.togglerIconTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.tt.togglerIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(7, _c7, ctx.rowNode.node.expanded));\n      }\n    },\n    dependencies: function () {\n      return [i2.NgIf, i2.NgTemplateOutlet, i5.Ripple, ChevronDownIcon, ChevronRightIcon];\n    },\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableToggler, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableToggler',\n      template: `\n        <button\n            type=\"button\"\n            class=\"p-treetable-toggler p-link\"\n            (click)=\"onClick($event)\"\n            tabindex=\"-1\"\n            pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\"\n            [style.marginLeft]=\"rowNode.level * 16 + 'px'\"\n        >\n            <ng-container *ngIf=\"!tt.togglerIconTemplate\">\n                <ChevronDownIcon *ngIf=\"rowNode.node.expanded\" />\n                <ChevronRightIcon *ngIf=\"!rowNode.node.expanded\" />\n            </ng-container>\n            <ng-template *ngTemplateOutlet=\"tt.togglerIconTemplate; context: { $implicit: rowNode.node.expanded }\"></ng-template>\n        </button>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }];\n  }, {\n    rowNode: [{\n      type: Input\n    }]\n  });\n})();\nclass TreeTableModule {\n  static ɵfac = function TreeTableModule_Factory(t) {\n    return new (t || TreeTableModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TreeTableModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule, SpinnerIcon, ArrowDownIcon, ArrowUpIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, MinusIcon, ChevronDownIcon, ChevronRightIcon, SharedModule, ScrollerModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule, SpinnerIcon, ArrowDownIcon, ArrowUpIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, MinusIcon, ChevronDownIcon, ChevronRightIcon],\n      exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollerModule],\n      declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TTBody, TTCheckbox, TTContextMenuRow, TTEditableColumn, TTHeaderCheckbox, TTReorderableColumn, TTResizableColumn, TTRow, TTScrollableView, TTSelectableRow, TTSelectableRowDblClick, TTSortIcon, TTSortableColumn, TreeTable, TreeTableCellEditor, TreeTableModule, TreeTableService, TreeTableToggler };","map":{"version":3,"names":["i2","DOCUMENT","isPlatformBrowser","CommonModule","i0","Injectable","EventEmitter","Component","ViewEncapsulation","Inject","Input","Output","ViewChild","ContentChildren","PLATFORM_ID","Directive","HostListener","ChangeDetectionStrategy","NgModule","i1","PrimeTemplate","SharedModule","DomHandler","i3","PaginatorModule","i5","RippleModule","i4","ScrollerModule","ObjectUtils","Subject","SortAmountDownIcon","ChevronRightIcon","ArrowDownIcon","ArrowUpIcon","CheckIcon","ChevronDownIcon","MinusIcon","SortAltIcon","SortAmountUpAltIcon","SpinnerIcon","_c0","_c1","_c2","_c3","_c4","_c5","_c6","TreeTable_div_2_i_2_Template","rf","ctx","ɵɵelement","ctx_r11","ɵɵnextContext","ɵɵclassMap","loadingIcon","TreeTable_div_2_ng_container_3_SpinnerIcon_1_Template","ɵɵproperty","TreeTable_div_2_ng_container_3_span_2_1_ng_template_0_Template","TreeTable_div_2_ng_container_3_span_2_1_Template","ɵɵtemplate","TreeTable_div_2_ng_container_3_span_2_Template","ɵɵelementStart","ɵɵelementEnd","ctx_r14","ɵɵadvance","loadingIconTemplate","TreeTable_div_2_ng_container_3_Template","ɵɵelementContainerStart","ɵɵelementContainerEnd","ctx_r12","TreeTable_div_2_Template","ctx_r1","TreeTable_div_3_ng_container_1_Template","ɵɵelementContainer","TreeTable_div_3_Template","ctx_r2","captionTemplate","TreeTable_p_paginator_4_ng_template_1_ng_container_0_Template","TreeTable_p_paginator_4_ng_template_1_Template","ctx_r18","paginatorFirstPageLinkIconTemplate","TreeTable_p_paginator_4_ng_template_2_ng_container_0_Template","TreeTable_p_paginator_4_ng_template_2_Template","ctx_r19","paginatorPreviousPageLinkIconTemplate","TreeTable_p_paginator_4_ng_template_3_ng_container_0_Template","TreeTable_p_paginator_4_ng_template_3_Template","ctx_r20","paginatorLastPageLinkIconTemplate","TreeTable_p_paginator_4_ng_template_4_ng_container_0_Template","TreeTable_p_paginator_4_ng_template_4_Template","ctx_r21","paginatorNextPageLinkIconTemplate","TreeTable_p_paginator_4_Template","_r27","ɵɵgetCurrentView","ɵɵlistener","TreeTable_p_paginator_4_Template_p_paginator_onPageChange_0_listener","$event","ɵɵrestoreView","ctx_r26","ɵɵresetView","onPageChange","ctx_r3","rows","first","totalRecords","pageLinks","alwaysShowPaginator","rowsPerPageOptions","paginatorLeftTemplate","paginatorRightTemplate","paginatorDropdownAppendTo","currentPageReportTemplate","showFirstLastIcon","paginatorDropdownItemTemplate","showCurrentPageReport","showJumpToPageDropdown","showPageLinks","TreeTable_div_5_ng_container_3_Template","TreeTable_div_5_ng_container_5_Template","TreeTable_div_5_ng_container_8_Template","_c7","a0","$implicit","TreeTable_div_5_Template","ctx_r4","tableStyleClass","tableStyle","colGroupTemplate","ɵɵpureFunction1","columns","headerTemplate","bodyTemplate","footerTemplate","_c8","width","TreeTable_div_6_div_1_Template","ctx_r32","frozenColumns","frozenWidth","scrollHeight","_c9","a1","left","TreeTable_div_6_Template","ctx_r5","frozenBodyTemplate","ɵɵpureFunction2","TreeTable_p_paginator_7_ng_template_1_ng_container_0_Template","TreeTable_p_paginator_7_ng_template_1_Template","ctx_r35","TreeTable_p_paginator_7_ng_template_2_ng_container_0_Template","TreeTable_p_paginator_7_ng_template_2_Template","ctx_r36","TreeTable_p_paginator_7_ng_template_3_ng_container_0_Template","TreeTable_p_paginator_7_ng_template_3_Template","ctx_r37","TreeTable_p_paginator_7_ng_template_4_ng_container_0_Template","TreeTable_p_paginator_7_ng_template_4_Template","ctx_r38","TreeTable_p_paginator_7_Template","_r44","TreeTable_p_paginator_7_Template_p_paginator_onPageChange_0_listener","ctx_r43","ctx_r6","TreeTable_div_8_ng_container_1_Template","TreeTable_div_8_Template","ctx_r7","summaryTemplate","TreeTable_div_9_Template","TreeTable_span_10_ArrowDownIcon_2_Template","TreeTable_span_10_3_ng_template_0_Template","TreeTable_span_10_3_Template","TreeTable_span_10_Template","ctx_r9","reorderIndicatorUpIconTemplate","TreeTable_span_11_ArrowUpIcon_2_Template","TreeTable_span_11_3_ng_template_0_Template","TreeTable_span_11_3_Template","TreeTable_span_11_Template","ctx_r10","reorderIndicatorDownIconTemplate","_c10","a2","a3","a4","a5","_c11","TTBody_ng_template_0_ng_container_0_ng_container_1_Template","_c12","node","rowData","TTBody_ng_template_0_ng_container_0_Template","serializedNode_r2","template","ɵɵpureFunction4","data","TTBody_ng_template_0_Template","visible","TTBody_ng_container_1_ng_container_1_Template","_c13","frozen","TTBody_ng_container_1_Template","tt","emptyMessageTemplate","_c14","_c15","_c16","_c17","_c18","_c19","_c20","_c21","_c22","_c23","TTScrollableView_ng_container_5_Template","TTScrollableView_ng_container_7_Template","TTScrollableView_p_scroller_8_ng_template_2_ng_container_0_Template","_c24","options","TTScrollableView_p_scroller_8_ng_template_2_Template","items_r12","scrollerOptions_r13","_r6","ɵɵreference","TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_ng_container_0_Template","_c25","TTScrollableView_p_scroller_8_ng_container_3_ng_template_1_Template","scrollerOptions_r16","ctx_r15","loaderTemplate","TTScrollableView_p_scroller_8_ng_container_3_Template","_c26","height","TTScrollableView_p_scroller_8_Template","_r19","TTScrollableView_p_scroller_8_Template_p_scroller_onLazyLoad_0_listener","onLazyItemLoad","ɵɵstyleMap","undefined","serializedValue","virtualScrollItemSize","_virtualRowHeight","lazy","virtualScrollOptions","TTScrollableView_ng_container_9_ng_container_3_Template","_c27","_c28","TTScrollableView_ng_container_9_Template","ɵɵpureFunction0","TTScrollableView_ng_template_10_ng_container_2_Template","TTScrollableView_ng_template_10_div_4_Template","TTScrollableView_ng_template_10_Template","items_r22","scrollerOptions_r23","contentStyle","contentStyleClass","frozenColGroupTemplate","TTScrollableView_div_12_ng_container_5_Template","TTScrollableView_div_12_ng_container_7_Template","TTScrollableView_div_12_Template","ctx_r8","frozenFooterTemplate","TTSortIcon_ng_container_0_SortAltIcon_1_Template","TTSortIcon_ng_container_0_SortAmountUpAltIcon_2_Template","TTSortIcon_ng_container_0_SortAmountDownIcon_3_Template","TTSortIcon_ng_container_0_Template","ctx_r0","sortOrder","TTSortIcon_span_1_1_ng_template_0_Template","TTSortIcon_span_1_1_Template","TTSortIcon_span_1_Template","sortIconTemplate","TTCheckbox_ng_container_5_CheckIcon_1_Template","TTCheckbox_ng_container_5_MinusIcon_2_Template","TTCheckbox_ng_container_5_Template","checked","rowNode","partialSelected","TTCheckbox_span_6_1_ng_template_0_Template","TTCheckbox_span_6_1_Template","_c29","TTCheckbox_span_6_Template","checkboxIconTemplate","_c30","_c31","_c32","TTHeaderCheckbox_ng_container_6_CheckIcon_1_Template","TTHeaderCheckbox_ng_container_6_Template","TTHeaderCheckbox_span_7_1_ng_template_0_Template","TTHeaderCheckbox_span_7_1_Template","TTHeaderCheckbox_span_7_Template","headerCheckboxIconTemplate","_c33","TreeTableCellEditor_ng_container_0_ng_container_1_Template","TreeTableCellEditor_ng_container_0_Template","inputTemplate","TreeTableCellEditor_ng_container_1_ng_container_1_Template","TreeTableCellEditor_ng_container_1_Template","outputTemplate","TreeTableToggler_ng_container_1_ChevronDownIcon_1_Template","TreeTableToggler_ng_container_1_ChevronRightIcon_2_Template","TreeTableToggler_ng_container_1_Template","expanded","TreeTableToggler_2_ng_template_0_Template","TreeTableToggler_2_Template","TreeTableService","sortSource","selectionSource","contextMenuSource","uiUpdateSource","totalRecordsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","uiUpdateSource$","totalRecordsSource$","onSort","sortMeta","next","onSelectionChange","onContextMenu","onUIUpdate","value","onTotalRecordsChange","ɵfac","TreeTableService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","TreeTable","document","renderer","el","cd","zone","tableService","filterService","style","styleClass","autoLayout","lazyLoadOnInit","paginator","paginatorPosition","defaultSortOrder","sortMode","resetPageOnSort","customSort","selectionMode","contextMenuSelection","contextMenuSelectionMode","dataKey","metaKeySelection","compareSelectionBy","rowHover","loading","showLoader","scrollable","virtualScroll","virtualScrollDelay","resizableColumns","columnResizeMode","reorderableColumns","contextMenu","rowTrackBy","index","item","filters","globalFilterFields","filterDelay","filterMode","filterLocale","_totalRecords","val","sortField","_sortField","_sortOrder","multiSortMeta","_multiSortMeta","selection","_selection","_value","virtualRowHeight","console","warn","selectionChange","contextMenuSelectionChange","onFilter","onNodeExpand","onNodeCollapse","onPage","onLazyLoad","sortFunction","onColResize","onColReorder","onNodeSelect","onNodeUnselect","onContextMenuSelect","onHeaderCheckboxToggle","onEditInit","onEditComplete","onEditCancel","containerViewChild","resizeHelperViewChild","reorderIndicatorUpViewChild","reorderIndicatorDownViewChild","tableViewChild","scrollableViewChild","scrollableFrozenViewChild","templates","filteredNodes","filterTimeout","frozenHeaderTemplate","togglerIconTemplate","lastResizerHelperX","reorderIconWidth","reorderIconHeight","draggedColumn","dropPosition","preventSelectionSetterPropagation","selectionKeys","rowTouched","editingCell","editingCellData","editingCellField","editingCellClick","documentEditListener","initialized","toggleRowIndex","ngOnInit","emit","createLazyLoadMetadata","ngAfterContentInit","forEach","getType","constructor","ngOnChanges","simpleChange","currentValue","length","sortSingle","sortMultiple","hasFilter","_filter","updateSerializedValue","updateSelectionKeys","serializePageNodes","serializeNodes","parent","nodes","level","push","children","i","Array","isArray","String","resolveFieldData","event","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","sortNodes","mode","node1","node2","value1","value2","result","localeCompare","numeric","sortMultipleNodes","multisortmeta","multisortField","isEmpty","isSorted","sorted","globalFilter","forceUpdate","detectChanges","last","scrollToVirtualIndex","scrollTo","top","getBlockableElement","nativeElement","onColumnResizeBegin","containerLeft","getOffset","pageX","scrollLeft","preventDefault","onColumnResize","addClass","offsetHeight","display","onColumnResizeEnd","column","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","scrollableBody","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","containerWidth","element","removeClass","parentElement","hasClass","colGroup","nodeName","col","nextCol","onColumnDragStart","columnElement","getHiddenElementOuterWidth","getHiddenElementOuterHeight","dataTransfer","setData","onColumnDragEnter","dropHeader","containerOffset","dropHeaderOffset","targetLeft","targetTop","columnCenter","Math","ceil","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","dragIndex","indexWithinGroup","dropIndex","allowDrop","reorderArray","draggable","handleRowClick","targetNode","target","selected","isSelected","metaSelection","dataKeyValue","keyboardEvent","isSingleSelectionMode","selectionIndex","findIndexInSelection","filter","isMultipleSelectionMode","rowIndex","handleRowTouchEnd","handleRowRightClick","show","toggleNodeWithCheckbox","propagateSelectionDown","propagateSelectionUp","toggleNodesWithCheckbox","check","slice","select","selectedChildCount","childPartialSelected","child","equals","matchMode","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","Error","isStrictMode","isValueChanged","copyNode","localMatch","globalMatch","paramsWithoutNode","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","filterConstraint","findFilteredNodes","isFilterMatched","j","copyNodeForGlobal","matches","filteredValue","matched","childNodes","childNode","copyChildNode","filterOptions","dataFieldValue","isNodeLeaf","leaf","empty","reset","updateEditingCell","cell","bindDocumentEditListener","isEditingCellValid","find","listen","unbindDocumentEditListener","ngOnDestroy","TreeTable_Factory","ɵɵdirectiveInject","Renderer2","ElementRef","ChangeDetectorRef","NgZone","FilterService","ɵcmp","ɵɵdefineComponent","selectors","contentQueries","TreeTable_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","TreeTable_Query","ɵɵviewQuery","hostAttrs","inputs","outputs","features","ɵɵProvidersFeature","ɵɵNgOnChangesFeature","decls","vars","consts","TreeTable_Template","ɵɵpureFunction5","dependencies","NgClass","NgIf","NgTemplateOutlet","NgStyle","Paginator","TTScrollableView","TTBody","styles","encapsulation","args","selector","providers","None","host","class","Document","decorators","treeTableService","serializedNodes","scrollerOptions","subscription","subscribe","getScrollerOption","option","getRowIndex","getItemOptions","unsubscribe","TTBody_Factory","attrs","TTBody_Template","NgForOf","platformId","scrollHeaderViewChild","scrollHeaderBoxViewChild","scrollBodyViewChild","scrollTableViewChild","scrollLoadingTableViewChild","scrollFooterViewChild","scrollFooterBoxViewChild","scrollableAlignerViewChild","scroller","headerScrollListener","bodyScrollListener","footerScrollListener","frozenSiblingBody","totalRecordsSubscription","_scrollHeight","preventBodyScrollPropagation","includes","log","ngAfterViewInit","frozenView","previousElementSibling","scrollBarWidth","paddingRight","calculateScrollbarHeight","bindEvents","runOutsideAngular","onHeaderScroll","bind","onFooterScroll","getElementRef","onBodyScroll","unbindEvents","marginLeft","scrollTop","scrollToIndex","TTScrollableView_Factory","TTScrollableView_Query","TTScrollableView_Template","ɵɵtemplateRefExtractor","Scroller","TTSortableColumn","ttSortableColumnDisabled","isEnabled","updateSortState","onClick","clearSelection","onEnterKey","TTSortableColumn_Factory","ɵdir","ɵɵdefineDirective","hostVars","hostBindings","TTSortableColumn_HostBindings","TTSortableColumn_click_HostBindingHandler","TTSortableColumn_keydown_enter_HostBindingHandler","ɵɵattribute","ɵɵclassProp","TTSortIcon","ariaLabelDesc","ariaLabelAsc","markForCheck","TTSortIcon_Factory","TTSortIcon_Template","changeDetection","OnPush","TTResizableColumn","ttResizableColumnDisabled","resizer","resizerMouseDownListener","documentMouseMoveListener","documentMouseUpListener","createElement","appendChild","onMouseDown","bindDocumentEvents","onDocumentMouseMove","onDocumentMouseUp","unbindDocumentEvents","TTResizableColumn_Factory","TTReorderableColumn","ttReorderableColumnDisabled","dragStartListener","dragOverListener","dragEnterListener","dragLeaveListener","mouseDownListener","onDragStart","onDragEnter","onDragLeave","onDragOver","onDrop","TTReorderableColumn_Factory","TTReorderableColumn_HostBindings","TTReorderableColumn_drop_HostBindingHandler","TTSelectableRow","ttSelectableRowDisabled","which","onTouchEnd","TTSelectableRow_Factory","TTSelectableRow_HostBindings","TTSelectableRow_click_HostBindingHandler","TTSelectableRow_keydown_HostBindingHandler","TTSelectableRow_touchend_HostBindingHandler","TTSelectableRowDblClick","TTSelectableRowDblClick_Factory","TTSelectableRowDblClick_HostBindings","TTSelectableRowDblClick_dblclick_HostBindingHandler","TTContextMenuRow","ttContextMenuRowDisabled","focus","TTContextMenuRow_Factory","TTContextMenuRow_HostBindings","TTContextMenuRow_contextmenu_HostBindingHandler","TTCheckbox","disabled","focused","onFocus","onBlur","TTCheckbox_Factory","TTCheckbox_Template","TTCheckbox_Template_div_click_0_listener","TTCheckbox_Template_input_focus_2_listener","TTCheckbox_Template_input_blur_2_listener","TTHeaderCheckbox","boxViewChild","selectionChangeSubscription","valueChangeSubscription","updateCheckedState","TTHeaderCheckbox_Factory","TTHeaderCheckbox_Query","TTHeaderCheckbox_Template","_r7","TTHeaderCheckbox_Template_div_click_0_listener","_r0","TTHeaderCheckbox_Template_input_focus_2_listener","TTHeaderCheckbox_Template_input_blur_2_listener","ɵɵpureFunction3","TTEditableColumn","ttEditableColumnDisabled","openCell","focusable","closeEditingCell","onKeyDown","keyCode","shiftKey","moveToPreviousCell","moveToNextCell","findCell","currentCell","row","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","nextRow","firstElementChild","TTEditableColumn_Factory","TTEditableColumn_HostBindings","TTEditableColumn_click_HostBindingHandler","TTEditableColumn_keydown_HostBindingHandler","TreeTableCellEditor","editableColumn","TreeTableCellEditor_Factory","TreeTableCellEditor_ContentQueries","TreeTableCellEditor_Template","TTRow","prevRow","restoreFocus","TTRow_Factory","TTRow_HostBindings","TTRow_keydown_HostBindingHandler","TreeTableToggler","TreeTableToggler_Factory","TreeTableToggler_Template","TreeTableToggler_Template_button_click_0_listener","ɵɵstyleProp","Ripple","TreeTableModule","TreeTableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["D:/systemConfig/me/sakai-ng-16.0.0/node_modules/primeng/fesm2022/primeng-treetable.mjs"],"sourcesContent":["import * as i2 from '@angular/common';\nimport { DOCUMENT, isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ViewEncapsulation, Inject, Input, Output, ViewChild, ContentChildren, PLATFORM_ID, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport * as i3 from 'primeng/paginator';\nimport { PaginatorModule } from 'primeng/paginator';\nimport * as i5 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i4 from 'primeng/scroller';\nimport { ScrollerModule } from 'primeng/scroller';\nimport { ObjectUtils } from 'primeng/utils';\nimport { Subject } from 'rxjs';\nimport { SortAmountDownIcon } from 'primeng/icons/sortamountdown';\nimport { ChevronRightIcon } from 'primeng/icons/chevronright';\nimport { ArrowDownIcon } from 'primeng/icons/arrowdown';\nimport { ArrowUpIcon } from 'primeng/icons/arrowup';\nimport { CheckIcon } from 'primeng/icons/check';\nimport { ChevronDownIcon } from 'primeng/icons/chevrondown';\nimport { MinusIcon } from 'primeng/icons/minus';\nimport { SortAltIcon } from 'primeng/icons/sortalt';\nimport { SortAmountUpAltIcon } from 'primeng/icons/sortamountupalt';\nimport { SpinnerIcon } from 'primeng/icons/spinner';\n\nclass TreeTableService {\n    sortSource = new Subject();\n    selectionSource = new Subject();\n    contextMenuSource = new Subject();\n    uiUpdateSource = new Subject();\n    totalRecordsSource = new Subject();\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n    onSort(sortMeta) {\n        this.sortSource.next(sortMeta);\n    }\n    onSelectionChange() {\n        this.selectionSource.next(null);\n    }\n    onContextMenu(node) {\n        this.contextMenuSource.next(node);\n    }\n    onUIUpdate(value) {\n        this.uiUpdateSource.next(value);\n    }\n    onTotalRecordsChange(value) {\n        this.totalRecordsSource.next(value);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TreeTableService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TreeTableService });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TreeTableService, decorators: [{\n            type: Injectable\n        }] });\n/**\n * TreeTable is used to display hierarchical data in tabular format.\n * @group Components\n */\nclass TreeTable {\n    document;\n    renderer;\n    el;\n    cd;\n    zone;\n    tableService;\n    filterService;\n    /**\n     * An array of objects to represent dynamic columns.\n     * @group Props\n     */\n    columns;\n    /**\n     * Inline style of the component.\n     * @group Props\n     */\n    style;\n    /**\n     * Style class of the component.\n     * @group Props\n     */\n    styleClass;\n    /**\n     * Inline style of the table.\n     * @group Props\n     */\n    tableStyle;\n    /**\n     * Style class of the table.\n     * @group Props\n     */\n    tableStyleClass;\n    /**\n     * Whether the cell widths scale according to their content or not.\n     * @group Props\n     */\n    autoLayout;\n    /**\n     * Defines if data is loaded and interacted with in lazy manner.\n     * @group Props\n     */\n    lazy = false;\n    /**\n     * Whether to call lazy loading on initialization.\n     * @group Props\n     */\n    lazyLoadOnInit = true;\n    /**\n     * When specified as true, enables the pagination.\n     * @group Props\n     */\n    paginator;\n    /**\n     * Number of rows to display per page.\n     * @group Props\n     */\n    rows;\n    /**\n     * Index of the first row to be displayed.\n     * @group Props\n     */\n    first = 0;\n    /**\n     * Number of page links to display in paginator.\n     * @group Props\n     */\n    pageLinks = 5;\n    /**\n     * Array of integer/object values to display inside rows per page dropdown of paginator\n     * @group Props\n     */\n    rowsPerPageOptions;\n    /**\n     * Whether to show it even there is only one page.\n     * @group Props\n     */\n    alwaysShowPaginator = true;\n    /**\n     * Position of the paginator.\n     * @group Props\n     */\n    paginatorPosition = 'bottom';\n    /**\n     * Target element to attach the paginator dropdown overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name).\n     * @group Props\n     */\n    paginatorDropdownAppendTo;\n    /**\n     * Template of the current page report element. Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}\n     * @group Props\n     */\n    currentPageReportTemplate = '{currentPage} of {totalPages}';\n    /**\n     * Whether to display current page report.\n     * @group Props\n     */\n    showCurrentPageReport;\n    /**\n     * Whether to display a dropdown to navigate to any page.\n     * @group Props\n     */\n    showJumpToPageDropdown;\n    /**\n     * When enabled, icons are displayed on paginator to go first and last page.\n     * @group Props\n     */\n    showFirstLastIcon = true;\n    /**\n     * Whether to show page links.\n     * @group Props\n     */\n    showPageLinks = true;\n    /**\n     * Sort order to use when an unsorted column gets sorted by user interaction.\n     * @group Props\n     */\n    defaultSortOrder = 1;\n    /**\n     * Defines whether sorting works on single column or on multiple columns.\n     * @group Props\n     */\n    sortMode = 'single';\n    /**\n     * When true, resets paginator to first page after sorting.\n     * @group Props\n     */\n    resetPageOnSort = true;\n    /**\n     * Whether to use the default sorting or a custom one using sortFunction.\n     * @group Props\n     */\n    customSort;\n    /**\n     * Specifies the selection mode, valid values are \"single\" and \"multiple\".\n     * @group Props\n     */\n    selectionMode;\n    /**\n     * Selected row with a context menu.\n     * @group Props\n     */\n    contextMenuSelection;\n    /**\n     * Mode of the contet menu selection.\n     * @group Props\n     */\n    contextMenuSelectionMode = 'separate';\n    /**\n     * A property to uniquely identify a record in data.\n     * @group Props\n     */\n    dataKey;\n    /**\n     * Defines whether metaKey is should be considered for the selection. On touch enabled devices, metaKeySelection is turned off automatically.\n     * @group Props\n     */\n    metaKeySelection;\n    /**\n     * Algorithm to define if a row is selected, valid values are \"equals\" that compares by reference and \"deepEquals\" that compares all fields.\n     * @group Props\n     */\n    compareSelectionBy = 'deepEquals';\n    /**\n     * Adds hover effect to rows without the need for selectionMode.\n     * @group Props\n     */\n    rowHover;\n    /**\n     * Displays a loader to indicate data load is in progress.\n     * @group Props\n     */\n    loading;\n    /**\n     * The icon to show while indicating data load is in progress.\n     * @group Props\n     */\n    loadingIcon;\n    /**\n     * Whether to show the loading mask when loading property is true.\n     * @group Props\n     */\n    showLoader = true;\n    /**\n     * When specifies, enables horizontal and/or vertical scrolling.\n     * @group Props\n     */\n    scrollable;\n    /**\n     * Height of the scroll viewport in fixed pixels or the \"flex\" keyword for a dynamic size.\n     * @group Props\n     */\n    scrollHeight;\n    /**\n     * Whether the data should be loaded on demand during scroll.\n     * @group Props\n     */\n    virtualScroll;\n    /**\n     * Height of a row to use in calculations of virtual scrolling.\n     * @group Props\n     */\n    virtualScrollItemSize;\n    /**\n     * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.\n     * @group Props\n     */\n    virtualScrollOptions;\n    /**\n     * The delay (in milliseconds) before triggering the virtual scroll. This determines the time gap between the user's scroll action and the actual rendering of the next set of items in the virtual scroll.\n     * @group Props\n     */\n    virtualScrollDelay = 150;\n    /**\n     * Width of the frozen columns container.\n     * @group Props\n     */\n    frozenWidth;\n    /**\n     * An array of objects to represent dynamic columns that are frozen.\n     * @group Props\n     */\n    frozenColumns;\n    /**\n     * When enabled, columns can be resized using drag and drop.\n     * @group Props\n     */\n    resizableColumns;\n    /**\n     * Defines whether the overall table width should change on column resize, valid values are \"fit\" and \"expand\".\n     * @group Props\n     */\n    columnResizeMode = 'fit';\n    /**\n     * When enabled, columns can be reordered using drag and drop.\n     * @group Props\n     */\n    reorderableColumns;\n    /**\n     * Local ng-template varilable of a ContextMenu.\n     * @group Props\n     */\n    contextMenu;\n    /**\n     * Function to optimize the dom operations by delegating to ngForTrackBy, default algorithm checks for object identity.\n     * @group Props\n     */\n    rowTrackBy = (index, item) => item;\n    /**\n     * An array of FilterMetadata objects to provide external filters.\n     * @group Props\n     */\n    filters = {};\n    /**\n     * An array of fields as string to use in global filtering.\n     * @group Props\n     */\n    globalFilterFields;\n    /**\n     * Delay in milliseconds before filtering the data.\n     * @group Props\n     */\n    filterDelay = 300;\n    /**\n     * Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient.\n     * @group Props\n     */\n    filterMode = 'lenient';\n    /**\n     * Locale to use in filtering. The default locale is the host environment's current locale.\n     * @group Props\n     */\n    filterLocale;\n    /**\n     * Number of total records, defaults to length of value when not defined.\n     * @group Props\n     */\n    get totalRecords() {\n        return this._totalRecords;\n    }\n    set totalRecords(val) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n    /**\n     * Name of the field to sort data by default.\n     * @group Props\n     */\n    get sortField() {\n        return this._sortField;\n    }\n    set sortField(val) {\n        this._sortField = val;\n    }\n    /**\n     * Order to sort when default sorting is enabled.\n     * @defaultValue 1\n     * @group Props\n     */\n    get sortOrder() {\n        return this._sortOrder;\n    }\n    set sortOrder(val) {\n        this._sortOrder = val;\n    }\n    /**\n     * An array of SortMeta objects to sort the data by default in multiple sort mode.\n     * @defaultValue null\n     * @group Props\n     */\n    get multiSortMeta() {\n        return this._multiSortMeta;\n    }\n    set multiSortMeta(val) {\n        this._multiSortMeta = val;\n    }\n    /**\n     * Selected row in single mode or an array of values in multiple mode.\n     * @defaultValue null\n     * @group Props\n     */\n    get selection() {\n        return this._selection;\n    }\n    set selection(val) {\n        this._selection = val;\n    }\n    /**\n     * An array of objects to display.\n     * @defaultValue null\n     * @group Props\n     */\n    get value() {\n        return this._value;\n    }\n    set value(val) {\n        this._value = val;\n    }\n    /**\n     * Indicates the height of rows to be scrolled.\n     * @defaultValue 28\n     * @group Props\n     * @deprecated use virtualScrollItemSize property instead.\n     */\n    get virtualRowHeight() {\n        return this._virtualRowHeight;\n    }\n    set virtualRowHeight(val) {\n        this._virtualRowHeight = val;\n        console.warn('The virtualRowHeight property is deprecated, use virtualScrollItemSize property instead.');\n    }\n    _virtualRowHeight = 28;\n    /**\n     * Callback to invoke on selected node change.\n     * @param {TreeTableNode} object - Node instance.\n     * @group Emits\n     */\n    selectionChange = new EventEmitter();\n    /**\n     * Callback to invoke on context menu selection change.\n     * @param {TreeTableNode} object - Node instance.\n     * @group Emits\n     */\n    contextMenuSelectionChange = new EventEmitter();\n    /**\n     * Callback to invoke when data is filtered.\n     * @param {TreeTableFilterEvent} event - Custom filter event.\n     * @group Emits\n     */\n    onFilter = new EventEmitter();\n    /**\n     * Callback to invoke when a node is expanded.\n     * @param {TreeTableNode} object - Node instance.\n     * @group Emits\n     */\n    onNodeExpand = new EventEmitter();\n    /**\n     * Callback to invoke when a node is collapsed.\n     * @param {TreeTableNodeCollapseEvent} event - Node collapse event.\n     * @group Emits\n     */\n    onNodeCollapse = new EventEmitter();\n    /**\n     * Callback to invoke when pagination occurs.\n     * @param {TreeTablePaginatorState} object - Paginator state.\n     * @group Emits\n     */\n    onPage = new EventEmitter();\n    /**\n     * Callback to invoke when a column gets sorted.\n     * @param {Object} Object - Sort data.\n     * @group Emits\n     */\n    onSort = new EventEmitter();\n    /**\n     * Callback to invoke when paging, sorting or filtering happens in lazy mode.\n     * @param {TreeTableLazyLoadEvent} event - Custom lazy load event.\n     * @group Emits\n     */\n    onLazyLoad = new EventEmitter();\n    /**\n     * An event emitter to invoke on custom sorting, refer to sorting section for details.\n     * @param {TreeTableSortEvent} event - Custom sort event.\n     * @group Emits\n     */\n    sortFunction = new EventEmitter();\n    /**\n     * Callback to invoke when a column is resized.\n     * @param {TreeTableColResizeEvent} event - Custom column resize event.\n     * @group Emits\n     */\n    onColResize = new EventEmitter();\n    /**\n     * Callback to invoke when a column is reordered.\n     * @param {TreeTableColumnReorderEvent} event - Custom column reorder.\n     * @group Emits\n     */\n    onColReorder = new EventEmitter();\n    /**\n     * Callback to invoke when a node is selected.\n     * @param {TreeTableNode} object - Node instance.\n     * @group Emits\n     */\n    onNodeSelect = new EventEmitter();\n    /**\n     * Callback to invoke when a node is unselected.\n     * @param {TreeTableNodeUnSelectEvent} event - Custom node unselect event.\n     * @group Emits\n     */\n    onNodeUnselect = new EventEmitter();\n    /**\n     * Callback to invoke when a node is selected with right click.\n     * @param {TreeTableContextMenuSelectEvent} event - Custom context menu select event.\n     * @group Emits\n     */\n    onContextMenuSelect = new EventEmitter();\n    /**\n     * Callback to invoke when state of header checkbox changes.\n     * @param {TreeTableHeaderCheckboxToggleEvent} event - Custom checkbox toggle event.\n     * @group Emits\n     */\n    onHeaderCheckboxToggle = new EventEmitter();\n    /**\n     * Callback to invoke when a cell switches to edit mode.\n     * @param {TreeTableEditEvent} event - Custom edit event.\n     * @group Emits\n     */\n    onEditInit = new EventEmitter();\n    /**\n     * Callback to invoke when cell edit is completed.\n     * @param {TreeTableEditEvent} event - Custom edit event.\n     * @group Emits\n     */\n    onEditComplete = new EventEmitter();\n    /**\n     * Callback to invoke when cell edit is cancelled with escape key.\n     * @param {TreeTableEditEvent} event - Custom edit event.\n     * @group Emits\n     */\n    onEditCancel = new EventEmitter();\n    containerViewChild;\n    resizeHelperViewChild;\n    reorderIndicatorUpViewChild;\n    reorderIndicatorDownViewChild;\n    tableViewChild;\n    scrollableViewChild;\n    scrollableFrozenViewChild;\n    templates;\n    _value = [];\n    serializedValue;\n    _totalRecords = 0;\n    _multiSortMeta;\n    _sortField;\n    _sortOrder = 1;\n    filteredNodes;\n    filterTimeout;\n    colGroupTemplate;\n    captionTemplate;\n    headerTemplate;\n    bodyTemplate;\n    footerTemplate;\n    summaryTemplate;\n    emptyMessageTemplate;\n    paginatorLeftTemplate;\n    paginatorRightTemplate;\n    paginatorDropdownItemTemplate;\n    frozenHeaderTemplate;\n    frozenBodyTemplate;\n    frozenFooterTemplate;\n    frozenColGroupTemplate;\n    loadingIconTemplate;\n    reorderIndicatorUpIconTemplate;\n    reorderIndicatorDownIconTemplate;\n    sortIconTemplate;\n    checkboxIconTemplate;\n    headerCheckboxIconTemplate;\n    togglerIconTemplate;\n    paginatorFirstPageLinkIconTemplate;\n    paginatorLastPageLinkIconTemplate;\n    paginatorPreviousPageLinkIconTemplate;\n    paginatorNextPageLinkIconTemplate;\n    lastResizerHelperX;\n    reorderIconWidth;\n    reorderIconHeight;\n    draggedColumn;\n    dropPosition;\n    preventSelectionSetterPropagation;\n    _selection;\n    selectionKeys = {};\n    rowTouched;\n    editingCell;\n    editingCellData;\n    editingCellField;\n    editingCellClick;\n    documentEditListener;\n    initialized;\n    toggleRowIndex;\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit && !this.virtualScroll) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                    break;\n                case 'header':\n                    this.headerTemplate = item.template;\n                    break;\n                case 'body':\n                    this.bodyTemplate = item.template;\n                    break;\n                case 'footer':\n                    this.footerTemplate = item.template;\n                    break;\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                    break;\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                    break;\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                    break;\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                    break;\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                    break;\n                case 'paginatordropdownitem':\n                    this.paginatorDropdownItemTemplate = item.template;\n                    break;\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                    break;\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                    break;\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                    break;\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                    break;\n                case 'loadingicon':\n                    this.loadingIconTemplate = item.template;\n                    break;\n                case 'reorderindicatorupicon':\n                    this.reorderIndicatorUpIconTemplate = item.template;\n                    break;\n                case 'reorderindicatordownicon':\n                    this.reorderIndicatorDownIconTemplate = item.template;\n                    break;\n                case 'sorticon':\n                    this.sortIconTemplate = item.template;\n                    break;\n                case 'checkboxicon':\n                    this.checkboxIconTemplate = item.template;\n                    break;\n                case 'headercheckboxicon':\n                    this.headerCheckboxIconTemplate = item.template;\n                    break;\n                case 'togglericon':\n                    this.togglerIconTemplate = item.template;\n                    break;\n                case 'paginatorfirstpagelinkicon':\n                    this.paginatorFirstPageLinkIconTemplate = item.template;\n                    break;\n                case 'paginatorlastpagelinkicon':\n                    this.paginatorLastPageLinkIconTemplate = item.template;\n                    break;\n                case 'paginatorpreviouspagelinkicon':\n                    this.paginatorPreviousPageLinkIconTemplate = item.template;\n                    break;\n                case 'paginatornextpagelinkicon':\n                    this.paginatorNextPageLinkIconTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    constructor(document, renderer, el, cd, zone, tableService, filterService) {\n        this.document = document;\n        this.renderer = renderer;\n        this.el = el;\n        this.cd = cd;\n        this.zone = zone;\n        this.tableService = tableService;\n        this.filterService = filterService;\n    }\n    ngOnChanges(simpleChange) {\n        if (simpleChange.value) {\n            this._value = simpleChange.value.currentValue;\n            if (!this.lazy) {\n                this.totalRecords = this._value ? this._value.length : 0;\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())\n                    //sort already filters\n                    this._filter();\n            }\n            this.updateSerializedValue();\n            this.tableService.onUIUpdate(this.value);\n        }\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n    updateSerializedValue() {\n        this.serializedValue = [];\n        if (this.paginator)\n            this.serializePageNodes();\n        else\n            this.serializeNodes(null, this.filteredNodes || this.value, 0, true);\n    }\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for (let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n    serializePageNodes() {\n        let data = this.filteredNodes || this.value;\n        this.serializedValue = [];\n        if (data && data.length) {\n            const first = this.lazy ? 0 : this.first;\n            for (let i = first; i < first + this.rows; i++) {\n                let node = data[i];\n                if (node) {\n                    this.serializedValue.push({\n                        node: node,\n                        parent: null,\n                        level: 0,\n                        visible: true\n                    });\n                    this.serializeNodes(node, node.children, 1, true);\n                }\n            }\n        }\n    }\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for (let node of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n            }\n        }\n    }\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n        if (this.lazy)\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        else\n            this.serializePageNodes();\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n        this.tableService.onUIUpdate(this.value);\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n    sort(event) {\n        let originalEvent = event.originalEvent;\n        if (this.sortMode === 'single') {\n            this._sortOrder = this.sortField === event.field ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n            if (this.resetPageOnSort && this.scrollable) {\n                this.resetScrollTop();\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n            this.sortMultiple();\n        }\n    }\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortNodes(this.value);\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            let sortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n            this.updateSerializedValue();\n        }\n    }\n    sortNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: nodes,\n                mode: this.sortMode,\n                field: this.sortField,\n                order: this.sortOrder\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n                let result = null;\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, { numeric: true });\n                else\n                    result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n                return this.sortOrder * result;\n            });\n        }\n        for (let node of nodes) {\n            this.sortNodes(node.children);\n        }\n    }\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortMultipleNodes(this.value);\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.updateSerializedValue();\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n    sortMultipleNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: this.value,\n                mode: this.sortMode,\n                multiSortMeta: this.multiSortMeta\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\n            });\n        }\n        for (let node of nodes) {\n            this.sortMultipleNodes(node.children);\n        }\n    }\n    multisortField(node1, node2, multiSortMeta, index) {\n        if (ObjectUtils.isEmpty(this.multiSortMeta) || ObjectUtils.isEmpty(multiSortMeta[index])) {\n            return 0;\n        }\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n        let result = null;\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && value1 != value2) {\n                return multiSortMeta[index].order * value1.localeCompare(value2, undefined, { numeric: true });\n            }\n        }\n        else {\n            result = value1 < value2 ? -1 : 1;\n        }\n        if (value1 == value2) {\n            return multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, multiSortMeta, index + 1) : 0;\n        }\n        return multiSortMeta[index].order * result;\n    }\n    getSortMeta(field) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n        return null;\n    }\n    isSorted(field) {\n        if (this.sortMode === 'single') {\n            return this.sortField && this.sortField === field;\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta) {\n                for (let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field) {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n    createLazyLoadMetadata() {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta,\n            forceUpdate: () => this.cd.detectChanges()\n        };\n    }\n    onLazyItemLoad(event) {\n        this.onLazyLoad.emit({\n            ...this.createLazyLoadMetadata(),\n            ...event,\n            rows: event.last - event.first\n        });\n    }\n    /**\n     * Resets scroll to top.\n     * @group Method\n     */\n    resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({ top: 0 });\n    }\n    /**\n     * Scrolls to given index when using virtual scroll.\n     * @param {number} index - index of the element.\n     * @group Method\n     */\n    scrollToVirtualIndex(index) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n    }\n    /**\n     * Scrolls to given index.\n     * @param {ScrollToOptions} options - Scroll options.\n     * @group Method\n     */\n    scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n    }\n    isEmpty() {\n        let data = this.filteredNodes || this.value;\n        return data == null || data.length == 0;\n    }\n    getBlockableElement() {\n        return this.el.nativeElement.children[0];\n    }\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild?.nativeElement).left;\n        this.lastResizerHelperX = event.pageX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft;\n        event.preventDefault();\n    }\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild?.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild?.nativeElement, 'p-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild?.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = event.pageX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft + 'px';\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let newColumnWidth = columnWidth + delta;\n        let minWidth = column.style.minWidth || 15;\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    let scrollableView = this.findParentScrollableView(column);\n                    let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport');\n                    let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\n                    let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-scroller-viewport table');\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    if (scrollableFooterTable) {\n                        scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n                    }\n                    let resizeColumnIndex = DomHandler.index(column);\n                    const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n                    const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n                    const isContainerInViewport = this.containerViewChild?.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n                    let setWidth = (container, table, width, isContainerInViewport) => {\n                        if (container && table) {\n                            container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n                            table.style.width = width + 'px';\n                        }\n                    };\n                    setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n                    setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild?.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    let containerWidth = this.tableViewChild?.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild?.nativeElement, 'p-unselectable-text');\n    }\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw 'Scrollable tables require a colgroup to support resizable columns';\n            }\n        }\n    }\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild?.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild?.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b'); // For firefox\n    }\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild?.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n            if (this.draggedColumn != dropHeader) {\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n                    this.dropPosition = -1;\n                }\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n            let allowDrop = dragIndex != dropIndex;\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n            if (allowDrop && dropIndex < dragIndex && this.dropPosition === 1) {\n                dropIndex = dropIndex + 1;\n            }\n            if (allowDrop && dropIndex > dragIndex && this.dropPosition === -1) {\n                dropIndex = dropIndex - 1;\n            }\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n    handleRowClick(event) {\n        let targetNode = event.originalEvent.target.nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || DomHandler.hasClass(event.originalEvent.target, 'p-clickable')) {\n            return;\n        }\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            let rowNode = event.rowNode;\n            let selected = this.isSelected(rowNode.node);\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n            if (metaSelection) {\n                let keyboardEvent = event.originalEvent;\n                let metaKey = keyboardEvent.metaKey || keyboardEvent.ctrlKey;\n                if (selected && metaKey) {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(null);\n                    }\n                    else {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(rowNode.node);\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        if (metaKey) {\n                            this._selection = this.selection || [];\n                        }\n                        else {\n                            this._selection = [];\n                            this.selectionKeys = {};\n                        }\n                        this._selection = [...this.selection, rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                }\n            }\n            else {\n                if (this.selectionMode === 'single') {\n                    if (selected) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                    }\n                    else {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n                else if (this.selectionMode === 'multiple') {\n                    if (selected) {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    else {\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n            }\n            this.tableService.onSelectionChange();\n        }\n        this.rowTouched = false;\n    }\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const node = event.rowNode.node;\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = node;\n                this.contextMenuSelectionChange.emit(node);\n                this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, node: node });\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(node);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(node);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = node;\n                        this.selectionChange.emit(node);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [node];\n                        this.selectionChange.emit(this.selection);\n                    }\n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, node: node });\n            }\n        }\n    }\n    toggleNodeWithCheckbox(event) {\n        this.selection = this.selection || [];\n        this.preventSelectionSetterPropagation = true;\n        let node = event.rowNode.node;\n        let selected = this.isSelected(node);\n        if (selected) {\n            this.propagateSelectionDown(node, false);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, false);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({ originalEvent: event, node: node });\n        }\n        else {\n            this.propagateSelectionDown(node, true);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, true);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({ originalEvent: event, node: node });\n        }\n        this.tableService.onSelectionChange();\n    }\n    toggleNodesWithCheckbox(event, check) {\n        let data = this.filteredNodes || this.value;\n        this._selection = check && data ? data.slice() : [];\n        if (check) {\n            if (data && data.length) {\n                for (let node of data) {\n                    this.propagateSelectionDown(node, true);\n                }\n            }\n        }\n        else {\n            this._selection = [];\n            this.selectionKeys = {};\n        }\n        this.preventSelectionSetterPropagation = true;\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({ originalEvent: event, checked: check });\n    }\n    propagateSelectionUp(node, select) {\n        if (node.children && node.children.length) {\n            let selectedChildCount = 0;\n            let childPartialSelected = false;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n            for (let child of node.children) {\n                if (this.isSelected(child))\n                    selectedChildCount++;\n                else if (child.partialSelected)\n                    childPartialSelected = true;\n            }\n            if (select && selectedChildCount == node.children.length) {\n                this._selection = [...(this.selection || []), node];\n                node.partialSelected = false;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this._selection = this.selection.filter((val, i) => i != index);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                }\n                if (childPartialSelected || (selectedChildCount > 0 && selectedChildCount != node.children.length))\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n        let parent = node.parent;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n    propagateSelectionDown(node, select) {\n        let index = this.findIndexInSelection(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n        if (select && index == -1) {\n            this._selection = [...(this.selection || []), node];\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        else if (!select && index > -1) {\n            this._selection = this.selection.filter((val, i) => i != index);\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        node.partialSelected = false;\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n    isSelected(node) {\n        if (node && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n            }\n            else {\n                if (Array.isArray(this.selection))\n                    return this.findIndexInSelection(node) > -1;\n                else\n                    return this.equals(node, this.selection);\n            }\n        }\n        return false;\n    }\n    findIndexInSelection(node) {\n        let index = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(node, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n    equals(node1, node2) {\n        return this.compareSelectionBy === 'equals' ? node1 === node2 : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n    }\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        }\n        else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n    }\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n    isFilterBlank(filter) {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (Array.isArray(filter) && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n    _filter() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n            if (!this.hasFilter()) {\n                this.filteredNodes = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields || this.columns;\n                }\n                this.filteredNodes = [];\n                const isStrictMode = this.filterMode === 'strict';\n                let isValueChanged = false;\n                for (let node of this.value) {\n                    let copyNode = { ...node };\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let paramsWithoutNode;\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let filterConstraint = this.filterService.filters[filterMatchMode];\n                            paramsWithoutNode = { filterField, filterValue, filterConstraint, isStrictMode };\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                                localMatch = false;\n                            }\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for (let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let copyNodeForGlobal = { ...copyNode };\n                            let filterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];\n                            let filterValue = this.filters['global'].value;\n                            let filterConstraint = this.filterService.filters[this.filters['global'].matchMode];\n                            paramsWithoutNode = { filterField, filterValue, filterConstraint, isStrictMode };\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\n                                globalMatch = true;\n                                copyNode = copyNodeForGlobal;\n                            }\n                        }\n                    }\n                    let matches = localMatch;\n                    if (this.filters['global']) {\n                        matches = localMatch && globalMatch;\n                    }\n                    if (matches) {\n                        this.filteredNodes.push(copyNode);\n                    }\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0);\n                }\n                if (!isValueChanged) {\n                    this.filteredNodes = null;\n                }\n                if (this.paginator) {\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n        this.first = 0;\n        const filteredValue = this.filteredNodes || this.value;\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: filteredValue\n        });\n        this.tableService.onUIUpdate(filteredValue);\n        this.updateSerializedValue();\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = { ...childNode };\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n            if (matched) {\n                return true;\n            }\n        }\n    }\n    isFilterMatched(node, filterOptions) {\n        let { filterField, filterValue, filterConstraint, isStrictMode } = filterOptions;\n        let matched = false;\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n        if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n            matched = true;\n        }\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, { filterField, filterValue, filterConstraint, isStrictMode }) || matched;\n        }\n        return matched;\n    }\n    isNodeLeaf(node) {\n        return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n        return !empty;\n    }\n    /**\n     * Clears the sort and paginator state.\n     * @group Method\n     */\n    reset() {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n        this.filteredNodes = null;\n        this.filters = {};\n        this.first = 0;\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = this._value ? this._value.length : 0;\n        }\n    }\n    updateEditingCell(cell, data, field) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.bindDocumentEditListener();\n    }\n    isEditingCellValid() {\n        return this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0;\n    }\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = this.renderer.listen(this.document, 'click', (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData });\n                    this.editingCellField = null;\n                    this.editingCellData = null;\n                    this.unbindDocumentEditListener();\n                }\n                this.editingCellClick = false;\n            });\n        }\n    }\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            this.documentEditListener();\n            this.documentEditListener = null;\n        }\n    }\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.editingCellField = null;\n        this.editingCellData = null;\n        this.initialized = null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TreeTable, deps: [{ token: DOCUMENT }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: TreeTableService }, { token: i1.FilterService }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TreeTable, selector: \"p-treeTable\", inputs: { columns: \"columns\", style: \"style\", styleClass: \"styleClass\", tableStyle: \"tableStyle\", tableStyleClass: \"tableStyleClass\", autoLayout: \"autoLayout\", lazy: \"lazy\", lazyLoadOnInit: \"lazyLoadOnInit\", paginator: \"paginator\", rows: \"rows\", first: \"first\", pageLinks: \"pageLinks\", rowsPerPageOptions: \"rowsPerPageOptions\", alwaysShowPaginator: \"alwaysShowPaginator\", paginatorPosition: \"paginatorPosition\", paginatorDropdownAppendTo: \"paginatorDropdownAppendTo\", currentPageReportTemplate: \"currentPageReportTemplate\", showCurrentPageReport: \"showCurrentPageReport\", showJumpToPageDropdown: \"showJumpToPageDropdown\", showFirstLastIcon: \"showFirstLastIcon\", showPageLinks: \"showPageLinks\", defaultSortOrder: \"defaultSortOrder\", sortMode: \"sortMode\", resetPageOnSort: \"resetPageOnSort\", customSort: \"customSort\", selectionMode: \"selectionMode\", contextMenuSelection: \"contextMenuSelection\", contextMenuSelectionMode: \"contextMenuSelectionMode\", dataKey: \"dataKey\", metaKeySelection: \"metaKeySelection\", compareSelectionBy: \"compareSelectionBy\", rowHover: \"rowHover\", loading: \"loading\", loadingIcon: \"loadingIcon\", showLoader: \"showLoader\", scrollable: \"scrollable\", scrollHeight: \"scrollHeight\", virtualScroll: \"virtualScroll\", virtualScrollItemSize: \"virtualScrollItemSize\", virtualScrollOptions: \"virtualScrollOptions\", virtualScrollDelay: \"virtualScrollDelay\", frozenWidth: \"frozenWidth\", frozenColumns: \"frozenColumns\", resizableColumns: \"resizableColumns\", columnResizeMode: \"columnResizeMode\", reorderableColumns: \"reorderableColumns\", contextMenu: \"contextMenu\", rowTrackBy: \"rowTrackBy\", filters: \"filters\", globalFilterFields: \"globalFilterFields\", filterDelay: \"filterDelay\", filterMode: \"filterMode\", filterLocale: \"filterLocale\", totalRecords: \"totalRecords\", sortField: \"sortField\", sortOrder: \"sortOrder\", multiSortMeta: \"multiSortMeta\", selection: \"selection\", value: \"value\", virtualRowHeight: \"virtualRowHeight\" }, outputs: { selectionChange: \"selectionChange\", contextMenuSelectionChange: \"contextMenuSelectionChange\", onFilter: \"onFilter\", onNodeExpand: \"onNodeExpand\", onNodeCollapse: \"onNodeCollapse\", onPage: \"onPage\", onSort: \"onSort\", onLazyLoad: \"onLazyLoad\", sortFunction: \"sortFunction\", onColResize: \"onColResize\", onColReorder: \"onColReorder\", onNodeSelect: \"onNodeSelect\", onNodeUnselect: \"onNodeUnselect\", onContextMenuSelect: \"onContextMenuSelect\", onHeaderCheckboxToggle: \"onHeaderCheckboxToggle\", onEditInit: \"onEditInit\", onEditComplete: \"onEditComplete\", onEditCancel: \"onEditCancel\" }, host: { classAttribute: \"p-element\" }, providers: [TreeTableService], queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], viewQueries: [{ propertyName: \"containerViewChild\", first: true, predicate: [\"container\"], descendants: true }, { propertyName: \"resizeHelperViewChild\", first: true, predicate: [\"resizeHelper\"], descendants: true }, { propertyName: \"reorderIndicatorUpViewChild\", first: true, predicate: [\"reorderIndicatorUp\"], descendants: true }, { propertyName: \"reorderIndicatorDownViewChild\", first: true, predicate: [\"reorderIndicatorDown\"], descendants: true }, { propertyName: \"tableViewChild\", first: true, predicate: [\"table\"], descendants: true }, { propertyName: \"scrollableViewChild\", first: true, predicate: [\"scrollableView\"], descendants: true }, { propertyName: \"scrollableFrozenViewChild\", first: true, predicate: [\"scrollableFrozenView\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n        <div\n            #container\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            data-scrollselectors=\".p-treetable-scrollable-body\"\n            [ngClass]=\"{\n                'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': rowHover || selectionMode === 'single' || selectionMode === 'multiple',\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': resizableColumns && columnResizeMode === 'fit',\n                'p-treetable-flex-scrollable': scrollable && scrollHeight === 'flex'\n            }\"\n        >\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i *ngIf=\"loadingIcon\" [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                    <ng-container *ngIf=\"!loadingIcon\">\n                        <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-treetable-loading-icon'\" />\n                        <span *ngIf=\"loadingIconTemplate\" class=\"p-treetable-loading-icon\">\n                            <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\n                        </span>\n                    </ng-container>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-top\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n            >\n                <ng-template pTemplate=\"firstpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n                <div\n                    class=\"p-treetable-scrollable-view p-treetable-frozen-view\"\n                    *ngIf=\"frozenColumns || frozenBodyTemplate\"\n                    #scrollableFrozenView\n                    [ttScrollableView]=\"frozenColumns\"\n                    [frozen]=\"true\"\n                    [ngStyle]=\"{ width: frozenWidth }\"\n                    [scrollHeight]=\"scrollHeight\"\n                ></div>\n                <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{ left: frozenWidth, width: 'calc(100% - ' + frozenWidth + ')' }\"></div>\n            </div>\n\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-bottom\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n            >\n                <ng-template pTemplate=\"firstpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n            <span #reorderIndicatorUp class=\"p-treetable-reorder-indicator-up\" style=\"display: none;\" *ngIf=\"reorderableColumns\">\n                <ArrowDownIcon *ngIf=\"!reorderIndicatorUpIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorUpIconTemplate\"></ng-template>\n            </span>\n            <span #reorderIndicatorDown class=\"p-treetable-reorder-indicator-down\" style=\"display: none;\" *ngIf=\"reorderableColumns\">\n                <ArrowUpIcon *ngIf=\"!reorderIndicatorDownIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorDownIconTemplate\"></ng-template>\n            </span>\n        </div>\n    `, isInline: true, styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-treetable .p-scroller-loading{transform:none!important;min-height:0;position:sticky;top:0;left:0}\\n\"], dependencies: [{ kind: \"directive\", type: i0.forwardRef(function () { return i2.NgClass; }), selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i2.NgIf; }), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i2.NgTemplateOutlet; }), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i2.NgStyle; }), selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"component\", type: i0.forwardRef(function () { return i3.Paginator; }), selector: \"p-paginator\", inputs: [\"pageLinkSize\", \"style\", \"styleClass\", \"alwaysShow\", \"dropdownAppendTo\", \"templateLeft\", \"templateRight\", \"appendTo\", \"dropdownScrollHeight\", \"currentPageReportTemplate\", \"showCurrentPageReport\", \"showFirstLastIcon\", \"totalRecords\", \"rows\", \"rowsPerPageOptions\", \"showJumpToPageDropdown\", \"showJumpToPageInput\", \"showPageLinks\", \"dropdownItemTemplate\", \"first\"], outputs: [\"onPageChange\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i1.PrimeTemplate; }), selector: \"[pTemplate]\", inputs: [\"type\", \"pTemplate\"] }, { kind: \"component\", type: i0.forwardRef(function () { return SpinnerIcon; }), selector: \"SpinnerIcon\" }, { kind: \"component\", type: i0.forwardRef(function () { return ArrowDownIcon; }), selector: \"ArrowDownIcon\" }, { kind: \"component\", type: i0.forwardRef(function () { return ArrowUpIcon; }), selector: \"ArrowUpIcon\" }, { kind: \"component\", type: i0.forwardRef(function () { return TTScrollableView; }), selector: \"[ttScrollableView]\", inputs: [\"ttScrollableView\", \"frozen\", \"scrollHeight\"] }, { kind: \"component\", type: i0.forwardRef(function () { return TTBody; }), selector: \"[pTreeTableBody]\", inputs: [\"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"frozen\", \"serializedNodes\", \"scrollerOptions\"] }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TreeTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'p-treeTable', template: `\n        <div\n            #container\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            data-scrollselectors=\".p-treetable-scrollable-body\"\n            [ngClass]=\"{\n                'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': rowHover || selectionMode === 'single' || selectionMode === 'multiple',\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': resizableColumns && columnResizeMode === 'fit',\n                'p-treetable-flex-scrollable': scrollable && scrollHeight === 'flex'\n            }\"\n        >\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i *ngIf=\"loadingIcon\" [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                    <ng-container *ngIf=\"!loadingIcon\">\n                        <SpinnerIcon *ngIf=\"!loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"'p-treetable-loading-icon'\" />\n                        <span *ngIf=\"loadingIconTemplate\" class=\"p-treetable-loading-icon\">\n                            <ng-template *ngTemplateOutlet=\"loadingIconTemplate\"></ng-template>\n                        </span>\n                    </ng-container>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-top\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n            >\n                <ng-template pTemplate=\"firstpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n                <div\n                    class=\"p-treetable-scrollable-view p-treetable-frozen-view\"\n                    *ngIf=\"frozenColumns || frozenBodyTemplate\"\n                    #scrollableFrozenView\n                    [ttScrollableView]=\"frozenColumns\"\n                    [frozen]=\"true\"\n                    [ngStyle]=\"{ width: frozenWidth }\"\n                    [scrollHeight]=\"scrollHeight\"\n                ></div>\n                <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{ left: frozenWidth, width: 'calc(100% - ' + frozenWidth + ')' }\"></div>\n            </div>\n\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                styleClass=\"p-paginator-bottom\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showPageLinks]=\"showPageLinks\"\n            >\n                <ng-template pTemplate=\"firstpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n            <span #reorderIndicatorUp class=\"p-treetable-reorder-indicator-up\" style=\"display: none;\" *ngIf=\"reorderableColumns\">\n                <ArrowDownIcon *ngIf=\"!reorderIndicatorUpIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorUpIconTemplate\"></ng-template>\n            </span>\n            <span #reorderIndicatorDown class=\"p-treetable-reorder-indicator-down\" style=\"display: none;\" *ngIf=\"reorderableColumns\">\n                <ArrowUpIcon *ngIf=\"!reorderIndicatorDownIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorDownIconTemplate\"></ng-template>\n            </span>\n        </div>\n    `, providers: [TreeTableService], encapsulation: ViewEncapsulation.None, host: {\n                        class: 'p-element'\n                    }, styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}.p-treetable .p-scroller-loading{transform:none!important;min-height:0;position:sticky;top:0;left:0}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: TreeTableService }, { type: i1.FilterService }]; }, propDecorators: { columns: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], tableStyle: [{\n                type: Input\n            }], tableStyleClass: [{\n                type: Input\n            }], autoLayout: [{\n                type: Input\n            }], lazy: [{\n                type: Input\n            }], lazyLoadOnInit: [{\n                type: Input\n            }], paginator: [{\n                type: Input\n            }], rows: [{\n                type: Input\n            }], first: [{\n                type: Input\n            }], pageLinks: [{\n                type: Input\n            }], rowsPerPageOptions: [{\n                type: Input\n            }], alwaysShowPaginator: [{\n                type: Input\n            }], paginatorPosition: [{\n                type: Input\n            }], paginatorDropdownAppendTo: [{\n                type: Input\n            }], currentPageReportTemplate: [{\n                type: Input\n            }], showCurrentPageReport: [{\n                type: Input\n            }], showJumpToPageDropdown: [{\n                type: Input\n            }], showFirstLastIcon: [{\n                type: Input\n            }], showPageLinks: [{\n                type: Input\n            }], defaultSortOrder: [{\n                type: Input\n            }], sortMode: [{\n                type: Input\n            }], resetPageOnSort: [{\n                type: Input\n            }], customSort: [{\n                type: Input\n            }], selectionMode: [{\n                type: Input\n            }], contextMenuSelection: [{\n                type: Input\n            }], contextMenuSelectionMode: [{\n                type: Input\n            }], dataKey: [{\n                type: Input\n            }], metaKeySelection: [{\n                type: Input\n            }], compareSelectionBy: [{\n                type: Input\n            }], rowHover: [{\n                type: Input\n            }], loading: [{\n                type: Input\n            }], loadingIcon: [{\n                type: Input\n            }], showLoader: [{\n                type: Input\n            }], scrollable: [{\n                type: Input\n            }], scrollHeight: [{\n                type: Input\n            }], virtualScroll: [{\n                type: Input\n            }], virtualScrollItemSize: [{\n                type: Input\n            }], virtualScrollOptions: [{\n                type: Input\n            }], virtualScrollDelay: [{\n                type: Input\n            }], frozenWidth: [{\n                type: Input\n            }], frozenColumns: [{\n                type: Input\n            }], resizableColumns: [{\n                type: Input\n            }], columnResizeMode: [{\n                type: Input\n            }], reorderableColumns: [{\n                type: Input\n            }], contextMenu: [{\n                type: Input\n            }], rowTrackBy: [{\n                type: Input\n            }], filters: [{\n                type: Input\n            }], globalFilterFields: [{\n                type: Input\n            }], filterDelay: [{\n                type: Input\n            }], filterMode: [{\n                type: Input\n            }], filterLocale: [{\n                type: Input\n            }], totalRecords: [{\n                type: Input\n            }], sortField: [{\n                type: Input\n            }], sortOrder: [{\n                type: Input\n            }], multiSortMeta: [{\n                type: Input\n            }], selection: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], virtualRowHeight: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], contextMenuSelectionChange: [{\n                type: Output\n            }], onFilter: [{\n                type: Output\n            }], onNodeExpand: [{\n                type: Output\n            }], onNodeCollapse: [{\n                type: Output\n            }], onPage: [{\n                type: Output\n            }], onSort: [{\n                type: Output\n            }], onLazyLoad: [{\n                type: Output\n            }], sortFunction: [{\n                type: Output\n            }], onColResize: [{\n                type: Output\n            }], onColReorder: [{\n                type: Output\n            }], onNodeSelect: [{\n                type: Output\n            }], onNodeUnselect: [{\n                type: Output\n            }], onContextMenuSelect: [{\n                type: Output\n            }], onHeaderCheckboxToggle: [{\n                type: Output\n            }], onEditInit: [{\n                type: Output\n            }], onEditComplete: [{\n                type: Output\n            }], onEditCancel: [{\n                type: Output\n            }], containerViewChild: [{\n                type: ViewChild,\n                args: ['container']\n            }], resizeHelperViewChild: [{\n                type: ViewChild,\n                args: ['resizeHelper']\n            }], reorderIndicatorUpViewChild: [{\n                type: ViewChild,\n                args: ['reorderIndicatorUp']\n            }], reorderIndicatorDownViewChild: [{\n                type: ViewChild,\n                args: ['reorderIndicatorDown']\n            }], tableViewChild: [{\n                type: ViewChild,\n                args: ['table']\n            }], scrollableViewChild: [{\n                type: ViewChild,\n                args: ['scrollableView']\n            }], scrollableFrozenViewChild: [{\n                type: ViewChild,\n                args: ['scrollableFrozenView']\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }] } });\nclass TTBody {\n    tt;\n    treeTableService;\n    cd;\n    columns;\n    template;\n    frozen;\n    serializedNodes;\n    scrollerOptions;\n    subscription;\n    constructor(tt, treeTableService, cd) {\n        this.tt = tt;\n        this.treeTableService = treeTableService;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            if (this.tt.virtualScroll) {\n                this.cd.detectChanges();\n            }\n        });\n    }\n    getScrollerOption(option, options) {\n        if (this.tt.virtualScroll) {\n            options = options || this.scrollerOptions;\n            return options ? options[option] : null;\n        }\n        return null;\n    }\n    getRowIndex(rowIndex) {\n        const getItemOptions = this.getScrollerOption('getItemOptions');\n        return getItemOptions ? getItemOptions(rowIndex).index : rowIndex;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTBody, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TTBody, selector: \"[pTreeTableBody]\", inputs: { columns: [\"pTreeTableBody\", \"columns\"], template: [\"pTreeTableBodyTemplate\", \"template\"], frozen: \"frozen\", serializedNodes: \"serializedNodes\", scrollerOptions: \"scrollerOptions\" }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"serializedNodes || tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n            <ng-container *ngIf=\"serializedNode.visible\">\n                <ng-container *ngTemplateOutlet=\"template; context: { $implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns }\"></ng-container>\n            </ng-container>\n        </ng-template>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: { $implicit: columns, frozen: frozen }\"></ng-container>\n        </ng-container>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTBody, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[pTreeTableBody]',\n                    template: `\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"serializedNodes || tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n            <ng-container *ngIf=\"serializedNode.visible\">\n                <ng-container *ngTemplateOutlet=\"template; context: { $implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns }\"></ng-container>\n            </ng-container>\n        </ng-template>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: { $implicit: columns, frozen: frozen }\"></ng-container>\n        </ng-container>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { columns: [{\n                type: Input,\n                args: ['pTreeTableBody']\n            }], template: [{\n                type: Input,\n                args: ['pTreeTableBodyTemplate']\n            }], frozen: [{\n                type: Input\n            }], serializedNodes: [{\n                type: Input\n            }], scrollerOptions: [{\n                type: Input\n            }] } });\nclass TTScrollableView {\n    platformId;\n    renderer;\n    tt;\n    el;\n    zone;\n    columns;\n    frozen;\n    scrollHeaderViewChild;\n    scrollHeaderBoxViewChild;\n    scrollBodyViewChild;\n    scrollTableViewChild;\n    scrollLoadingTableViewChild;\n    scrollFooterViewChild;\n    scrollFooterBoxViewChild;\n    scrollableAlignerViewChild;\n    scroller;\n    headerScrollListener;\n    bodyScrollListener;\n    footerScrollListener;\n    frozenSiblingBody;\n    totalRecordsSubscription;\n    _scrollHeight;\n    preventBodyScrollPropagation;\n    get scrollHeight() {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.');\n        }\n    }\n    constructor(platformId, renderer, tt, el, zone) {\n        this.platformId = platformId;\n        this.renderer = renderer;\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n            }\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                if (this.tt.virtualScroll)\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-scroller-viewport');\n                else\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n            }\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n            this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n        }\n        this.bindEvents();\n    }\n    bindEvents() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.zone.runOutsideAngular(() => {\n                if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                    this.headerScrollListener = this.renderer.listen(this.scrollHeaderBoxViewChild?.nativeElement, 'scroll', this.onHeaderScroll.bind(this));\n                }\n                if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                    this.footerScrollListener = this.renderer.listen(this.scrollFooterViewChild.nativeElement, 'scroll', this.onFooterScroll.bind(this));\n                }\n                if (!this.frozen) {\n                    if (this.tt.virtualScroll) {\n                        this.bodyScrollListener = this.renderer.listen((this.scroller?.getElementRef()).nativeElement, 'scroll', this.onBodyScroll.bind(this));\n                    }\n                    else {\n                        this.bodyScrollListener = this.renderer.listen(this.scrollBodyViewChild?.nativeElement, 'scroll', this.onBodyScroll.bind(this));\n                    }\n                }\n            });\n        }\n    }\n    unbindEvents() {\n        if (isPlatformBrowser(this.platformId)) {\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                if (this.headerScrollListener) {\n                    this.headerScrollListener();\n                    this.headerScrollListener = null;\n                }\n            }\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                if (this.footerScrollListener) {\n                    this.footerScrollListener();\n                    this.footerScrollListener = null;\n                }\n            }\n            if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n                if (this.bodyScrollListener) {\n                    this.bodyScrollListener();\n                    this.bodyScrollListener = null;\n                }\n            }\n            if (this.scroller && this.scroller.getElementRef()) {\n                if (this.bodyScrollListener) {\n                    this.bodyScrollListener();\n                    this.bodyScrollListener = null;\n                }\n            }\n        }\n    }\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild?.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n        this.preventBodyScrollPropagation = true;\n    }\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild?.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n        this.preventBodyScrollPropagation = true;\n    }\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n    scrollToVirtualIndex(index) {\n        if (this.scroller) {\n            this.scroller.scrollToIndex(index);\n        }\n    }\n    scrollTo(options) {\n        if (this.scroller) {\n            this.scroller.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild?.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        this.frozenSiblingBody = null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTScrollableView, deps: [{ token: PLATFORM_ID }, { token: i0.Renderer2 }, { token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TTScrollableView, selector: \"[ttScrollableView]\", inputs: { columns: [\"ttScrollableView\", \"columns\"], frozen: \"frozen\", scrollHeight: \"scrollHeight\" }, host: { classAttribute: \"p-element\" }, viewQueries: [{ propertyName: \"scrollHeaderViewChild\", first: true, predicate: [\"scrollHeader\"], descendants: true }, { propertyName: \"scrollHeaderBoxViewChild\", first: true, predicate: [\"scrollHeaderBox\"], descendants: true }, { propertyName: \"scrollBodyViewChild\", first: true, predicate: [\"scrollBody\"], descendants: true }, { propertyName: \"scrollTableViewChild\", first: true, predicate: [\"scrollTable\"], descendants: true }, { propertyName: \"scrollLoadingTableViewChild\", first: true, predicate: [\"loadingTable\"], descendants: true }, { propertyName: \"scrollFooterViewChild\", first: true, predicate: [\"scrollFooter\"], descendants: true }, { propertyName: \"scrollFooterBoxViewChild\", first: true, predicate: [\"scrollFooterBox\"], descendants: true }, { propertyName: \"scrollableAlignerViewChild\", first: true, predicate: [\"scrollableAligner\"], descendants: true }, { propertyName: \"scroller\", first: true, predicate: [\"scroller\"], descendants: true }], ngImport: i0, template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate || tt.headerTemplate : tt.headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n\n        <p-scroller\n            *ngIf=\"tt.virtualScroll\"\n            #scroller\n            [items]=\"tt.serializedValue\"\n            styleClass=\"p-treetable-scrollable-body\"\n            [style]=\"{ height: tt.scrollHeight !== 'flex' ? tt.scrollHeight : undefined }\"\n            [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n            [itemSize]=\"tt.virtualScrollItemSize || tt._virtualRowHeight\"\n            [lazy]=\"tt.lazy\"\n            (onLazyLoad)=\"tt.onLazyItemLoad($event)\"\n            [options]=\"tt.virtualScrollOptions\"\n        >\n            <ng-template pTemplate=\"content\" let-items let-scrollerOptions=\"options\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: items, options: scrollerOptions }\"></ng-container>\n            </ng-template>\n            <ng-container *ngIf=\"loaderTemplate\">\n                <ng-template pTemplate=\"loader\" let-scrollerOptions=\"options\">\n                    <ng-container *ngTemplateOutlet=\"loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </p-scroller>\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{ 'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined }\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: serializedValue, options: {} }\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-template #buildInItems let-items let-scrollerOptions=\"options\">\n            <table #scrollTable [class]=\"tt.tableStyleClass\" [ngClass]=\"scrollerOptions.contentStyleClass\" [ngStyle]=\"tt.tableStyle\" [style]=\"scrollerOptions.contentStyle\">\n                <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate || tt.bodyTemplate : tt.bodyTemplate\" [serializedNodes]=\"items\" [frozen]=\"frozen\"></tbody>\n            </table>\n            <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n        </ng-template>\n\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate || tt.footerTemplate : tt.footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: i1.PrimeTemplate, selector: \"[pTemplate]\", inputs: [\"type\", \"pTemplate\"] }, { kind: \"component\", type: i4.Scroller, selector: \"p-scroller\", inputs: [\"id\", \"style\", \"styleClass\", \"tabindex\", \"items\", \"itemSize\", \"scrollHeight\", \"scrollWidth\", \"orientation\", \"step\", \"delay\", \"resizeDelay\", \"appendOnly\", \"inline\", \"lazy\", \"disabled\", \"loaderDisabled\", \"columns\", \"showSpacer\", \"showLoader\", \"numToleratedItems\", \"loading\", \"autoSize\", \"trackBy\", \"options\"], outputs: [\"onLazyLoad\", \"onScroll\", \"onScrollIndexChange\"] }, { kind: \"component\", type: TTBody, selector: \"[pTreeTableBody]\", inputs: [\"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"frozen\", \"serializedNodes\", \"scrollerOptions\"] }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTScrollableView, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ttScrollableView]',\n                    template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate || tt.headerTemplate : tt.headerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n\n        <p-scroller\n            *ngIf=\"tt.virtualScroll\"\n            #scroller\n            [items]=\"tt.serializedValue\"\n            styleClass=\"p-treetable-scrollable-body\"\n            [style]=\"{ height: tt.scrollHeight !== 'flex' ? tt.scrollHeight : undefined }\"\n            [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n            [itemSize]=\"tt.virtualScrollItemSize || tt._virtualRowHeight\"\n            [lazy]=\"tt.lazy\"\n            (onLazyLoad)=\"tt.onLazyItemLoad($event)\"\n            [options]=\"tt.virtualScrollOptions\"\n        >\n            <ng-template pTemplate=\"content\" let-items let-scrollerOptions=\"options\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: items, options: scrollerOptions }\"></ng-container>\n            </ng-template>\n            <ng-container *ngIf=\"loaderTemplate\">\n                <ng-template pTemplate=\"loader\" let-scrollerOptions=\"options\">\n                    <ng-container *ngTemplateOutlet=\"loaderTemplate; context: { options: scrollerOptions }\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </p-scroller>\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{ 'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined }\">\n                <ng-container *ngTemplateOutlet=\"buildInItems; context: { $implicit: serializedValue, options: {} }\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-template #buildInItems let-items let-scrollerOptions=\"options\">\n            <table #scrollTable [class]=\"tt.tableStyleClass\" [ngClass]=\"scrollerOptions.contentStyleClass\" [ngStyle]=\"tt.tableStyle\" [style]=\"scrollerOptions.contentStyle\">\n                <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate || tt.bodyTemplate : tt.bodyTemplate\" [serializedNodes]=\"items\" [frozen]=\"frozen\"></tbody>\n            </table>\n            <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n        </ng-template>\n\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate || tt.colGroupTemplate : tt.colGroupTemplate; context: { $implicit: columns }\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate || tt.footerTemplate : tt.footerTemplate; context: { $implicit: columns }\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.Renderer2 }, { type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { columns: [{\n                type: Input,\n                args: ['ttScrollableView']\n            }], frozen: [{\n                type: Input\n            }], scrollHeaderViewChild: [{\n                type: ViewChild,\n                args: ['scrollHeader']\n            }], scrollHeaderBoxViewChild: [{\n                type: ViewChild,\n                args: ['scrollHeaderBox']\n            }], scrollBodyViewChild: [{\n                type: ViewChild,\n                args: ['scrollBody']\n            }], scrollTableViewChild: [{\n                type: ViewChild,\n                args: ['scrollTable']\n            }], scrollLoadingTableViewChild: [{\n                type: ViewChild,\n                args: ['loadingTable']\n            }], scrollFooterViewChild: [{\n                type: ViewChild,\n                args: ['scrollFooter']\n            }], scrollFooterBoxViewChild: [{\n                type: ViewChild,\n                args: ['scrollFooterBox']\n            }], scrollableAlignerViewChild: [{\n                type: ViewChild,\n                args: ['scrollableAligner']\n            }], scroller: [{\n                type: ViewChild,\n                args: ['scroller']\n            }], scrollHeight: [{\n                type: Input\n            }] } });\nclass TTSortableColumn {\n    tt;\n    field;\n    ttSortableColumnDisabled;\n    sorted;\n    subscription;\n    constructor(tt) {\n        this.tt = tt;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.sortSource$.subscribe((sortMeta) => {\n                this.updateSortState();\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n    updateSortState() {\n        this.sorted = this.tt.isSorted(this.field);\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.tt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n            DomHandler.clearSelection();\n        }\n    }\n    onEnterKey(event) {\n        this.onClick(event);\n    }\n    isEnabled() {\n        return this.ttSortableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTSortableColumn, deps: [{ token: TreeTable }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TTSortableColumn, selector: \"[ttSortableColumn]\", inputs: { field: [\"ttSortableColumn\", \"field\"], ttSortableColumnDisabled: \"ttSortableColumnDisabled\" }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown.enter\": \"onEnterKey($event)\" }, properties: { \"class.p-sortable-column\": \"isEnabled()\", \"class.p-highlight\": \"sorted\", \"attr.tabindex\": \"isEnabled() ? \\\"0\\\" : null\", \"attr.role\": \"\\\"columnheader\\\"\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTSortableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSortableColumn]',\n                    host: {\n                        class: 'p-element',\n                        '[class.p-sortable-column]': 'isEnabled()',\n                        '[class.p-highlight]': 'sorted',\n                        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n                        '[attr.role]': '\"columnheader\"'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }]; }, propDecorators: { field: [{\n                type: Input,\n                args: ['ttSortableColumn']\n            }], ttSortableColumnDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onEnterKey: [{\n                type: HostListener,\n                args: ['keydown.enter', ['$event']]\n            }] } });\nclass TTSortIcon {\n    tt;\n    cd;\n    field;\n    ariaLabelDesc;\n    ariaLabelAsc;\n    subscription;\n    sortOrder;\n    constructor(tt, cd) {\n        this.tt = tt;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.sortSource$.subscribe((sortMeta) => {\n            this.updateSortState();\n            this.cd.markForCheck();\n        });\n    }\n    ngOnInit() {\n        this.updateSortState();\n    }\n    onClick(event) {\n        event.preventDefault();\n    }\n    updateSortState() {\n        if (this.tt.sortMode === 'single') {\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n        }\n        else if (this.tt.sortMode === 'multiple') {\n            let sortMeta = this.tt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order : 0;\n        }\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTSortIcon, deps: [{ token: TreeTable }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TTSortIcon, selector: \"p-treeTableSortIcon\", inputs: { field: \"field\", ariaLabelDesc: \"ariaLabelDesc\", ariaLabelAsc: \"ariaLabelAsc\" }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: ` <ng-container *ngIf=\"!tt.sortIconTemplate\">\n            <SortAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 0\" />\n            <SortAmountUpAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 1\" />\n            <SortAmountDownIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === -1\" />\n        </ng-container>\n        <span *ngIf=\"tt.sortIconTemplate\" class=\"p-sortable-column-icon\">\n            <ng-template *ngTemplateOutlet=\"tt.sortIconTemplate; context: { $implicit: sortOrder }\"></ng-template>\n        </span>`, isInline: true, dependencies: [{ kind: \"directive\", type: i0.forwardRef(function () { return i2.NgIf; }), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i2.NgTemplateOutlet; }), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: i0.forwardRef(function () { return SortAltIcon; }), selector: \"SortAltIcon\" }, { kind: \"component\", type: i0.forwardRef(function () { return SortAmountUpAltIcon; }), selector: \"SortAmountUpAltIcon\" }, { kind: \"component\", type: i0.forwardRef(function () { return SortAmountDownIcon; }), selector: \"SortAmountDownIcon\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTSortIcon, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableSortIcon',\n                    template: ` <ng-container *ngIf=\"!tt.sortIconTemplate\">\n            <SortAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 0\" />\n            <SortAmountUpAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 1\" />\n            <SortAmountDownIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === -1\" />\n        </ng-container>\n        <span *ngIf=\"tt.sortIconTemplate\" class=\"p-sortable-column-icon\">\n            <ng-template *ngTemplateOutlet=\"tt.sortIconTemplate; context: { $implicit: sortOrder }\"></ng-template>\n        </span>`,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { field: [{\n                type: Input\n            }], ariaLabelDesc: [{\n                type: Input\n            }], ariaLabelAsc: [{\n                type: Input\n            }] } });\nclass TTResizableColumn {\n    document;\n    platformId;\n    renderer;\n    tt;\n    el;\n    zone;\n    ttResizableColumnDisabled;\n    resizer;\n    resizerMouseDownListener;\n    documentMouseMoveListener;\n    documentMouseUpListener;\n    constructor(document, platformId, renderer, tt, el, zone) {\n        this.document = document;\n        this.platformId = platformId;\n        this.renderer = renderer;\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (isPlatformBrowser(this.platformId)) {\n            if (this.isEnabled()) {\n                DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n                this.resizer = this.renderer.createElement('span');\n                this.renderer.addClass(this.resizer, 'p-column-resizer');\n                this.renderer.appendChild(this.el.nativeElement, this.resizer);\n                this.zone.runOutsideAngular(() => {\n                    this.resizerMouseDownListener = this.renderer.listen(this.resizer, 'mousedown', this.onMouseDown.bind(this));\n                });\n            }\n        }\n    }\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.renderer.listen(this.document, 'mousemove', this.onDocumentMouseMove.bind(this));\n            this.documentMouseUpListener = this.renderer.listen(this.document, 'mouseup', this.onDocumentMouseUp.bind(this));\n        });\n    }\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            this.documentMouseMoveListener();\n            this.documentMouseMoveListener = null;\n        }\n        if (this.documentMouseUpListener) {\n            this.documentMouseUpListener();\n            this.documentMouseUpListener = null;\n        }\n    }\n    onMouseDown(event) {\n        this.tt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    }\n    onDocumentMouseMove(event) {\n        this.tt.onColumnResize(event);\n    }\n    onDocumentMouseUp(event) {\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n    isEnabled() {\n        return this.ttResizableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizerMouseDownListener();\n            this.resizerMouseDownListener = null;\n        }\n        this.unbindDocumentEvents();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTResizableColumn, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: i0.Renderer2 }, { token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TTResizableColumn, selector: \"[ttResizableColumn]\", inputs: { ttResizableColumnDisabled: \"ttResizableColumnDisabled\" }, host: { classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTResizableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttResizableColumn]',\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.Renderer2 }, { type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { ttResizableColumnDisabled: [{\n                type: Input\n            }] } });\nclass TTReorderableColumn {\n    document;\n    platformId;\n    renderer;\n    tt;\n    el;\n    zone;\n    ttReorderableColumnDisabled;\n    dragStartListener;\n    dragOverListener;\n    dragEnterListener;\n    dragLeaveListener;\n    mouseDownListener;\n    constructor(document, platformId, renderer, tt, el, zone) {\n        this.document = document;\n        this.platformId = platformId;\n        this.renderer = renderer;\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n    bindEvents() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.zone.runOutsideAngular(() => {\n                this.mouseDownListener = this.renderer.listen(this.el.nativeElement, 'mousedown', this.onMouseDown.bind(this));\n                this.dragStartListener = this.renderer.listen(this.el.nativeElement, 'dragstart', this.onDragStart.bind(this));\n                this.dragOverListener = this.renderer.listen(this.el.nativeElement, 'dragover', this.onDragEnter.bind(this));\n                this.dragEnterListener = this.renderer.listen(this.el.nativeElement, 'dragenter', this.onDragEnter.bind(this));\n                this.dragLeaveListener = this.renderer.listen(this.el.nativeElement, 'dragleave', this.onDragLeave.bind(this));\n            });\n        }\n    }\n    unbindEvents() {\n        if (isPlatformBrowser(this.platformId)) {\n            if (this.mouseDownListener) {\n                this.mouseDownListener();\n                this.mouseDownListener = null;\n            }\n            if (this.dragOverListener) {\n                this.dragOverListener();\n                this.dragOverListener = null;\n            }\n            if (this.dragEnterListener) {\n                this.dragEnterListener();\n                this.dragEnterListener = null;\n            }\n            if (this.dragLeaveListener) {\n                this.dragLeaveListener();\n                this.dragLeaveListener = null;\n            }\n        }\n    }\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n    onDragStart(event) {\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\n    }\n    onDragOver(event) {\n        event.preventDefault();\n    }\n    onDragEnter(event) {\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n    onDragLeave(event) {\n        this.tt.onColumnDragLeave(event);\n    }\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.tt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n    isEnabled() {\n        return this.ttReorderableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTReorderableColumn, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: i0.Renderer2 }, { token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TTReorderableColumn, selector: \"[ttReorderableColumn]\", inputs: { ttReorderableColumnDisabled: \"ttReorderableColumnDisabled\" }, host: { listeners: { \"drop\": \"onDrop($event)\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTReorderableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttReorderableColumn]',\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.Renderer2 }, { type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { ttReorderableColumnDisabled: [{\n                type: Input\n            }], onDrop: [{\n                type: HostListener,\n                args: ['drop', ['$event']]\n            }] } });\nclass TTSelectableRow {\n    tt;\n    tableService;\n    rowNode;\n    ttSelectableRowDisabled;\n    selected;\n    subscription;\n    constructor(tt, tableService) {\n        this.tt = tt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n    onEnterKey(event) {\n        if (event.which === 13) {\n            this.onClick(event);\n        }\n    }\n    onTouchEnd(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowTouchEnd(event);\n        }\n    }\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTSelectableRow, deps: [{ token: TreeTable }, { token: TreeTableService }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TTSelectableRow, selector: \"[ttSelectableRow]\", inputs: { rowNode: [\"ttSelectableRow\", \"rowNode\"], ttSelectableRowDisabled: \"ttSelectableRowDisabled\" }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown\": \"onEnterKey($event)\", \"touchend\": \"onTouchEnd($event)\" }, properties: { \"class.p-highlight\": \"selected\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTSelectableRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSelectableRow]',\n                    host: {\n                        class: 'p-element',\n                        '[class.p-highlight]': 'selected'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttSelectableRow']\n            }], ttSelectableRowDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onEnterKey: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }], onTouchEnd: [{\n                type: HostListener,\n                args: ['touchend', ['$event']]\n            }] } });\nclass TTSelectableRowDblClick {\n    tt;\n    tableService;\n    rowNode;\n    ttSelectableRowDisabled;\n    selected;\n    subscription;\n    constructor(tt, tableService) {\n        this.tt = tt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTSelectableRowDblClick, deps: [{ token: TreeTable }, { token: TreeTableService }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TTSelectableRowDblClick, selector: \"[ttSelectableRowDblClick]\", inputs: { rowNode: [\"ttSelectableRowDblClick\", \"rowNode\"], ttSelectableRowDisabled: \"ttSelectableRowDisabled\" }, host: { listeners: { \"dblclick\": \"onClick($event)\" }, properties: { \"class.p-highlight\": \"selected\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTSelectableRowDblClick, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSelectableRowDblClick]',\n                    host: {\n                        class: 'p-element',\n                        '[class.p-highlight]': 'selected'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttSelectableRowDblClick']\n            }], ttSelectableRowDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['dblclick', ['$event']]\n            }] } });\nclass TTContextMenuRow {\n    tt;\n    tableService;\n    el;\n    rowNode;\n    ttContextMenuRowDisabled;\n    selected;\n    subscription;\n    constructor(tt, tableService, el) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.el = el;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\n                this.selected = this.tt.equals(this.rowNode.node, node);\n            });\n        }\n    }\n    onContextMenu(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowRightClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n            this.el.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n    isEnabled() {\n        return this.ttContextMenuRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTContextMenuRow, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TTContextMenuRow, selector: \"[ttContextMenuRow]\", inputs: { rowNode: [\"ttContextMenuRow\", \"rowNode\"], ttContextMenuRowDisabled: \"ttContextMenuRowDisabled\" }, host: { listeners: { \"contextmenu\": \"onContextMenu($event)\" }, properties: { \"class.p-highlight-contextmenu\": \"selected\", \"attr.tabindex\": \"isEnabled() ? 0 : undefined\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTContextMenuRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttContextMenuRow]',\n                    host: {\n                        class: 'p-element',\n                        '[class.p-highlight-contextmenu]': 'selected',\n                        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ElementRef }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttContextMenuRow']\n            }], ttContextMenuRowDisabled: [{\n                type: Input\n            }], onContextMenu: [{\n                type: HostListener,\n                args: ['contextmenu', ['$event']]\n            }] } });\nclass TTCheckbox {\n    tt;\n    tableService;\n    cd;\n    disabled;\n    rowNode;\n    checked;\n    focused;\n    subscription;\n    constructor(tt, tableService, cd) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.tt.isSelected(this.rowNode.node);\n            this.cd.markForCheck();\n        });\n    }\n    ngOnInit() {\n        this.checked = this.tt.isSelected(this.rowNode.node);\n    }\n    onClick(event) {\n        if (!this.disabled) {\n            this.tt.toggleNodeWithCheckbox({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n        DomHandler.clearSelection();\n    }\n    onFocus() {\n        this.focused = true;\n    }\n    onBlur() {\n        this.focused = false;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTCheckbox, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TTCheckbox, selector: \"p-treeTableCheckbox\", inputs: { disabled: \"disabled\", rowNode: [\"value\", \"rowNode\"] }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-indeterminate': rowNode.node.partialSelected, 'p-disabled': disabled }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <ng-container *ngIf=\"!tt.checkboxIconTemplate\">\n                    <CheckIcon [styleClass]=\"'p-checkbox-icon'\" *ngIf=\"checked\" />\n                    <MinusIcon [styleClass]=\"'p-checkbox-icon'\" *ngIf=\"rowNode.node.partialSelected\" />\n                </ng-container>\n                <span *ngIf=\"tt.checkboxIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"tt.checkboxIconTemplate; context: { $implicit: checked, partialSelected: rowNode.node.partialSelected }\"></ng-template>\n                </span>\n            </div>\n        </div>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i0.forwardRef(function () { return i2.NgClass; }), selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i2.NgIf; }), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i2.NgTemplateOutlet; }), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: i0.forwardRef(function () { return CheckIcon; }), selector: \"CheckIcon\" }, { kind: \"component\", type: i0.forwardRef(function () { return MinusIcon; }), selector: \"MinusIcon\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTCheckbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableCheckbox',\n                    template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-indeterminate': rowNode.node.partialSelected, 'p-disabled': disabled }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <ng-container *ngIf=\"!tt.checkboxIconTemplate\">\n                    <CheckIcon [styleClass]=\"'p-checkbox-icon'\" *ngIf=\"checked\" />\n                    <MinusIcon [styleClass]=\"'p-checkbox-icon'\" *ngIf=\"rowNode.node.partialSelected\" />\n                </ng-container>\n                <span *ngIf=\"tt.checkboxIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"tt.checkboxIconTemplate; context: { $implicit: checked, partialSelected: rowNode.node.partialSelected }\"></ng-template>\n                </span>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { disabled: [{\n                type: Input\n            }], rowNode: [{\n                type: Input,\n                args: ['value']\n            }] } });\nclass TTHeaderCheckbox {\n    tt;\n    tableService;\n    cd;\n    boxViewChild;\n    checked;\n    focused;\n    disabled;\n    selectionChangeSubscription;\n    valueChangeSubscription;\n    constructor(tt, tableService, cd) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.cd = cd;\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n    onClick(event, checked) {\n        if (this.tt.value && this.tt.value.length > 0) {\n            this.tt.toggleNodesWithCheckbox(event, !checked);\n        }\n        DomHandler.clearSelection();\n    }\n    onFocus() {\n        this.focused = true;\n    }\n    onBlur() {\n        this.focused = false;\n    }\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n    updateCheckedState() {\n        this.cd.markForCheck();\n        let checked;\n        const data = this.tt.filteredNodes || this.tt.value;\n        if (data) {\n            for (let node of data) {\n                if (this.tt.isSelected(node)) {\n                    checked = true;\n                }\n                else {\n                    checked = false;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = false;\n        }\n        return checked;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTHeaderCheckbox, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TTHeaderCheckbox, selector: \"p-treeTableHeaderCheckbox\", host: { classAttribute: \"p-element\" }, viewQueries: [{ propertyName: \"boxViewChild\", first: true, predicate: [\"box\"], descendants: true }], ngImport: i0, template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value || tt.value.length === 0\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-disabled': !tt.value || tt.value.length === 0 }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <ng-container *ngIf=\"!tt.headerCheckboxIconTemplate\">\n                    <CheckIcon *ngIf=\"checked\" [styleClass]=\"'p-checkbox-icon'\" />\n                </ng-container>\n                <span class=\"p-checkbox-icon\" *ngIf=\"tt.headerCheckboxIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"tt.headerCheckboxIconTemplate; context: { $implicit: checked }\"></ng-template>\n                </span>\n            </div>\n        </div>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i0.forwardRef(function () { return i2.NgClass; }), selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i2.NgIf; }), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i2.NgTemplateOutlet; }), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: i0.forwardRef(function () { return CheckIcon; }), selector: \"CheckIcon\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTHeaderCheckbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableHeaderCheckbox',\n                    template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{ 'p-checkbox-focused': focused }\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value || tt.value.length === 0\" />\n            </div>\n            <div #box [ngClass]=\"{ 'p-checkbox-box': true, 'p-highlight': checked, 'p-focus': focused, 'p-disabled': !tt.value || tt.value.length === 0 }\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <ng-container *ngIf=\"!tt.headerCheckboxIconTemplate\">\n                    <CheckIcon *ngIf=\"checked\" [styleClass]=\"'p-checkbox-icon'\" />\n                </ng-container>\n                <span class=\"p-checkbox-icon\" *ngIf=\"tt.headerCheckboxIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"tt.headerCheckboxIconTemplate; context: { $implicit: checked }\"></ng-template>\n                </span>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { boxViewChild: [{\n                type: ViewChild,\n                args: ['box']\n            }] } });\nclass TTEditableColumn {\n    tt;\n    el;\n    zone;\n    data;\n    field;\n    ttEditableColumnDisabled;\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.editingCellClick = true;\n            if (this.tt.editingCell) {\n                if (this.tt.editingCell !== this.el.nativeElement) {\n                    if (!this.tt.isEditingCellValid()) {\n                        return;\n                    }\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n    openCell() {\n        this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n        DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n        this.tt.onEditInit.emit({ field: this.field, data: this.data });\n        this.tt.editingCellClick = true;\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    }\n    closeEditingCell() {\n        DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n        this.tt.editingCell = null;\n        this.tt.unbindDocumentEditListener();\n    }\n    onKeyDown(event) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            //escape\n            else if (event.keyCode == 27) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            //tab\n            else if (event.keyCode == 9) {\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n                cell = cell.parentElement;\n            }\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n    moveToPreviousCell(event) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n    moveToNextCell(event) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n    findPreviousEditableColumn(cell) {\n        let prevCell = cell.previousElementSibling;\n        if (!prevCell) {\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'p-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n    findNextEditableColumn(cell) {\n        let nextCell = cell.nextElementSibling;\n        if (!nextCell) {\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'p-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n    isEnabled() {\n        return this.ttEditableColumnDisabled !== true;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTEditableColumn, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TTEditableColumn, selector: \"[ttEditableColumn]\", inputs: { data: [\"ttEditableColumn\", \"data\"], field: [\"ttEditableColumnField\", \"field\"], ttEditableColumnDisabled: \"ttEditableColumnDisabled\" }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTEditableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttEditableColumn]',\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { data: [{\n                type: Input,\n                args: ['ttEditableColumn']\n            }], field: [{\n                type: Input,\n                args: ['ttEditableColumnField']\n            }], ttEditableColumnDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\nclass TreeTableCellEditor {\n    tt;\n    editableColumn;\n    templates;\n    inputTemplate;\n    outputTemplate;\n    constructor(tt, editableColumn) {\n        this.tt = tt;\n        this.editableColumn = editableColumn;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TreeTableCellEditor, deps: [{ token: TreeTable }, { token: TTEditableColumn }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TreeTableCellEditor, selector: \"p-treeTableCellEditor\", host: { classAttribute: \"p-element\" }, queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], ngImport: i0, template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TreeTableCellEditor, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableCellEditor',\n                    template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TTEditableColumn }]; }, propDecorators: { templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }] } });\nclass TTRow {\n    tt;\n    el;\n    zone;\n    rowNode;\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    onKeyDown(event) {\n        switch (event.which) {\n            //down arrow\n            case 40:\n                let nextRow = this.el.nativeElement.nextElementSibling;\n                if (nextRow) {\n                    nextRow.focus();\n                }\n                event.preventDefault();\n                break;\n            //down arrow\n            case 38:\n                let prevRow = this.el.nativeElement.previousElementSibling;\n                if (prevRow) {\n                    prevRow.focus();\n                }\n                event.preventDefault();\n                break;\n            //left arrow\n            case 37:\n                if (this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = false;\n                    this.tt.onNodeCollapse.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n                break;\n            //right arrow\n            case 39:\n                if (!this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = true;\n                    this.tt.onNodeExpand.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n                break;\n        }\n    }\n    restoreFocus() {\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let row = DomHandler.findSingle(this.tt.containerViewChild?.nativeElement, '.p-treetable-tbody').children[this.tt.toggleRowIndex];\n                if (row) {\n                    row.focus();\n                }\n            }, 25);\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTRow, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TTRow, selector: \"[ttRow]\", inputs: { rowNode: [\"ttRow\", \"rowNode\"] }, host: { listeners: { \"keydown\": \"onKeyDown($event)\" }, properties: { \"attr.tabindex\": \"\\\"0\\\"\" }, classAttribute: \"p-element\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TTRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttRow]',\n                    host: {\n                        class: 'p-element',\n                        '[attr.tabindex]': '\"0\"'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttRow']\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\nclass TreeTableToggler {\n    tt;\n    rowNode;\n    constructor(tt) {\n        this.tt = tt;\n    }\n    onClick(event) {\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\n        if (this.rowNode.node.expanded) {\n            this.tt.onNodeExpand.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        else {\n            this.tt.onNodeCollapse.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n        event.preventDefault();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TreeTableToggler, deps: [{ token: TreeTable }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: TreeTableToggler, selector: \"p-treeTableToggler\", inputs: { rowNode: \"rowNode\" }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <button\n            type=\"button\"\n            class=\"p-treetable-toggler p-link\"\n            (click)=\"onClick($event)\"\n            tabindex=\"-1\"\n            pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\"\n            [style.marginLeft]=\"rowNode.level * 16 + 'px'\"\n        >\n            <ng-container *ngIf=\"!tt.togglerIconTemplate\">\n                <ChevronDownIcon *ngIf=\"rowNode.node.expanded\" />\n                <ChevronRightIcon *ngIf=\"!rowNode.node.expanded\" />\n            </ng-container>\n            <ng-template *ngTemplateOutlet=\"tt.togglerIconTemplate; context: { $implicit: rowNode.node.expanded }\"></ng-template>\n        </button>\n    `, isInline: true, dependencies: [{ kind: \"directive\", type: i0.forwardRef(function () { return i2.NgIf; }), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i2.NgTemplateOutlet; }), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i0.forwardRef(function () { return i5.Ripple; }), selector: \"[pRipple]\" }, { kind: \"component\", type: i0.forwardRef(function () { return ChevronDownIcon; }), selector: \"ChevronDownIcon\" }, { kind: \"component\", type: i0.forwardRef(function () { return ChevronRightIcon; }), selector: \"ChevronRightIcon\" }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TreeTableToggler, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableToggler',\n                    template: `\n        <button\n            type=\"button\"\n            class=\"p-treetable-toggler p-link\"\n            (click)=\"onClick($event)\"\n            tabindex=\"-1\"\n            pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\"\n            [style.marginLeft]=\"rowNode.level * 16 + 'px'\"\n        >\n            <ng-container *ngIf=\"!tt.togglerIconTemplate\">\n                <ChevronDownIcon *ngIf=\"rowNode.node.expanded\" />\n                <ChevronRightIcon *ngIf=\"!rowNode.node.expanded\" />\n            </ng-container>\n            <ng-template *ngTemplateOutlet=\"tt.togglerIconTemplate; context: { $implicit: rowNode.node.expanded }\"></ng-template>\n        </button>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }]; }, propDecorators: { rowNode: [{\n                type: Input\n            }] } });\nclass TreeTableModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TreeTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: TreeTableModule, declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor], imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule, SpinnerIcon, ArrowDownIcon, ArrowUpIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, MinusIcon, ChevronDownIcon, ChevronRightIcon], exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollerModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TreeTableModule, imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule, SpinnerIcon, ArrowDownIcon, ArrowUpIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, MinusIcon, ChevronDownIcon, ChevronRightIcon, SharedModule,\n            ScrollerModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: TreeTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, PaginatorModule, RippleModule, ScrollerModule, SpinnerIcon, ArrowDownIcon, ArrowUpIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, MinusIcon, ChevronDownIcon, ChevronRightIcon],\n                    exports: [\n                        TreeTable,\n                        SharedModule,\n                        TreeTableToggler,\n                        TTSortableColumn,\n                        TTSortIcon,\n                        TTResizableColumn,\n                        TTRow,\n                        TTReorderableColumn,\n                        TTSelectableRow,\n                        TTSelectableRowDblClick,\n                        TTContextMenuRow,\n                        TTCheckbox,\n                        TTHeaderCheckbox,\n                        TTEditableColumn,\n                        TreeTableCellEditor,\n                        ScrollerModule\n                    ],\n                    declarations: [\n                        TreeTable,\n                        TreeTableToggler,\n                        TTScrollableView,\n                        TTBody,\n                        TTSortableColumn,\n                        TTSortIcon,\n                        TTResizableColumn,\n                        TTRow,\n                        TTReorderableColumn,\n                        TTSelectableRow,\n                        TTSelectableRowDblClick,\n                        TTContextMenuRow,\n                        TTCheckbox,\n                        TTHeaderCheckbox,\n                        TTEditableColumn,\n                        TreeTableCellEditor\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TTBody, TTCheckbox, TTContextMenuRow, TTEditableColumn, TTHeaderCheckbox, TTReorderableColumn, TTResizableColumn, TTRow, TTScrollableView, TTSelectableRow, TTSelectableRowDblClick, TTSortIcon, TTSortableColumn, TreeTable, TreeTableCellEditor, TreeTableModule, TreeTableService, TreeTableToggler };\n"],"mappings":"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,EAAE;EACFC,IAAI;EACJC,YAAY;EACZC,aAAa;EACb;AACJ;AACA;AACA;EACIrN,OAAO;EACP;AACJ;AACA;AACA;EACIsN,KAAK;EACL;AACJ;AACA;AACA;EACIC,UAAU;EACV;AACJ;AACA;AACA;EACI1N,UAAU;EACV;AACJ;AACA;AACA;EACID,eAAe;EACf;AACJ;AACA;AACA;EACI4N,UAAU;EACV;AACJ;AACA;AACA;EACIvG,IAAI,GAAG,KAAK;EACZ;AACJ;AACA;AACA;EACIwG,cAAc,GAAG,IAAI;EACrB;AACJ;AACA;AACA;EACIC,SAAS;EACT;AACJ;AACA;AACA;EACIrP,IAAI;EACJ;AACJ;AACA;AACA;EACIC,KAAK,GAAG,CAAC;EACT;AACJ;AACA;AACA;EACIE,SAAS,GAAG,CAAC;EACb;AACJ;AACA;AACA;EACIE,kBAAkB;EAClB;AACJ;AACA;AACA;EACID,mBAAmB,GAAG,IAAI;EAC1B;AACJ;AACA;AACA;EACIkP,iBAAiB,GAAG,QAAQ;EAC5B;AACJ;AACA;AACA;EACI9O,yBAAyB;EACzB;AACJ;AACA;AACA;EACIC,yBAAyB,GAAG,+BAA+B;EAC3D;AACJ;AACA;AACA;EACIG,qBAAqB;EACrB;AACJ;AACA;AACA;EACIC,sBAAsB;EACtB;AACJ;AACA;AACA;EACIH,iBAAiB,GAAG,IAAI;EACxB;AACJ;AACA;AACA;EACII,aAAa,GAAG,IAAI;EACpB;AACJ;AACA;AACA;EACIyO,gBAAgB,GAAG,CAAC;EACpB;AACJ;AACA;AACA;EACIC,QAAQ,GAAG,QAAQ;EACnB;AACJ;AACA;AACA;EACIC,eAAe,GAAG,IAAI;EACtB;AACJ;AACA;AACA;EACIC,UAAU;EACV;AACJ;AACA;AACA;EACIC,aAAa;EACb;AACJ;AACA;AACA;EACIC,oBAAoB;EACpB;AACJ;AACA;AACA;EACIC,wBAAwB,GAAG,UAAU;EACrC;AACJ;AACA;AACA;EACIC,OAAO;EACP;AACJ;AACA;AACA;EACIC,gBAAgB;EAChB;AACJ;AACA;AACA;EACIC,kBAAkB,GAAG,YAAY;EACjC;AACJ;AACA;AACA;EACIC,QAAQ;EACR;AACJ;AACA;AACA;EACIC,OAAO;EACP;AACJ;AACA;AACA;EACIpT,WAAW;EACX;AACJ;AACA;AACA;EACIqT,UAAU,GAAG,IAAI;EACjB;AACJ;AACA;AACA;EACIC,UAAU;EACV;AACJ;AACA;AACA;EACI/N,YAAY;EACZ;AACJ;AACA;AACA;EACIgO,aAAa;EACb;AACJ;AACA;AACA;EACI3H,qBAAqB;EACrB;AACJ;AACA;AACA;EACIG,oBAAoB;EACpB;AACJ;AACA;AACA;EACIyH,kBAAkB,GAAG,GAAG;EACxB;AACJ;AACA;AACA;EACIlO,WAAW;EACX;AACJ;AACA;AACA;EACID,aAAa;EACb;AACJ;AACA;AACA;EACIoO,gBAAgB;EAChB;AACJ;AACA;AACA;EACIC,gBAAgB,GAAG,KAAK;EACxB;AACJ;AACA;AACA;EACIC,kBAAkB;EAClB;AACJ;AACA;AACA;EACIC,WAAW;EACX;AACJ;AACA;AACA;EACIC,UAAU,GAAGA,CAACC,KAAK,EAAEC,IAAI,KAAKA,IAAI;EAClC;AACJ;AACA;AACA;EACIC,OAAO,GAAG,CAAC,CAAC;EACZ;AACJ;AACA;AACA;EACIC,kBAAkB;EAClB;AACJ;AACA;AACA;EACIC,WAAW,GAAG,GAAG;EACjB;AACJ;AACA;AACA;EACIC,UAAU,GAAG,SAAS;EACtB;AACJ;AACA;AACA;EACIC,YAAY;EACZ;AACJ;AACA;AACA;EACI,IAAIhR,YAAYA,CAAA,EAAG;IACf,OAAO,IAAI,CAACiR,aAAa;EAC7B;EACA,IAAIjR,YAAYA,CAACkR,GAAG,EAAE;IAClB,IAAI,CAACD,aAAa,GAAGC,GAAG;IACxB,IAAI,CAACrC,YAAY,CAACjB,oBAAoB,CAAC,IAAI,CAACqD,aAAa,CAAC;EAC9D;EACA;AACJ;AACA;AACA;EACI,IAAIE,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACC,UAAU;EAC1B;EACA,IAAID,SAASA,CAACD,GAAG,EAAE;IACf,IAAI,CAACE,UAAU,GAAGF,GAAG;EACzB;EACA;AACJ;AACA;AA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}