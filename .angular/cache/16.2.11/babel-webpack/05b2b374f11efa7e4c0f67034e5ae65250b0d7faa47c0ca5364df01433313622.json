{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AddFormationComponent = class AddFormationComponent {\n  constructor(formationService, messageService) {\n    this.formationService = formationService;\n    this.messageService = messageService;\n    this.formations = [];\n    this.formation = null;\n    this.formationDialog = false;\n    this.deleteFormationDialog = false;\n    this.selectedFormations = [];\n    this.submitted = false;\n    this.cols = [{\n      field: 'name',\n      header: 'Name'\n    }, {\n      field: 'description',\n      header: 'Description'\n    }, {\n      field: 'image',\n      header: 'Image'\n    }];\n  }\n  ngOnInit() {\n    this.loadFormations();\n  }\n  loadFormations() {\n    this.formationService.getFormations().subscribe(data => {\n      this.formations = data;\n    });\n  }\n  openNew() {\n    this.formation = {\n      name: '',\n      description: ''\n    };\n    this.submitted = false;\n    this.formationDialog = true;\n  }\n  deleteSelectedFormations() {\n    if (this.selectedFormations.length === 1) {\n      this.deleteFormation(this.selectedFormations[0]);\n    } else {\n      this.deleteFormationDialog = true;\n    }\n  }\n  confirmDeleteSelected() {\n    this.deleteFormationDialog = false;\n    const selectedIds = this.selectedFormations.map(formation => formation._id);\n    this.formationService.deleteFormations(selectedIds).subscribe(() => {\n      this.messageService.add({\n        severity: 'success',\n        summary: 'Successful',\n        detail: 'Formations Deleted',\n        life: 3000\n      });\n      this.loadFormations();\n      this.selectedFormations = [];\n    }, error => {\n      console.error(error);\n      // Handle error, display an error message, etc.\n    });\n  }\n\n  editFormation(formation) {\n    this.formation = {\n      ...formation\n    };\n    this.formationDialog = true;\n  }\n  deleteFormation(formation) {\n    this.deleteFormationDialog = true;\n    this.formation = {\n      ...formation\n    };\n  }\n  confirmDelete() {\n    this.deleteFormationDialog = false;\n    this.formationService.deleteFormation(this.formation._id).subscribe(() => {\n      this.messageService.add({\n        severity: 'success',\n        summary: 'Successful',\n        detail: 'Formation Deleted',\n        life: 3000\n      });\n      this.loadFormations();\n      this.formation = null;\n    });\n  }\n  hideDialog() {\n    this.formationDialog = false;\n    this.submitted = false;\n  }\n  saveFormation() {\n    this.submitted = true;\n    if (this.formation.name?.trim() && this.formation.description?.trim()) {\n      const formData = new FormData();\n      formData.append('name', this.formation.name);\n      formData.append('description', this.formation.description);\n      if (this.formation._id) {\n        formData.append('_id', this.formation._id);\n        this.formationService.updateFormationWithImage(this.formation._id, formData).subscribe(() => {\n          this.messageService.add({\n            severity: 'success',\n            summary: 'Successful',\n            detail: 'Formation Updated',\n            life: 3000\n          });\n          this.loadFormations();\n          this.formationDialog = false;\n          this.formation = null;\n        });\n      } else {\n        // Explicit conversion of string to Blob\n        const imageBlob = new Blob([this.formation.image], {\n          type: 'image/jpeg'\n        }); // Change 'image/jpeg' to the appropriate MIME type\n        formData.append('image', imageBlob);\n        this.formationService.addFormationWithImage(formData).subscribe(() => {\n          this.messageService.add({\n            severity: 'success',\n            summary: 'Successful',\n            detail: 'Formation Created',\n            life: 3000\n          });\n          this.loadFormations();\n          this.formationDialog = false;\n          this.formation = null;\n        });\n      }\n    }\n  }\n  onGlobalFilter(event) {\n    // Implement global filtering logic here\n  }\n  handleImageChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      this.formation.image = file;\n    }\n  }\n};\nAddFormationComponent = __decorate([Component({\n  selector: 'app-add-formation',\n  templateUrl: './add-formation.component.html',\n  styleUrls: ['./add-formation.component.scss']\n})], AddFormationComponent);","map":{"version":3,"names":["Component","AddFormationComponent","constructor","formationService","messageService","formations","formation","formationDialog","deleteFormationDialog","selectedFormations","submitted","cols","field","header","ngOnInit","loadFormations","getFormations","subscribe","data","openNew","name","description","deleteSelectedFormations","length","deleteFormation","confirmDeleteSelected","selectedIds","map","_id","deleteFormations","add","severity","summary","detail","life","error","console","editFormation","confirmDelete","hideDialog","saveFormation","trim","formData","FormData","append","updateFormationWithImage","imageBlob","Blob","image","type","addFormationWithImage","onGlobalFilter","event","handleImageChange","file","target","files","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\systemConfig\\me\\medin2024-tailwind\\src\\app\\demo\\components\\teacher\\formation\\add-formation\\add-formation.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MessageService } from 'primeng/api';\nimport { Formation } from 'src/app/demo/api/formation';\nimport { MessageService } from 'primeng/api';\n\n@Component({\n  selector: 'app-add-formation',\n  templateUrl: './add-formation.component.html',\n  styleUrls: ['./add-formation.component.scss']\n})\nexport class AddFormationComponent implements OnInit {\n  formations: Formation[] = [];\n  formation: Formation | null = null;\n  formationDialog: boolean = false;\n  deleteFormationDialog: boolean = false;\n  selectedFormations: Formation[] = [];\n  submitted: boolean = false;\n\n  cols: any[] = [\n    { field: 'name', header: 'Name' },\n    { field: 'description', header: 'Description' },\n    { field: 'image', header: 'Image' },\n  ];\n\n  constructor(private formationService: FormationService, private messageService: MessageService) {}\n\n  ngOnInit() {\n    this.loadFormations();\n  }\n\n  loadFormations() {\n    this.formationService.getFormations().subscribe((data) => {\n      this.formations = data;\n    });\n  }\n\n  openNew() {\n    this.formation = {\n      name: '',\n      description: '',\n    };\n    this.submitted = false;\n    this.formationDialog = true;\n  }\n\n  deleteSelectedFormations() {\n    if (this.selectedFormations.length === 1) {\n      this.deleteFormation(this.selectedFormations[0]);\n    } else {\n      this.deleteFormationDialog = true;\n    }\n  }\n\n  confirmDeleteSelected() {\n    this.deleteFormationDialog = false;\n    const selectedIds = this.selectedFormations.map(formation => formation._id);\n    this.formationService.deleteFormations(selectedIds).subscribe(\n      () => {\n        this.messageService.add({ severity: 'success', summary: 'Successful', detail: 'Formations Deleted', life: 3000 });\n        this.loadFormations();\n        this.selectedFormations = [];\n      },\n      (error) => {\n        console.error(error);\n        // Handle error, display an error message, etc.\n      }\n    );\n  }\n  \n  editFormation(formation: Formation) {\n    this.formation = { ...formation };\n    this.formationDialog = true;\n  }\n\n  deleteFormation(formation: Formation) {\n    this.deleteFormationDialog = true;\n    this.formation = { ...formation };\n  }\n\n  confirmDelete() {\n    this.deleteFormationDialog = false;\n    this.formationService.deleteFormation(this.formation._id).subscribe(() => {\n      this.messageService.add({ severity: 'success', summary: 'Successful', detail: 'Formation Deleted', life: 3000 });\n      this.loadFormations();\n      this.formation = null;\n    });\n  }\n\n  hideDialog() {\n    this.formationDialog = false;\n    this.submitted = false;\n  }\n\n  saveFormation() {\n    this.submitted = true;\n    if (this.formation.name?.trim() && this.formation.description?.trim()) {\n      const formData = new FormData();\n      formData.append('name', this.formation.name);\n      formData.append('description', this.formation.description);\n      \n      if (this.formation._id) {\n        formData.append('_id', this.formation._id);\n        this.formationService.updateFormationWithImage(this.formation._id, formData).subscribe(() => {\n          this.messageService.add({ severity: 'success', summary: 'Successful', detail: 'Formation Updated', life: 3000 });\n          this.loadFormations();\n          this.formationDialog = false;\n          this.formation = null;\n        });\n      } else {\n        // Explicit conversion of string to Blob\n        const imageBlob = new Blob([this.formation.image as string], { type: 'image/jpeg' }); // Change 'image/jpeg' to the appropriate MIME type\n        formData.append('image', imageBlob);\n        \n        this.formationService.addFormationWithImage(formData).subscribe(() => {\n          this.messageService.add({ severity: 'success', summary: 'Successful', detail: 'Formation Created', life: 3000 });\n          this.loadFormations();\n          this.formationDialog = false;\n          this.formation = null;\n        });\n      }\n    }\n  }\n  \n\n  onGlobalFilter(event: any) {\n    // Implement global filtering logic here\n  }\n\n  handleImageChange(event: any) {\n    const file = event.target.files[0];\n    if (file) {\n      this.formation.image = file;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}