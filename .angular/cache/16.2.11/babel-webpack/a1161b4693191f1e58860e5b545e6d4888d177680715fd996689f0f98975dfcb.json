{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction AuthDialogComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \"Email is required and must be valid\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthDialogComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class AuthDialogComponent {\n  constructor(fb) {\n    this.fb = fb;\n  }\n  ngOnInit() {\n    this.authForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      userType: ['student'] // Default to student\n    });\n  }\n\n  loginOrRegister() {\n    if (this.authForm.valid) {\n      const email = this.authForm.get('email').value;\n      const password = this.authForm.get('password').value;\n      const userType = this.authForm.get('userType').value;\n      // You can handle login/register logic here\n      console.log(\"Email:\", email);\n      console.log(\"Password:\", password);\n      console.log(\"User Type:\", userType);\n    } else {\n      // Handle form validation errors\n      // You can display error messages or perform other actions here\n    }\n  }\n  static #_ = this.ɵfac = function AuthDialogComponent_Factory(t) {\n    return new (t || AuthDialogComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthDialogComponent,\n    selectors: [[\"app-auth-dialog\"]],\n    decls: 24,\n    vars: 3,\n    consts: [[1, \"auth-dialog\", \"bg-white\", \"rounded-lg\", \"p-8\", \"max-w-md\", \"w-full\"], [1, \"text-2xl\", \"font-bold\", \"mb-4\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-4\"], [\"for\", \"email\", 1, \"block\", \"text-gray-700\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"mt-1\", \"block\", \"w-full\", \"rounded-md\", \"border-gray-300\", \"shadow-sm\", \"focus:border-indigo-300\", \"focus:ring\", \"focus:ring-indigo-200\", \"focus:ring-opacity-50\"], [\"class\", \"text-red-500 text-sm mt-1\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"block\", \"text-gray-700\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"mt-1\", \"block\", \"w-full\", \"rounded-md\", \"border-gray-300\", \"shadow-sm\", \"focus:border-indigo-300\", \"focus:ring\", \"focus:ring-indigo-200\", \"focus:ring-opacity-50\"], [\"for\", \"userType\", 1, \"block\", \"text-gray-700\"], [\"id\", \"userType\", \"formControlName\", \"userType\", 1, \"mt-1\", \"block\", \"w-full\", \"rounded-md\", \"border-gray-300\", \"shadow-sm\", \"focus:border-indigo-300\", \"focus:ring\", \"focus:ring-indigo-200\", \"focus:ring-opacity-50\"], [\"value\", \"student\"], [\"value\", \"teacher\"], [\"type\", \"submit\", 1, \"w-full\", \"bg-indigo-500\", \"text-white\", \"font-bold\", \"py-2\", \"px-4\", \"rounded\", \"hover:bg-indigo-700\", \"focus:outline-none\", \"focus:shadow-outline\"], [1, \"text-red-500\", \"text-sm\", \"mt-1\"]],\n    template: function AuthDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"Login or Register\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function AuthDialogComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.loginOrRegister();\n        });\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\", 4);\n        i0.ɵɵtext(6, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 5);\n        i0.ɵɵtemplate(8, AuthDialogComponent_div_8_Template, 2, 0, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 3)(10, \"label\", 7);\n        i0.ɵɵtext(11, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 8);\n        i0.ɵɵtemplate(13, AuthDialogComponent_div_13_Template, 2, 0, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 3)(15, \"label\", 9);\n        i0.ɵɵtext(16, \"User Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"select\", 10)(18, \"option\", 11);\n        i0.ɵɵtext(19, \"Student\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"option\", 12);\n        i0.ɵɵtext(21, \"Teacher\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(22, \"button\", 13);\n        i0.ɵɵtext(23, \" Submit \");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.authForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.authForm.get(\"email\").invalid && (ctx.authForm.get(\"email\").dirty || ctx.authForm.get(\"email\").touched));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.authForm.get(\"password\").invalid && (ctx.authForm.get(\"password\").dirty || ctx.authForm.get(\"password\").touched));\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.NgIf],\n    styles: [\"/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhdXRoLWRpYWxvZy5jb21wb25lbnQuc2NzcyJ9 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZGVtby9jb21wb25lbnRzL3ZpZXcvYXV0aC1kaWFsb2cvYXV0aC1kaWFsb2cuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHdLQUF3SyIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","AuthDialogComponent","constructor","fb","ngOnInit","authForm","group","email","required","password","userType","loginOrRegister","valid","get","value","console","log","_","ɵɵdirectiveInject","i1","FormBuilder","_2","selectors","decls","vars","consts","template","AuthDialogComponent_Template","rf","ctx","ɵɵlistener","AuthDialogComponent_Template_form_ngSubmit_3_listener","ɵɵelement","ɵɵtemplate","AuthDialogComponent_div_8_Template","AuthDialogComponent_div_13_Template","ɵɵadvance","ɵɵproperty","invalid","dirty","touched"],"sources":["D:\\systemConfig\\me\\medin2024-tailwind\\src\\app\\demo\\components\\view\\auth-dialog\\auth-dialog.component.ts","D:\\systemConfig\\me\\medin2024-tailwind\\src\\app\\demo\\components\\view\\auth-dialog\\auth-dialog.component.html"],"sourcesContent":["// auth-dialog.component.ts\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-auth-dialog',\n  templateUrl: './auth-dialog.component.html',\n  styleUrls: ['./auth-dialog.component.scss']\n})\nexport class AuthDialogComponent implements OnInit {\n  authForm: FormGroup;\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.authForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      userType: ['student'] // Default to student\n    });\n  }\n\n  loginOrRegister(): void {\n    if (this.authForm.valid) {\n      const email = this.authForm.get('email').value;\n      const password = this.authForm.get('password').value;\n      const userType = this.authForm.get('userType').value;\n\n      // You can handle login/register logic here\n      console.log(\"Email:\", email);\n      console.log(\"Password:\", password);\n      console.log(\"User Type:\", userType);\n    } else {\n      // Handle form validation errors\n      // You can display error messages or perform other actions here\n    }\n  }\n}\n","<!-- auth-dialog.component.html -->\n\n<div class=\"auth-dialog bg-white rounded-lg p-8 max-w-md w-full\">\n  <h2 class=\"text-2xl font-bold mb-4\">Login or Register</h2>\n\n  <form [formGroup]=\"authForm\" (ngSubmit)=\"loginOrRegister()\">\n    \n    <!-- Email Input -->\n    <div class=\"mb-4\">\n      <label for=\"email\" class=\"block text-gray-700\">Email</label>\n      <input type=\"email\" id=\"email\" formControlName=\"email\"\n             class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\">\n      <div *ngIf=\"authForm.get('email').invalid && (authForm.get('email').dirty || authForm.get('email').touched)\"\n           class=\"text-red-500 text-sm mt-1\">Email is required and must be valid</div>\n    </div>\n    \n    <!-- Password Input -->\n    <div class=\"mb-4\">\n      <label for=\"password\" class=\"block text-gray-700\">Password</label>\n      <input type=\"password\" id=\"password\" formControlName=\"password\"\n             class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\">\n      <div *ngIf=\"authForm.get('password').invalid && (authForm.get('password').dirty || authForm.get('password').touched)\"\n           class=\"text-red-500 text-sm mt-1\">Password is required</div>\n    </div>\n    \n    <!-- User Type Select -->\n    <div class=\"mb-4\">\n      <label for=\"userType\" class=\"block text-gray-700\">User Type</label>\n      <select id=\"userType\" formControlName=\"userType\"\n              class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\">\n        <option value=\"student\">Student</option>\n        <option value=\"teacher\">Teacher</option>\n      </select>\n    </div>\n\n    <!-- Submit Button -->\n    <button type=\"submit\"\n            class=\"w-full bg-indigo-500 text-white font-bold py-2 px-4 rounded hover:bg-indigo-700 focus:outline-none focus:shadow-outline\">\n      Submit\n    </button>\n  </form>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}