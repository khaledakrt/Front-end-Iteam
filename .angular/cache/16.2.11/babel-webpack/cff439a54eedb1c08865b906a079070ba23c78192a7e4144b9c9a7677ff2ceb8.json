{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener, ViewEncapsulation } from '@angular/core';\nexport let SectionsViewComponent = class SectionsViewComponent {\n  constructor(layoutService, router, blogService,\n  // Inject the BlogService\n  route // Inject ActivatedRoute\n  ) {\n    this.layoutService = layoutService;\n    this.router = router;\n    this.blogService = blogService;\n    this.route = route;\n    this.isNavbarGray = false;\n    this.isResponsiveMenuGray = false;\n    this.blogContent = ''; // Assuming the content is a string\n    this.relatedArticles = []; // Change this type based on your blog model\n  }\n\n  ngOnInit() {\n    // Extract blog ID from the route parameters\n    const blogId = this.route.snapshot.paramMap.get('id');\n    this.fetchBlogContent('65c4caa8924434de49249681');\n    this.fetchAllBlogs();\n  }\n  onScroll() {\n    this.isNavbarGray = window.scrollY > 20; // Adjust the scroll position threshold\n  }\n\n  toggleNavbarColor() {\n    this.isNavbarGray = true;\n  }\n  fetchBlogContent(blogId) {\n    this.blogService.getBlogContent(blogId).subscribe(content => {\n      this.blogContent = content || '';\n    }, error => {\n      console.error('Error fetching blog content:', error);\n    });\n  }\n  fetchAllBlogs() {\n    this.blogService.getAllBlogs().subscribe(blogs => {\n      for (const blog of blogs) {\n        this.extractBlogInfo(blog);\n      }\n    }, error => {\n      console.error('Error fetching blogs:', error);\n    });\n  }\n  extractBlogInfo(blog) {\n    // Extract data from HTML content\n    const doc = new DOMParser().parseFromString(blog.content, 'text/html');\n    const title = doc.querySelector('h1')?.innerText || 'No Title';\n    const imageSrc = doc.querySelector('img')?.getAttribute('src') || '';\n    // Add to related articles\n    this.relatedArticles.push({\n      title: title,\n      image: imageSrc,\n      content: blog.content // You can include the whole content if needed\n    });\n  }\n};\n\n__decorate([HostListener('window:scroll', ['$event'])], SectionsViewComponent.prototype, \"onScroll\", null);\nSectionsViewComponent = __decorate([Component({\n  selector: 'app-sections-view',\n  templateUrl: './sections-view.component.html',\n  styleUrls: ['./sections-view.component.scss'],\n  encapsulation: ViewEncapsulation.None // Add this line\n})], SectionsViewComponent);","map":{"version":3,"names":["Component","HostListener","ViewEncapsulation","SectionsViewComponent","constructor","layoutService","router","blogService","route","isNavbarGray","isResponsiveMenuGray","blogContent","relatedArticles","ngOnInit","blogId","snapshot","paramMap","get","fetchBlogContent","fetchAllBlogs","onScroll","window","scrollY","toggleNavbarColor","getBlogContent","subscribe","content","error","console","getAllBlogs","blogs","blog","extractBlogInfo","doc","DOMParser","parseFromString","title","querySelector","innerText","imageSrc","getAttribute","push","image","__decorate","selector","templateUrl","styleUrls","encapsulation","None"],"sources":["D:\\systemConfig\\me\\medin2024-tailwind\\src\\app\\demo\\components\\view\\sections-view\\sections-view.component.ts"],"sourcesContent":["import { Component, HostListener, OnInit, ViewEncapsulation } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BlogService } from 'src/app/demo/service/blog.service';\nimport { LayoutService } from 'src/app/layout/service/app.layout.service';\n\n@Component({\n  selector: 'app-sections-view',\n  templateUrl: './sections-view.component.html',\n  styleUrls: ['./sections-view.component.scss'],\n  encapsulation: ViewEncapsulation.None  // Add this line\n\n})\nexport class SectionsViewComponent implements OnInit {\n  isNavbarGray = false;\n  isResponsiveMenuGray: boolean = false;\n  blogContent: string = ''; // Assuming the content is a string\n  relatedArticles: any[] = []; // Change this type based on your blog model\n\n  constructor(\n    public layoutService: LayoutService,\n    public router: Router,\n    private blogService: BlogService ,// Inject the BlogService\n    private route: ActivatedRoute // Inject ActivatedRoute\n\n  ) {}\n\n  ngOnInit() {\n    // Extract blog ID from the route parameters\n    const blogId = this.route.snapshot.paramMap.get('id');\n    this.fetchBlogContent('65c4caa8924434de49249681');\n    this.fetchAllBlogs();\n\n  }\n\n  @HostListener('window:scroll', ['$event'])\n  onScroll() {\n    this.isNavbarGray = window.scrollY > 20; // Adjust the scroll position threshold\n  }\n\n  toggleNavbarColor() {\n    this.isNavbarGray = true;\n  }\n\n  fetchBlogContent(blogId: string) {\n    this.blogService.getBlogContent(blogId).subscribe(\n      (content: string) => {\n        this.blogContent = content || '';\n      },\n      (error) => {\n        console.error('Error fetching blog content:', error);\n      }\n    );\n  }\n  fetchAllBlogs() {\n    this.blogService.getAllBlogs().subscribe(\n      (blogs: any[]) => {\n        for (const blog of blogs) {\n          this.extractBlogInfo(blog);\n        }\n      },\n      (error) => {\n        console.error('Error fetching blogs:', error);\n      }\n    );\n  }\n  extractBlogInfo(blog: any) {\n    // Extract data from HTML content\n    const doc = new DOMParser().parseFromString(blog.content, 'text/html');\n    const title = doc.querySelector('h1')?.innerText || 'No Title';\n    const imageSrc = doc.querySelector('img')?.getAttribute('src') || '';\n\n    // Add to related articles\n    this.relatedArticles.push({\n      title: title,\n      image: imageSrc,\n      content: blog.content, // You can include the whole content if needed\n    });\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAUC,iBAAiB,QAAQ,eAAe;AAY3E,WAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAMhCC,YACSC,aAA4B,EAC5BC,MAAc,EACbC,WAAwB;EAAE;EAC1BC,KAAqB,CAAC;EAAA,E;IAHvB,KAAAH,aAAa,GAAbA,aAAa;IACb,KAAAC,MAAM,GAANA,MAAM;IACL,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,KAAK,GAALA,KAAK;IATf,KAAAC,YAAY,GAAG,KAAK;IACpB,KAAAC,oBAAoB,GAAY,KAAK;IACrC,KAAAC,WAAW,GAAW,EAAE,CAAC,CAAC;IAC1B,KAAAC,eAAe,GAAU,EAAE,CAAC,CAAC;EAQ1B;;EAEHC,QAAQA,CAAA;IACN;IACA,MAAMC,MAAM,GAAG,IAAI,CAACN,KAAK,CAACO,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IACrD,IAAI,CAACC,gBAAgB,CAAC,0BAA0B,CAAC;IACjD,IAAI,CAACC,aAAa,EAAE;EAEtB;EAGAC,QAAQA,CAAA;IACN,IAAI,CAACX,YAAY,GAAGY,MAAM,CAACC,OAAO,GAAG,EAAE,CAAC,CAAC;EAC3C;;EAEAC,iBAAiBA,CAAA;IACf,IAAI,CAACd,YAAY,GAAG,IAAI;EAC1B;EAEAS,gBAAgBA,CAACJ,MAAc;IAC7B,IAAI,CAACP,WAAW,CAACiB,cAAc,CAACV,MAAM,CAAC,CAACW,SAAS,CAC9CC,OAAe,IAAI;MAClB,IAAI,CAACf,WAAW,GAAGe,OAAO,IAAI,EAAE;IAClC,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD,CAAC,CACF;EACH;EACAR,aAAaA,CAAA;IACX,IAAI,CAACZ,WAAW,CAACsB,WAAW,EAAE,CAACJ,SAAS,CACrCK,KAAY,IAAI;MACf,KAAK,MAAMC,IAAI,IAAID,KAAK,EAAE;QACxB,IAAI,CAACE,eAAe,CAACD,IAAI,CAAC;;IAE9B,CAAC,EACAJ,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,CACF;EACH;EACAK,eAAeA,CAACD,IAAS;IACvB;IACA,MAAME,GAAG,GAAG,IAAIC,SAAS,EAAE,CAACC,eAAe,CAACJ,IAAI,CAACL,OAAO,EAAE,WAAW,CAAC;IACtE,MAAMU,KAAK,GAAGH,GAAG,CAACI,aAAa,CAAC,IAAI,CAAC,EAAEC,SAAS,IAAI,UAAU;IAC9D,MAAMC,QAAQ,GAAGN,GAAG,CAACI,aAAa,CAAC,KAAK,CAAC,EAAEG,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE;IAEpE;IACA,IAAI,CAAC5B,eAAe,CAAC6B,IAAI,CAAC;MACxBL,KAAK,EAAEA,KAAK;MACZM,KAAK,EAAEH,QAAQ;MACfb,OAAO,EAAEK,IAAI,CAACL,OAAO,CAAE;KACxB,CAAC;EACJ;CAED;;AA5CCiB,UAAA,EADC1C,YAAY,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC,CAAC,C,oDAGzC;AAzBUE,qBAAqB,GAAAwC,UAAA,EAPjC3C,SAAS,CAAC;EACT4C,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,gCAAgC,CAAC;EAC7CC,aAAa,EAAE7C,iBAAiB,CAAC8C,IAAI,CAAE;CAExC,CAAC,C,EACW7C,qBAAqB,CAmEjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}