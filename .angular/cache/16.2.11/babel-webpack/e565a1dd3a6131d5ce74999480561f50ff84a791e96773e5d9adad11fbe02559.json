{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TeamMemberService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3002/api/team'; // Update the URL accordingly\n  }\n\n  getTeamMembers() {\n    return this.http.get(this.apiUrl);\n  }\n  updateTeamMember(id, teamMember) {\n    // You might want to remove the image property before sending it to the server\n    const {\n      image,\n      ...dataWithoutImage\n    } = teamMember;\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.put(url, dataWithoutImage);\n  }\n  updateTeamMember(id, teamMember) {\n    return this.http.put(url, dataWithoutImage);\n  }\n  deleteTeamMember(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete(url);\n  }\n  addTeamMember(formData) {\n    return this.http.post(this.apiUrl, formData);\n  }\n  updateTeamMemberWithImage(id, formData) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.put(url, formData);\n  }\n  addTeamMemberWithImage(formData) {\n    return this.http.post(this.apiUrl, formData);\n  }\n  // New method to delete multiple team members\n  deleteTeamMembers(ids) {\n    const url = `${this.apiUrl}/delete-multiple`; // Adjust the URL if needed\n    const options = {\n      body: {\n        ids\n      } // Pass the array of ids in the request body\n    };\n\n    return this.http.delete(url, options);\n  }\n  static #_ = this.ɵfac = function TeamMemberService_Factory(t) {\n    return new (t || TeamMemberService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TeamMemberService,\n    factory: TeamMemberService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["TeamMemberService","constructor","http","apiUrl","getTeamMembers","get","updateTeamMember","id","teamMember","image","dataWithoutImage","url","put","deleteTeamMember","delete","addTeamMember","formData","post","updateTeamMemberWithImage","addTeamMemberWithImage","deleteTeamMembers","ids","options","body","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\systemConfig\\me\\medin2024-tailwind\\src\\app\\demo\\service\\TeamMember.Service.ts"],"sourcesContent":["// team-member.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { TeamMember } from '../api/teamMember';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TeamMemberService {\r\n  private apiUrl = 'http://localhost:3002/api/team'; // Update the URL accordingly\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getTeamMembers(): Observable<TeamMember[]> {\r\n    return this.http.get<TeamMember[]>(this.apiUrl);\r\n  }\r\n\r\n  updateTeamMember(id: string, teamMember: TeamMember): Observable<TeamMember> {\r\n    // You might want to remove the image property before sending it to the server\r\n    const { image, ...dataWithoutImage } = teamMember;\r\n\r\n    const url = `${this.apiUrl}/${id}`;\r\n    return this.http.put<TeamMember>(url, dataWithoutImage);\r\n  }\r\n  updateTeamMember(id: string, teamMember: TeamMember): Observable<TeamMember[]> {\r\n    return this.http.put<TeamMember>(url, dataWithoutImage);\r\n  }\r\n  deleteTeamMember(id: string): Observable<void> {\r\n    const url = `${this.apiUrl}/${id}`;\r\n    return this.http.delete<void>(url);\r\n  }\r\n\r\n  addTeamMember(formData: FormData): Observable<TeamMember> {\r\n    return this.http.post<TeamMember>(this.apiUrl, formData);\r\n  }\r\n\r\n  updateTeamMemberWithImage(id: string, formData: FormData): Observable<TeamMember> {\r\n    const url = `${this.apiUrl}/${id}`;\r\n    return this.http.put<TeamMember>(url, formData);\r\n  }\r\n\r\n  addTeamMemberWithImage(formData: FormData): Observable<TeamMember> {\r\n    return this.http.post<TeamMember>(this.apiUrl, formData);\r\n  }\r\n\r\n  // New method to delete multiple team members\r\n  deleteTeamMembers(ids: string[]): Observable<void> {\r\n    const url = `${this.apiUrl}/delete-multiple`; // Adjust the URL if needed\r\n    const options = {\r\n      body: { ids }, // Pass the array of ids in the request body\r\n    };\r\n\r\n    return this.http.delete<void>(url, options);\r\n  }\r\n}\r\n"],"mappings":";;AASA,OAAM,MAAOA,iBAAiB;EAG5BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,gCAAgC,CAAC,CAAC;EAEZ;;EAEvCC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAe,IAAI,CAACF,MAAM,CAAC;EACjD;EAEAG,gBAAgBA,CAACC,EAAU,EAAEC,UAAsB;IACjD;IACA,MAAM;MAAEC,KAAK;MAAE,GAAGC;IAAgB,CAAE,GAAGF,UAAU;IAEjD,MAAMG,GAAG,GAAG,GAAG,IAAI,CAACR,MAAM,IAAII,EAAE,EAAE;IAClC,OAAO,IAAI,CAACL,IAAI,CAACU,GAAG,CAAaD,GAAG,EAAED,gBAAgB,CAAC;EACzD;EACAJ,gBAAgBA,CAACC,EAAU,EAAEC,UAAsB;IACjD,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAaD,GAAG,EAAED,gBAAgB,CAAC;EACzD;EACAG,gBAAgBA,CAACN,EAAU;IACzB,MAAMI,GAAG,GAAG,GAAG,IAAI,CAACR,MAAM,IAAII,EAAE,EAAE;IAClC,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAOH,GAAG,CAAC;EACpC;EAEAI,aAAaA,CAACC,QAAkB;IAC9B,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAa,IAAI,CAACd,MAAM,EAAEa,QAAQ,CAAC;EAC1D;EAEAE,yBAAyBA,CAACX,EAAU,EAAES,QAAkB;IACtD,MAAML,GAAG,GAAG,GAAG,IAAI,CAACR,MAAM,IAAII,EAAE,EAAE;IAClC,OAAO,IAAI,CAACL,IAAI,CAACU,GAAG,CAAaD,GAAG,EAAEK,QAAQ,CAAC;EACjD;EAEAG,sBAAsBA,CAACH,QAAkB;IACvC,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAa,IAAI,CAACd,MAAM,EAAEa,QAAQ,CAAC;EAC1D;EAEA;EACAI,iBAAiBA,CAACC,GAAa;IAC7B,MAAMV,GAAG,GAAG,GAAG,IAAI,CAACR,MAAM,kBAAkB,CAAC,CAAC;IAC9C,MAAMmB,OAAO,GAAG;MACdC,IAAI,EAAE;QAAEF;MAAG,CAAE,CAAE;KAChB;;IAED,OAAO,IAAI,CAACnB,IAAI,CAACY,MAAM,CAAOH,GAAG,EAAEW,OAAO,CAAC;EAC7C;EAAC,QAAAE,CAAA,G;qBA7CUxB,iBAAiB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjB7B,iBAAiB;IAAA8B,OAAA,EAAjB9B,iBAAiB,CAAA+B,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}