{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let LoginComponent = class LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.email = '';\n    this.password = '';\n    this.rememberMe = false;\n  }\n  login() {\n    this.authService.login(this.email, this.password).subscribe(response => {\n      // Assuming the response contains a token upon successful login\n      const token = response.token;\n      // Store token in local storage or session storage for future requests\n      localStorage.setItem('token', token);\n      // Redirect to home page or any other desired route\n      this.router.navigate(['/']);\n    }, error => {\n      // Handle login error\n      console.error(error);\n      // Optionally display error message to user\n    });\n  }\n};\n\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","LoginComponent","constructor","authService","router","email","password","rememberMe","login","subscribe","response","token","localStorage","setItem","navigate","error","console","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\systemConfig\\me\\medin2024-tailwind\\src\\app\\demo\\components\\auth\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  email: string = '';\n  password: string = '';\n  rememberMe: boolean = false;\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  login() {\n    this.authService.login(this.email, this.password).subscribe((response: any) => {\n      // Assuming the response contains a token upon successful login\n      const token = response.token;\n      // Store token in local storage or session storage for future requests\n      localStorage.setItem('token', token);\n      // Redirect to home page or any other desired route\n      this.router.navigate(['/']);\n    }, (error: any) => {\n      // Handle login error\n      console.error(error);\n      // Optionally display error message to user\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AASlC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAKzBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAJ5D,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,UAAU,GAAY,KAAK;EAE4C;EAEvEC,KAAKA,CAAA;IACH,IAAI,CAACL,WAAW,CAACK,KAAK,CAAC,IAAI,CAACH,KAAK,EAAE,IAAI,CAACC,QAAQ,CAAC,CAACG,SAAS,CAAEC,QAAa,IAAI;MAC5E;MACA,MAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAK;MAC5B;MACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;MACpC;MACA,IAAI,CAACP,MAAM,CAACU,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,EAAGC,KAAU,IAAI;MAChB;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB;IACF,CAAC,CAAC;EACJ;CACD;;AArBYd,cAAc,GAAAgB,UAAA,EAL1BjB,SAAS,CAAC;EACTkB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWnB,cAAc,CAqB1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}