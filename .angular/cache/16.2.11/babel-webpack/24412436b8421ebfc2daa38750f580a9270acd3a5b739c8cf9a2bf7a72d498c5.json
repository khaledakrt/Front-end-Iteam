{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let LayoutService = /*#__PURE__*/(() => {\n  class LayoutService {\n    constructor() {\n      this.config = {\n        ripple: false,\n        inputStyle: 'outlined',\n        menuMode: 'static',\n        colorScheme: 'light',\n        theme: 'lara-light-indigo',\n        scale: 14\n      };\n      this.state = {\n        staticMenuDesktopInactive: false,\n        overlayMenuActive: false,\n        profileSidebarVisible: false,\n        configSidebarVisible: false,\n        staticMenuMobileActive: false,\n        menuHoverActive: false\n      };\n      this.configUpdate = new Subject();\n      this.overlayOpen = new Subject();\n      this.configUpdate$ = this.configUpdate.asObservable();\n      this.overlayOpen$ = this.overlayOpen.asObservable();\n    }\n    onMenuToggle() {\n      if (this.isOverlay()) {\n        this.state.overlayMenuActive = !this.state.overlayMenuActive;\n        if (this.state.overlayMenuActive) {\n          this.overlayOpen.next(null);\n        }\n      }\n      if (this.isDesktop()) {\n        this.state.staticMenuDesktopInactive = !this.state.staticMenuDesktopInactive;\n      } else {\n        this.state.staticMenuMobileActive = !this.state.staticMenuMobileActive;\n        if (this.state.staticMenuMobileActive) {\n          this.overlayOpen.next(null);\n        }\n      }\n    }\n    showProfileSidebar() {\n      this.state.profileSidebarVisible = !this.state.profileSidebarVisible;\n      if (this.state.profileSidebarVisible) {\n        this.overlayOpen.next(null);\n      }\n    }\n    showConfigSidebar() {\n      this.state.configSidebarVisible = true;\n    }\n    isOverlay() {\n      return this.config.menuMode === 'overlay';\n    }\n    isDesktop() {\n      return window.innerWidth > 991;\n    }\n    isMobile() {\n      return !this.isDesktop();\n    }\n    onConfigUpdate() {\n      this.configUpdate.next(this.config);\n    }\n    static #_ = this.ɵfac = function LayoutService_Factory(t) {\n      return new (t || LayoutService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LayoutService,\n      factory: LayoutService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return LayoutService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}