{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthAdminService {\n  constructor(http) {\n    this.http = http;\n    this.role = 'admin';\n    this.helper = new JwtHelperService();\n    this.url = 'http://127.0.0.1:3000/';\n    this.users = [];\n  }\n  login(credentials) {\n    console.log(credentials);\n    return this.http.post(`${this.url}admin/login`, credentials);\n  }\n  saveDataAdmin(token) {\n    let decodeToken = this.helper.decodeToken(token);\n    console.log(decodeToken);\n    localStorage.setItem('token_admin', token);\n    localStorage.setItem('role', this.role);\n    localStorage.setItem('nom', decodeToken.nom);\n  }\n  adminLoggedIn() {\n    let token = localStorage.getItem('token_admin');\n    if (!token) {\n      return false;\n    }\n    if (this.helper.isTokenExpired(token)) {\n      return false;\n    }\n    return true;\n  }\n  static #_ = this.ɵfac = function AuthAdminService_Factory(t) {\n    return new (t || AuthAdminService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthAdminService,\n    factory: AuthAdminService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["JwtHelperService","AuthAdminService","constructor","http","role","helper","url","users","login","credentials","console","log","post","saveDataAdmin","token","decodeToken","localStorage","setItem","nom","adminLoggedIn","getItem","isTokenExpired","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\PFE\\API\\application\\virtual-Iteam\\src\\app\\demo\\service\\auth-admin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthAdminService {\n  role='admin'\nhelper = new  JwtHelperService(); \n\n  constructor(private http: HttpClient) { }\n  private url = 'http://127.0.0.1:3000/';\n   \n \n  login(credentials: { email: string, password: string }): Observable<any> {\n    console.log(credentials)\n    return this.http.post<any>(`${this.url}admin/login`, credentials);\n  }\n  saveDataAdmin(token:any){\n    let decodeToken = this.helper.decodeToken(token)\nconsole.log(decodeToken)\n    localStorage.setItem('token_admin',token);\n    localStorage.setItem('role', this.role);\n        localStorage.setItem('nom',decodeToken.nom)\n  }\n\n  adminLoggedIn(){\n    let token:any=localStorage.getItem('token_admin');\n    if (!token){\n      return false\n    }\n    if(this.helper.isTokenExpired(token)){\n   return false\n    }\n    return true \n  }\n  users:any[] = [];\n \n\n \n\n}"],"mappings":"AAGA,SAASA,gBAAgB,QAAQ,oBAAoB;;;AAIrD,OAAM,MAAOC,gBAAgB;EAI3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB,KAAAC,IAAI,GAAC,OAAO;IACd,KAAAC,MAAM,GAAG,IAAKL,gBAAgB,EAAE;IAGtB,KAAAM,GAAG,GAAG,wBAAwB;IAyBtC,KAAAC,KAAK,GAAS,EAAE;EA1BwB;EAIxCC,KAAKA,CAACC,WAAgD;IACpDC,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;IACxB,OAAO,IAAI,CAACN,IAAI,CAACS,IAAI,CAAM,GAAG,IAAI,CAACN,GAAG,aAAa,EAAEG,WAAW,CAAC;EACnE;EACAI,aAAaA,CAACC,KAAS;IACrB,IAAIC,WAAW,GAAG,IAAI,CAACV,MAAM,CAACU,WAAW,CAACD,KAAK,CAAC;IACpDJ,OAAO,CAACC,GAAG,CAACI,WAAW,CAAC;IACpBC,YAAY,CAACC,OAAO,CAAC,aAAa,EAACH,KAAK,CAAC;IACzCE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAE,IAAI,CAACb,IAAI,CAAC;IACnCY,YAAY,CAACC,OAAO,CAAC,KAAK,EAACF,WAAW,CAACG,GAAG,CAAC;EACjD;EAEAC,aAAaA,CAAA;IACX,IAAIL,KAAK,GAAKE,YAAY,CAACI,OAAO,CAAC,aAAa,CAAC;IACjD,IAAI,CAACN,KAAK,EAAC;MACT,OAAO,KAAK;;IAEd,IAAG,IAAI,CAACT,MAAM,CAACgB,cAAc,CAACP,KAAK,CAAC,EAAC;MACtC,OAAO,KAAK;;IAEX,OAAO,IAAI;EACb;EAAC,QAAAQ,CAAA,G;qBA7BUrB,gBAAgB,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhB1B,gBAAgB;IAAA2B,OAAA,EAAhB3B,gBAAgB,CAAA4B,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}