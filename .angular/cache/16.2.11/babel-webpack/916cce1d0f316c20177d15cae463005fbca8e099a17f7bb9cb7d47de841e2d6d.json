{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MessageService } from 'primeng/api';\nimport { TeamMemberService } from 'src/app/demo/service/TeamMember.Service';\nexport let CrudComponent = class CrudComponent {\n  constructor(teamMemberService, messageService, imageService) {\n    this.teamMemberService = teamMemberService;\n    this.messageService = messageService;\n    this.imageService = imageService;\n    this.teamMembers = [];\n    this.teamMember = null;\n    this.teamMemberDialog = false;\n    this.deleteTeamMemberDialog = false;\n    this.deleteTeamMembersDialog = false;\n    this.selectedTeamMembers = [];\n    this.submitted = false;\n    this.cols = [{\n      field: 'name',\n      header: 'Name'\n    }, {\n      field: 'position',\n      header: 'Position'\n    }, {\n      field: 'image',\n      header: 'Image'\n    }];\n  }\n  ngOnInit() {\n    this.teamMemberService.getTeamMembers().subscribe(data => this.teamMembers = data);\n  }\n  openNew() {\n    this.teamMember = {};\n    this.submitted = false;\n    this.teamMemberDialog = true;\n  }\n  deleteSelectedTeamMembers() {\n    this.deleteTeamMembersDialog = true;\n  }\n  editTeamMember(teamMember) {\n    this.teamMember = {\n      ...teamMember\n    };\n    this.teamMemberDialog = true;\n  }\n  deleteTeamMember(teamMember) {\n    this.deleteTeamMemberDialog = true;\n    this.teamMember = {\n      ...teamMember\n    };\n  }\n  confirmDeleteSelected() {\n    this.deleteTeamMembersDialog = false;\n    this.teamMembers = this.teamMembers.filter(val => !this.selectedTeamMembers.includes(val));\n    this.messageService.add({\n      severity: 'success',\n      summary: 'Successful',\n      detail: 'Team Members Deleted',\n      life: 3000\n    });\n    this.selectedTeamMembers = [];\n  }\n  confirmDelete() {\n    this.deleteTeamMemberDialog = false;\n    this.teamMembers = this.teamMembers.filter(val => val._id !== this.teamMember._id);\n    this.messageService.add({\n      severity: 'success',\n      summary: 'Successful',\n      detail: 'Team Member Deleted',\n      life: 3000\n    });\n    this.teamMember = {};\n  }\n  hideDialog() {\n    this.teamMemberDialog = false;\n    this.submitted = false;\n  }\n  saveTeamMember() {\n    this.submitted = true;\n    if (this.teamMember.name?.trim() && this.teamMember.position?.trim()) {\n      if (this.teamMember._id) {\n        this.teamMemberService.updateTeamMember(this.teamMember._id, this.teamMember).subscribe(() => {\n          this.messageService.add({\n            severity: 'success',\n            summary: 'Successful',\n            detail: 'Team Member Updated',\n            life: 3000\n          });\n        });\n      } else {\n        this.teamMemberService.addTeamMember(this.teamMember).subscribe(() => {\n          this.messageService.add({\n            severity: 'success',\n            summary: 'Successful',\n            detail: 'Team Member Created',\n            life: 3000\n          });\n        });\n      }\n      this.teamMembers = [...this.teamMembers];\n      this.teamMemberDialog = false;\n      this.teamMember = {};\n    }\n  }\n  findIndexById(id) {\n    let index = -1;\n    for (let i = 0; i < this.teamMembers.length; i++) {\n      if (this.teamMembers[i]._id === id) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  }\n  createId() {\n    let id = '';\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 5; i++) {\n      id += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return id;\n  }\n  onGlobalFilter(table, event) {\n    table.filterGlobal(event.target.value, 'contains');\n  }\n};\nCrudComponent = __decorate([Component({\n  templateUrl: './crud.component.html',\n  providers: [MessageService, TeamMemberService]\n})], CrudComponent);","map":{"version":3,"names":["Component","MessageService","TeamMemberService","CrudComponent","constructor","teamMemberService","messageService","imageService","teamMembers","teamMember","teamMemberDialog","deleteTeamMemberDialog","deleteTeamMembersDialog","selectedTeamMembers","submitted","cols","field","header","ngOnInit","getTeamMembers","subscribe","data","openNew","deleteSelectedTeamMembers","editTeamMember","deleteTeamMember","confirmDeleteSelected","filter","val","includes","add","severity","summary","detail","life","confirmDelete","_id","hideDialog","saveTeamMember","name","trim","position","updateTeamMember","addTeamMember","findIndexById","id","index","i","length","createId","chars","charAt","Math","floor","random","onGlobalFilter","table","event","filterGlobal","target","value","__decorate","templateUrl","providers"],"sources":["D:\\systemConfig\\me\\sakai-ng-16.0.0\\src\\app\\demo\\components\\pages\\crud\\crud.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { TeamMember } from 'src/app/demo/api/teamMember';\nimport { MessageService } from 'primeng/api';\nimport { Table } from 'primeng/table';\nimport { TeamMemberService } from 'src/app/demo/service/TeamMember.Service';\n\n@Component({\n  templateUrl: './crud.component.html',\n  providers: [MessageService, TeamMemberService],\n})\nexport class CrudComponent implements OnInit {\n  teamMembers: TeamMember[] = [];\n  teamMember: TeamMember | null = null;\n  teamMemberDialog: boolean = false;\n  deleteTeamMemberDialog: boolean = false;\n  deleteTeamMembersDialog: boolean = false;\n  selectedTeamMembers: TeamMember[] = [];\n  submitted: boolean = false;\n\n  cols: any[] = [\n    { field: 'name', header: 'Name' },\n    { field: 'position', header: 'Position' },\n    { field: 'image', header: 'Image' },\n  ];\n\n  constructor(private teamMemberService: TeamMemberService, private messageService: MessageService ,private imageService) {}\n\n  ngOnInit() {\n    this.teamMemberService.getTeamMembers().subscribe((data) => (this.teamMembers = data));\n  }\n\n  openNew() {\n    this.teamMember = {};\n    this.submitted = false;\n    this.teamMemberDialog = true;\n  }\n\n  deleteSelectedTeamMembers() {\n    this.deleteTeamMembersDialog = true;\n  }\n\n  editTeamMember(teamMember: TeamMember) {\n    this.teamMember = { ...teamMember };\n    this.teamMemberDialog = true;\n  }\n\n  deleteTeamMember(teamMember: TeamMember) {\n    this.deleteTeamMemberDialog = true;\n    this.teamMember = { ...teamMember };\n  }\n\n  confirmDeleteSelected() {\n    this.deleteTeamMembersDialog = false;\n    this.teamMembers = this.teamMembers.filter((val) => !this.selectedTeamMembers.includes(val));\n    this.messageService.add({ severity: 'success', summary: 'Successful', detail: 'Team Members Deleted', life: 3000 });\n    this.selectedTeamMembers = [];\n  }\n\n  confirmDelete() {\n    this.deleteTeamMemberDialog = false;\n    this.teamMembers = this.teamMembers.filter((val) => val._id !== this.teamMember._id);\n    this.messageService.add({ severity: 'success', summary: 'Successful', detail: 'Team Member Deleted', life: 3000 });\n    this.teamMember = {};\n  }\n\n  hideDialog() {\n    this.teamMemberDialog = false;\n    this.submitted = false;\n  }\n\n  saveTeamMember() {\n    this.submitted = true;\n\n    if (this.teamMember.name?.trim() && this.teamMember.position?.trim()) {\n      if (this.teamMember._id) {\n        this.teamMemberService.updateTeamMember(this.teamMember._id, this.teamMember).subscribe(() => {\n          this.messageService.add({ severity: 'success', summary: 'Successful', detail: 'Team Member Updated', life: 3000 });\n        });\n      } else {\n        this.teamMemberService.addTeamMember(this.teamMember).subscribe(() => {\n          this.messageService.add({ severity: 'success', summary: 'Successful', detail: 'Team Member Created', life: 3000 });\n        });\n      }\n\n      this.teamMembers = [...this.teamMembers];\n      this.teamMemberDialog = false;\n      this.teamMember = {};\n    }\n  }\n\n  findIndexById(id: string): number {\n    let index = -1;\n    for (let i = 0; i < this.teamMembers.length; i++) {\n      if (this.teamMembers[i]._id === id) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  }\n\n  createId(): string {\n    let id = '';\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 5; i++) {\n      id += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return id;\n  }\n\n  onGlobalFilter(table: Table, event: Event) {\n    table.filterGlobal((event.target as HTMLInputElement).value, 'contains');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}