{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nexport let AppTopBarComponent = class AppTopBarComponent {\n  constructor(layoutService) {\n    this.layoutService = layoutService;\n    this.isDarkMode = false;\n  }\n  changeTheme(theme, colorScheme) {\n    this.isDarkMode = !this.isDarkMode;\n    const themeLink = document.getElementById('theme-css');\n    const newHref = themeLink.getAttribute('href').replace(this.layoutService.config.theme, theme);\n    this.layoutService.config.colorScheme;\n    this.replaceThemeLink(newHref, () => {\n      this.layoutService.config.theme = theme;\n      this.layoutService.config.colorScheme = colorScheme;\n      this.layoutService.onConfigUpdate();\n    });\n  }\n  replaceThemeLink(href, onComplete) {\n    const id = 'theme-css';\n    const themeLink = document.getElementById('theme-css');\n    const cloneLinkElement = themeLink.cloneNode(true);\n    cloneLinkElement.setAttribute('href', href);\n    cloneLinkElement.setAttribute('id', id + '-clone');\n    themeLink.parentNode.insertBefore(cloneLinkElement, themeLink.nextSibling);\n    cloneLinkElement.addEventListener('load', () => {\n      themeLink.remove();\n      cloneLinkElement.setAttribute('id', id);\n      onComplete();\n    });\n  }\n};\n__decorate([ViewChild('menubutton')], AppTopBarComponent.prototype, \"menuButton\", void 0);\n__decorate([ViewChild('topbarmenubutton')], AppTopBarComponent.prototype, \"topbarMenuButton\", void 0);\n__decorate([ViewChild('topbarmenu')], AppTopBarComponent.prototype, \"menu\", void 0);\nAppTopBarComponent = __decorate([Component({\n  selector: 'app-topbar',\n  templateUrl: './app.topbar.component.html'\n})], AppTopBarComponent);","map":{"version":3,"names":["Component","ViewChild","AppTopBarComponent","constructor","layoutService","isDarkMode","changeTheme","theme","colorScheme","themeLink","document","getElementById","newHref","getAttribute","replace","config","replaceThemeLink","onConfigUpdate","href","onComplete","id","cloneLinkElement","cloneNode","setAttribute","parentNode","insertBefore","nextSibling","addEventListener","remove","__decorate","selector","templateUrl"],"sources":["D:\\systemConfig\\me\\sakai-ng-16.0.0\\src\\app\\layout\\app.topbar.component.ts"],"sourcesContent":["import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { MenuItem } from 'primeng/api';\nimport { LayoutService } from \"./service/app.layout.service\";\n\n@Component({\n    selector: 'app-topbar',\n    templateUrl: './app.topbar.component.html'\n})\nexport class AppTopBarComponent {\n\n    items!: MenuItem[];\n    isDarkMode: boolean = false;\n\n\n    @ViewChild('menubutton') menuButton!: ElementRef;\n\n    @ViewChild('topbarmenubutton') topbarMenuButton!: ElementRef;\n\n    @ViewChild('topbarmenu') menu!: ElementRef;\n\n    constructor(public layoutService: LayoutService) { }\n\n    changeTheme(theme: string, colorScheme: string) {\n        this.isDarkMode= !this.isDarkMode\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\n        const newHref = themeLink.getAttribute('href')!.replace(this.layoutService.config.theme, theme);\n        this.layoutService.config.colorScheme\n        this.replaceThemeLink(newHref, () => {\n            this.layoutService.config.theme = theme;\n            this.layoutService.config.colorScheme = colorScheme;\n            this.layoutService.onConfigUpdate();\n        });\n    }\n\n        replaceThemeLink(href: string, onComplete: Function) {\n        const id = 'theme-css';\n        const themeLink = <HTMLLinkElement>document.getElementById('theme-css');\n        const cloneLinkElement = <HTMLLinkElement>themeLink.cloneNode(true);\n\n        cloneLinkElement.setAttribute('href', href);\n        cloneLinkElement.setAttribute('id', id + '-clone');\n\n        themeLink.parentNode!.insertBefore(cloneLinkElement, themeLink.nextSibling);\n\n        cloneLinkElement.addEventListener('load', () => {\n            themeLink.remove();\n            cloneLinkElement.setAttribute('id', id);\n            onComplete();\n        });\n    }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAcC,SAAS,QAAQ,eAAe;AAQzD,WAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAY3BC,YAAmBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;IAThC,KAAAC,UAAU,GAAY,KAAK;EASwB;EAEnDC,WAAWA,CAACC,KAAa,EAAEC,WAAmB;IAC1C,IAAI,CAACH,UAAU,GAAE,CAAC,IAAI,CAACA,UAAU;IACjC,MAAMI,SAAS,GAAoBC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;IACvE,MAAMC,OAAO,GAAGH,SAAS,CAACI,YAAY,CAAC,MAAM,CAAE,CAACC,OAAO,CAAC,IAAI,CAACV,aAAa,CAACW,MAAM,CAACR,KAAK,EAAEA,KAAK,CAAC;IAC/F,IAAI,CAACH,aAAa,CAACW,MAAM,CAACP,WAAW;IACrC,IAAI,CAACQ,gBAAgB,CAACJ,OAAO,EAAE,MAAK;MAChC,IAAI,CAACR,aAAa,CAACW,MAAM,CAACR,KAAK,GAAGA,KAAK;MACvC,IAAI,CAACH,aAAa,CAACW,MAAM,CAACP,WAAW,GAAGA,WAAW;MACnD,IAAI,CAACJ,aAAa,CAACa,cAAc,EAAE;IACvC,CAAC,CAAC;EACN;EAEID,gBAAgBA,CAACE,IAAY,EAAEC,UAAoB;IACnD,MAAMC,EAAE,GAAG,WAAW;IACtB,MAAMX,SAAS,GAAoBC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;IACvE,MAAMU,gBAAgB,GAAoBZ,SAAS,CAACa,SAAS,CAAC,IAAI,CAAC;IAEnED,gBAAgB,CAACE,YAAY,CAAC,MAAM,EAAEL,IAAI,CAAC;IAC3CG,gBAAgB,CAACE,YAAY,CAAC,IAAI,EAAEH,EAAE,GAAG,QAAQ,CAAC;IAElDX,SAAS,CAACe,UAAW,CAACC,YAAY,CAACJ,gBAAgB,EAAEZ,SAAS,CAACiB,WAAW,CAAC;IAE3EL,gBAAgB,CAACM,gBAAgB,CAAC,MAAM,EAAE,MAAK;MAC3ClB,SAAS,CAACmB,MAAM,EAAE;MAClBP,gBAAgB,CAACE,YAAY,CAAC,IAAI,EAAEH,EAAE,CAAC;MACvCD,UAAU,EAAE;IAChB,CAAC,CAAC;EACN;CACH;AApC4BU,UAAA,EAAxB5B,SAAS,CAAC,YAAY,CAAC,C,qDAAyB;AAElB4B,UAAA,EAA9B5B,SAAS,CAAC,kBAAkB,CAAC,C,2DAA+B;AAEpC4B,UAAA,EAAxB5B,SAAS,CAAC,YAAY,CAAC,C,+CAAmB;AAVlCC,kBAAkB,GAAA2B,UAAA,EAJ9B7B,SAAS,CAAC;EACP8B,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE;CAChB,CAAC,C,EACW7B,kBAAkB,CA0C9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}